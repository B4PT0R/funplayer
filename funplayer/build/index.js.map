{"version":3,"file":"index.js","sources":["../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react-jsx-runtime.development.js","../node_modules/react/jsx-runtime.js","../src/Logo.jsx","../src/MediaPlayer.jsx","../src/constants.js","../src/VirtualDevice.js","../src/Actuator.js","../src/ButtPlugManager.js","../src/Channel.js","../src/FunscriptManager.js","../src/PlaylistUtils.js","../src/PlaylistManager.js","../src/LoggingManager.js","../src/FunPlayerCore.js","../src/PlaylistComponent.jsx","../src/FeatherIcon.jsx","../src/ButtPlugSettingsComponent.jsx","../src/ActuatorSettingsComponent.jsx","../src/ChannelSettingsComponent.jsx","../src/HapticSettingsComponent.jsx","../src/HapticVisualizerComponent.jsx","../src/LoggingComponent.jsx","../src/StatusBarComponent.jsx","../src/ThemeUtils.js","../src/FunPlayer.jsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    {\n      if (hasOwnProperty.call(props, 'key')) {\n        var componentName = getComponentNameFromType(type);\n        var keys = Object.keys(props).filter(function (k) {\n          return k !== 'key';\n        });\n        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n        if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n          error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n          didWarnAboutKeySpread[componentName + beforeExample] = true;\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, true);\n  }\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  {\n    return jsxWithValidation(type, props, key, false);\n  }\n}\n\nvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\n\nvar jsxs =  jsxWithValidationStatic ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsx;\nexports.jsxs = jsxs;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import React from 'react';\n\n/**\n * Logo - Composant SVG du logo FunPlayer\n * Supporte currentColor pour s'adapter au thème\n */\nconst Logo = ({ className, size = 24, ...props }) => (\n  <svg \n    className={className}\n    width={size}\n    height={size}\n    viewBox=\"0 0 1080 1080\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <path d=\"M0 0 C0.98444092 0.5667041 1.96888184 1.1334082 2.9831543 1.71728516 C11.79915747 6.81238697 20.55182327 12.01772296 29.30053711 17.22729492 C37.01717971 21.82181521 44.77417417 26.34062674 52.5625 30.8125 C62.57980932 36.56588394 72.52928972 42.42565338 82.45703125 48.33203125 C90.12448945 52.88651911 97.8292319 57.37078011 105.5625 61.8125 C114.43778787 66.91015627 123.26634893 72.079483 132.0625 77.3125 C141.99754115 83.22183413 151.97901105 89.0432911 161.99951172 94.80639648 C172.23102058 100.69094782 182.42633052 106.6363648 192.61669922 112.59179688 C195.53644319 114.29727968 198.4574316 116.00060877 201.37890625 117.703125 C212.90258952 124.4190222 224.4149979 131.15385372 235.91986084 137.9019165 C248.12240577 145.05881903 260.33991794 152.1898696 272.5625 159.3125 C286.02539523 167.15791485 299.4792247 175.01844523 312.91986084 182.9019165 C325.12240577 190.05881903 337.33991794 197.1898696 349.5625 204.3125 C365.49682551 213.59812481 381.42242035 222.89837799 397.32331848 232.24113464 C401.20081641 234.51783098 405.08665952 236.77969177 408.9765625 239.03515625 C410.92190154 240.1692253 412.86721561 241.30333721 414.8125 242.4375 C415.67439941 242.9332251 416.53629883 243.4289502 417.42431641 243.93969727 C428.5826319 250.4687809 437.81827372 257.53747917 442.03125 270.2265625 C444.71822729 280.77689979 443.53244603 291.21111996 438.20263672 300.76245117 C432.38406589 309.80903829 423.80579166 314.96817322 414.5625 320 C413.32178993 320.69045676 412.08189495 321.38237999 410.84277344 322.07568359 C408.31436743 323.48725669 405.78159044 324.89039462 403.24414062 326.28564453 C397.75033325 329.30652091 392.28298862 332.37466853 386.8125 335.4375 C385.7915625 336.00686279 384.770625 336.57622559 383.71875 337.1628418 C375.61125834 341.69308281 367.5897463 346.36086587 359.58105469 351.06298828 C351.41990626 355.84255592 343.17773139 360.46616602 334.91357422 365.06469727 C327.78621733 369.04065635 320.72310908 373.11413998 313.6875 377.25 C304.08543764 382.89231859 294.38029042 388.32652817 284.62939453 393.70678711 C277.21334148 397.80977022 269.86734825 402.01495979 262.5625 406.3125 C254.13027249 411.27329255 245.62827077 416.08609533 237.0625 420.8125 C227.40911754 426.14016517 217.846847 431.59932246 208.33984375 437.18359375 C200.67269608 441.68233073 192.94655455 446.0675082 185.19726562 450.42285156 C178.36018663 454.27423541 171.57869784 458.21313675 164.8125 462.1875 C155.16785768 467.84821163 145.42103902 473.30399746 135.62988281 478.70654297 C128.21364613 482.80957113 120.86750517 487.01486748 113.5625 491.3125 C105.13027394 496.27329169 96.62829665 501.08614413 88.0625 505.8125 C78.45433937 511.11456842 68.94070912 516.55210957 59.48046875 522.11328125 C51.36176661 526.87510919 43.16048432 531.47736805 34.93505859 536.05175781 C27.58740089 540.14898179 20.31389293 544.36008532 13.0625 548.625 C6.09749914 552.70974586 -0.88343497 556.74654328 -8 560.5625 C-8.66 560.92126221 -9.32 561.28002441 -10 561.6496582 C-19.49529425 566.65763629 -29.21138742 567.92877808 -39.625 565.1875 C-49.40844994 561.8063397 -58.01164742 554.96617899 -62.7890625 545.6875 C-65.1476677 539.98612341 -66.56491893 534.61368906 -66.55741024 528.41808891 C-66.55861445 527.45107135 -66.55981866 526.48405378 -66.56105936 525.48773265 C-66.55717915 524.4307918 -66.55329894 523.37385095 -66.54930115 522.28488159 C-66.54886525 520.58665532 -66.54886525 520.58665532 -66.54842055 518.85412145 C-66.54582889 515.02755993 -66.53561089 511.20105929 -66.52514648 507.37451172 C-66.52169149 505.31279562 -66.51896442 503.25107937 -66.5162843 501.18936213 C-66.46723654 464.5493012 -66.26073688 427.90939215 -66.06657338 391.26988077 C-66.03462433 385.23361215 -66.00328587 379.19734044 -65.97207451 373.16106796 C-65.86792731 353.02984479 -65.762487 332.89862903 -65.65524632 312.76742209 C-65.64953506 311.69529585 -65.64382379 310.62316961 -65.63793945 309.51855469 C-65.63222053 308.44504036 -65.62650161 307.37152604 -65.6206094 306.26548098 C-65.52818096 288.90048705 -65.43889183 271.5354786 -65.35104198 254.17046095 C-65.2596399 236.11053942 -65.16582381 218.05063172 -65.06965441 199.99073493 C-65.01619733 189.94345699 -64.96361915 179.89617657 -64.9136219 169.84888077 C-64.80062734 147.24727372 -64.66957889 124.64591045 -64.49601831 102.0446801 C-64.46274307 97.70566778 -64.43062744 93.36665294 -64.40105963 89.02761364 C-64.33650029 79.5765968 -64.26338248 70.12579335 -64.16400493 60.67507078 C-64.122571 56.72736636 -64.0853881 52.77976061 -64.06062138 48.83191323 C-64.03764267 45.21186234 -64.0008162 41.59221645 -63.95323582 37.97240773 C-63.93128529 36.04647398 -63.92344112 34.12039518 -63.91618669 32.19435 C-63.71565532 19.30425802 -60.63728685 9.53992519 -51.40234375 0.26953125 C-35.29393739 -13.44161682 -16.79770512 -9.85262895 0 0 Z \" fill=\"currentColor\" transform=\"translate(78.4375,266.6875)\"/>\n    <path d=\"M0 0 C10.32329688 10.12206302 15.43615919 25.94156498 20.8125 39.125 C21.11336517 39.8592218 21.41423035 40.5934436 21.72421265 41.34991455 C27.61188675 55.7421791 33.02150178 70.26584945 38 85 C38.57741943 86.70349609 38.57741943 86.70349609 39.16650391 88.44140625 C54.10899445 132.86198141 64.02602688 178.32585278 69.25 224.875 C69.33317474 225.61141724 69.41634949 226.34783447 69.50204468 227.10656738 C71.79828653 247.68010947 72.24389529 268.12198877 72.25 288.8125 C72.25066278 289.8433736 72.25066278 289.8433736 72.25133896 290.89507294 C72.25855596 312.34548781 71.86461832 333.62042507 69.25323486 354.93243408 C68.98919779 357.08819591 68.73437843 359.24493646 68.47998047 361.40185547 C61.35292101 421.02861519 45.76501631 479.47924086 23.25 535.125 C22.9876355 535.77660095 22.725271 536.4282019 22.45495605 537.09954834 C9.02987164 570.29702276 9.02987164 570.29702276 -7 578 C-17.72736492 582.36004862 -28.20065077 581.91965167 -38.984375 577.8828125 C-48.55476332 573.58342486 -56.02818825 566.70574915 -60.29296875 556.98828125 C-65.89344349 541.23887992 -61.76640772 527.30490002 -55.125 512.5625 C-30.0737579 454.99550864 -15.7886637 393.36843627 -10 331 C-9.89469971 329.93362305 -9.78939941 328.86724609 -9.6809082 327.76855469 C-8.71772342 316.63499471 -8.81392777 305.467739 -8.81469727 294.30078125 C-8.81253054 290.79935168 -8.79437695 287.2982483 -8.77539062 283.796875 C-8.72339401 263.16129731 -9.990864 242.65124978 -12.6875 222.1875 C-12.85411133 220.92164063 -13.02072266 219.65578125 -13.19238281 218.3515625 C-17.9169081 183.52793385 -25.75729187 149.2999983 -37 116 C-37.33080566 115.00258789 -37.66161133 114.00517578 -38.00244141 112.97753906 C-44.27861608 94.07593429 -51.57668965 75.66749695 -59.40625 57.359375 C-59.77290771 56.49948975 -60.13956543 55.63960449 -60.51733398 54.75366211 C-61.18491116 53.19442263 -61.85832848 51.63766207 -62.53930664 50.08422852 C-67.09251982 39.50524741 -69.14158402 28.43989337 -65.375 17.25 C-60.31379474 5.07479295 -52.7160209 -2.97224469 -40.5234375 -8.06640625 C-26.18561119 -13.37095809 -11.63699433 -9.1625641 0 0 Z \" fill=\"currentColor\" transform=\"translate(991,265)\"/>\n    <path d=\"M0 0 C0.71800781 0.24492187 1.43601562 0.48984375 2.17578125 0.7421875 C13.88563866 5.3128745 20.2220512 14.25032782 26 25 C26.40976074 25.76054687 26.81952148 26.52109375 27.24169922 27.3046875 C68.40069131 104.70862073 79.83368986 194.25818804 57 279 C56.7932666 279.77827148 56.5865332 280.55654297 56.37353516 281.35839844 C50.67826733 302.44971309 42.65347343 322.9271035 33.375 342.6875 C32.87347412 343.77877197 32.37194824 344.87004395 31.85522461 345.99438477 C26.82794386 356.39228459 19.20937211 367.00107292 8 371.1875 C-3.56511576 375.09945862 -14.49749428 374.80112021 -25.65625 369.8125 C-35.66147775 364.37756147 -42.52286667 356.26443448 -46.19140625 345.5 C-49.74931552 330.09958111 -44.57410568 317.81750338 -38.25 304.0625 C-8.53025778 238.05676683 -3.54858745 167.48630877 -29.09521484 99.17749023 C-34.67863837 84.83123608 -41.28944333 70.75080457 -48.53881836 57.17114258 C-53.8524583 46.96498699 -54.71988293 35.71167665 -51.375 24.6875 C-49.37327184 19.34955825 -46.7839695 15.23291503 -43 11 C-42.24783203 10.07574219 -42.24783203 10.07574219 -41.48046875 9.1328125 C-31.5359111 -2.14252537 -13.80998523 -4.79628229 0 0 Z \" fill=\"currentColor\" transform=\"translate(800,363)\"/>\n    <path d=\"M0 0 C20.36797209 17.5208362 30.98152094 48.65216331 33.25 74.875 C34.66601923 105.04141347 29.99407499 140.23347324 9.25 163.875 C2.33437498 171.2402957 -6.767565 174.89927327 -16.75 175.875 C-29.27439391 176.03859876 -39.73763503 171.67182096 -48.65625 163.02734375 C-57.30505975 153.81049777 -59.15690908 144.16178785 -58.96484375 131.91796875 C-58.6585184 123.68904251 -55.38521402 117.01020231 -51.953125 109.66015625 C-46.34038834 96.66703535 -45.36581086 83.40730035 -49.75 69.875 C-51.70175288 65.01460373 -54.2229643 60.45698781 -56.75 55.875 C-62.88742914 44.32124959 -65.72598793 34.36956431 -62.625 21.25 C-59.29685073 10.41810676 -51.73490932 2.40718705 -42.1875 -3.5 C-28.61773045 -9.91480015 -12.25454701 -8.86098015 0 0 Z \" fill=\"currentColor\" transform=\"translate(637.75,466.125)\"/>\n  </svg>\n);\n\nexport default Logo;","import React, { Component } from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\nimport Logo from './Logo';\n\n// Import conditionnel pour éviter les Feature Policy warnings\nlet videojsVR = null;\nlet videojsPlaylist = null;\n\nconst loadVRPlugin = async () => {\n  if (!videojsVR) {\n    try {\n      videojsVR = await import('videojs-vr/dist/videojs-vr');\n      await import('videojs-vr/dist/videojs-vr.css');\n      return videojsVR;\n    } catch (error) {\n      return null;\n    }\n  }\n  return videojsVR;\n};\n\nconst loadPlaylistPlugin = async () => {\n  if (!videojsPlaylist) {\n    try {\n      videojsPlaylist = await import('videojs-playlist');\n      return videojsPlaylist;\n    } catch (error) {\n      return null;\n    }\n  }\n  return videojsPlaylist;\n};\n\n/**\n * MediaPlayer - ✅ REFACTORISÉ: Utilise this.notify directement\n * \n * AUTONOME: Reçoit notify en props comme les autres managers\n */\nclass MediaPlayer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n    this.player = null;\n    this.isPlayerReady = false;\n    this.initRetries = 0;\n    this.maxRetries = 3;\n\n    this.state = {\n      renderTrigger: 0\n    };\n\n    this.isInitialized = false;\n    this.isInitializing = false;\n    this.isDestroyed = false;\n    \n    // ✅ NOUVEAU: Récupérer notify directement depuis les props\n    this.notify = props.notify;\n  }\n\n  // ============================================================================\n  // LIFECYCLE\n  // ============================================================================\n\n  componentDidMount() {\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this.isInitializing = false;\n    \n    const hasContent = this._hasValidPlaylist();\n    \n    if (hasContent && !this.isInitialized && !this.isInitializing) {\n      setTimeout(() => {\n        if (!this.isDestroyed) {\n          this.initPlayer();\n        }\n      }, 50);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.isDestroyed) return;\n    \n    // ✅ Test de référence simple et ultra-performant\n    if (prevProps.playlist === this.props.playlist) return;\n    \n    // ✅ Si on arrive ici, le contenu a vraiment changé\n    this.handlePlaylistPropsChange();\n    \n    const hasContent = this._hasValidPlaylist();\n    if (hasContent && !this.isInitialized && !this.isInitializing) {\n      setTimeout(() => {\n        if (!this.isDestroyed) {\n          this.initPlayer();\n        }\n      }, 50);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup();\n  }\n\n  // ============================================================================\n  // GESTION PLAYLIST VIA PROPS\n  // ============================================================================\n\n  handlePlaylistPropsChange = () => {\n    if (this.player && this.isPlayerReady) {\n      this.updatePlaylistFromProps();\n    }\n  }\n\n  updatePlaylistFromProps = async () => {\n    if (!this.player || !this.isPlayerReady || typeof this.player.playlist !== 'function') {\n      return;\n    }\n\n    const playlistItems = this.props.playlist || [];\n    \n    if (playlistItems.length === 0) {\n      this.player.playlist([]);\n      this.notify?.('status:media', { message: 'Playlist cleared', type: 'info' });\n      return;\n    }\n\n    try {\n      this.notify?.('status:media', { message: `Updating Video.js playlist: ${playlistItems.length} items`, type: 'log' });\n      \n      const vjsPlaylist = this.filterForVideojs(playlistItems);\n      this.player.playlist(vjsPlaylist);\n      \n      if (this.player.playlist.currentItem() === -1) {\n        this.player.playlist.currentItem(0);\n      }\n      \n      this.notify?.('status:media', { message: `Video.js playlist updated successfully`, type: 'success' });\n      this._triggerRender();\n      \n    } catch (error) {\n      this.notify?.('status:media', { message: 'Failed to update Video.js playlist', type: 'error', error: error.message });\n      this.props.onError?.(error);\n    }\n  }\n\n  // ============================================================================\n  // HELPERS AUTONOMES\n  // ============================================================================\n\n  _hasValidPlaylist = () => {\n    const items = this.props.playlist;\n    return items && items.length > 0;\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  _isPlaylistMode = () => {\n    return this.player && typeof this.player.playlist === 'function' && this.player.playlist().length > 0;\n  }\n\n  // ============================================================================\n  // PLAYLIST PLUGIN\n  // ============================================================================\n\n  initPlaylistPlugin = async () => {\n    if (!this.player || this.isDestroyed) return;\n\n    try {\n      this.notify?.('status:media', { message: 'Loading Video.js playlist plugin...', type: 'log' });\n      const playlistPlugin = await loadPlaylistPlugin();\n\n      if (!playlistPlugin) {\n        this.notify?.('status:media', { message: 'Playlist plugin not available, skipping', type: 'info' });\n        return;\n      }\n\n      if (typeof this.player.playlist !== 'function' && playlistPlugin.default) {\n        videojs.registerPlugin('playlist', playlistPlugin.default);\n      }\n\n      if (typeof this.player.playlist !== 'function') {\n        throw new Error('Playlist plugin failed to register');\n      }\n\n      this.player.on('playlistchange', this.handlePlaylistChange);\n      this.player.on('playlistitem', this.handlePlaylistItem);\n      \n      this.notify?.('status:media', { message: 'Video.js playlist plugin loaded successfully', type: 'success' });\n      \n    } catch (error) {\n      this.notify?.('status:media', { message: 'Playlist plugin initialization failed', type: 'error', error: error.message });\n      throw error;\n    }\n  }\n\n  filterForVideojs = (playlist) => {\n    return playlist.map(item => {\n      const { funscript, ...vjsItem } = item;\n      return vjsItem;\n    });\n  };\n\n  // ============================================================================\n  // PLAYLIST EVENT HANDLERS - ✅ MODIFIÉ: Timing correct des événements\n  // ============================================================================\n\n  handlePlaylistChange = () => {\n    this.notify?.('status:media', { message: 'Video.js playlist changed', type: 'log' });\n    this._triggerRender();\n    this.updatePlaylistButtons();\n  }\n\n  // ✅ MODIFIÉ: Attendre que Video.js soit synchronisé avant d'émettre\n  handlePlaylistItem = () => {\n    // ✅ NOUVEAU: Petit délai pour s'assurer que Video.js a fini sa mise à jour\n    setTimeout(() => {\n      const newVideoJsIndex = this.player.playlist.currentItem();\n      \n      this.notify?.('status:media', { message: `Video.js switched to item ${newVideoJsIndex}`, type: 'log' });\n      \n      // ✅ Maintenant on émet avec le bon index\n      this.props.onPlaylistItemChange?.(newVideoJsIndex);\n      \n      // Gestion poster\n      setTimeout(() => {\n        const currentItem = this.getCurrentPlaylistItem();\n        if (currentItem && currentItem.poster) {\n          this.player.poster(currentItem.poster);\n        }\n      }, 100);\n      \n      this.updatePlaylistButtons();\n    }, 0); // Micro-délai pour laisser Video.js finir\n  }\n\n  // ============================================================================\n  // PLAYLIST PUBLIC API - ✅ MODIFIÉ: S'assurer de la synchronisation\n  // ============================================================================\n\n  getCurrentPlaylistItem = () => {\n    if (!this._isPlaylistMode()) return null;\n    const index = this.player.playlist.currentItem();\n    const playlist = this.player.playlist();\n    return index >= 0 && index < playlist.length ? playlist[index] : null;\n  }\n\n  goToPlaylistItem = (index) => {\n    if (!this._isPlaylistMode()) return false;\n    try {\n      // ✅ MODIFIÉ: S'assurer que l'index est valide avant de naviguer\n      const playlist = this.player.playlist();\n      if (index < 0 || index >= playlist.length) {\n        this.notify?.('status:media', { message: `Invalid playlist index: ${index}`, type: 'error' });\n        return false;\n      }\n      \n      this.player.playlist.currentItem(index);\n      this.notify?.('status:media', { message: `Navigated to playlist item ${index}`, type: 'log' });\n      \n      // ✅ NOUVEAU: Vérification que la navigation a bien fonctionné\n      setTimeout(() => {\n        const actualIndex = this.player.playlist.currentItem();\n        if (actualIndex !== index) {\n          this.notify?.('status:media', { message: `Navigation mismatch: requested ${index}, got ${actualIndex}`, type: 'error' });\n        }\n      }, 10);\n      \n      return true;\n    } catch (error) {\n      this.notify?.('status:media', { message: `Failed to navigate to playlist item ${index}`, type: 'error', error: error.message });\n      return false;\n    }\n  }\n\n  handleNext = () => {\n    if (this._isPlaylistMode()) {\n      this.player.playlist.next();\n      this.notify?.('status:media', { message: 'Video.js playlist: next item', type: 'log' });\n    }\n  }\n\n  handlePrevious = () => {\n    if (this._isPlaylistMode()) {\n      this.player.playlist.previous();\n      this.notify?.('status:media', { message: 'Video.js playlist: previous item', type: 'log' });\n    }\n  }\n\n  getPlaylistInfo = () => {\n    if (!this._isPlaylistMode()) {\n      return { hasPlaylist: false, currentIndex: -1, totalItems: 0 };\n    }\n    \n    const currentIndex = this.player.playlist.currentItem();\n    const totalItems = this.player.playlist().length;\n    \n    return {\n      hasPlaylist: true,\n      currentIndex,\n      totalItems,\n      canNext: currentIndex < totalItems - 1,\n      canPrevious: currentIndex > 0\n    };\n  }\n\n  // ============================================================================\n  // PLAYLIST COMPONENTS REGISTRATION\n  // ============================================================================\n\n  registerPlaylistComponents = () => {\n    const Button = videojs.getComponent('Button');\n\n    class PreviousButton extends Button {\n      constructor(player, options) {\n        super(player, options);\n        this.controlText('Previous item');\n      }\n\n      handleClick() {\n        if (this.player().playlist) {\n          this.player().playlist.previous();\n        }\n      }\n\n      createEl() {\n        const el = super.createEl('button', {\n          className: 'vjs-previous-button vjs-control vjs-button'\n        });\n        el.innerHTML = '<span aria-hidden=\"true\">⏮</span>';\n        el.title = 'Previous item';\n        return el;\n      }\n    }\n\n    class NextButton extends Button {\n      constructor(player, options) {\n        super(player, options);\n        this.controlText('Next item');\n      }\n\n      handleClick() {\n        if (this.player().playlist) {\n          this.player().playlist.next();\n        }\n      }\n\n      createEl() {\n        const el = super.createEl('button', {\n          className: 'vjs-next-button vjs-control vjs-button'\n        });\n        el.innerHTML = '<span aria-hidden=\"true\">⏭</span>';\n        el.title = 'Next item';\n        return el;\n      }\n    }\n\n    videojs.registerComponent('PreviousButton', PreviousButton);\n    videojs.registerComponent('NextButton', NextButton);\n\n    this.notify?.('status:media', { message: 'Video.js playlist control buttons registered', type: 'log' });\n  }\n\n  updatePlaylistButtons = () => {\n    if (!this.player) return;\n\n    const controlBar = this.player.getChild('controlBar');\n    if (!controlBar) return;\n\n    const prevBtn = controlBar.getChild('PreviousButton');\n    const nextBtn = controlBar.getChild('NextButton');\n    const playlistInfo = this.getPlaylistInfo();\n\n    if (prevBtn) {\n      prevBtn.el().disabled = !playlistInfo.canPrevious;\n      prevBtn.el().style.opacity = playlistInfo.canPrevious ? '1' : '0.3';\n    }\n\n    if (nextBtn) {\n      nextBtn.el().disabled = !playlistInfo.canNext;\n      nextBtn.el().style.opacity = playlistInfo.canNext ? '1' : '0.3';\n    }\n  }\n\n  // ============================================================================\n  // INITIALIZATION\n  // ============================================================================\n\n  initPlayer = async () => {\n    if (this.isDestroyed || this.isInitialized || this.isInitializing) {\n      return;\n    }\n\n    if (!this.videoRef?.current) {\n      this.notify?.('status:media', { message: 'Video element not available for initialization', type: 'error' });\n      return;\n    }\n\n    this.isInitializing = true;\n    this.notify?.('status:media', { message: 'Initializing Video.js player...', type: 'processing' });\n\n    try {\n      const videoElement = this.videoRef.current;\n      this.registerPlaylistComponents();\n\n      const options = {\n        controls: true,\n        responsive: true,\n        fluid: true,\n        playsinline: true,\n        preload: 'metadata',\n        techOrder: ['html5'],\n        html5: {\n          vhs: {\n            overrideNative: false\n          }\n        },\n        controlBar: {\n          children: [\n            'playToggle', 'currentTimeDisplay', 'timeDivider', \n            'durationDisplay', 'progressControl', 'PreviousButton', \n            'NextButton', 'volumePanel', 'fullscreenToggle'\n          ]\n        }\n      };\n\n      this.player = videojs(videoElement, options);\n      \n      if (!this.player) {\n        throw new Error('Failed to create Video.js player instance');\n      }\n\n      this.player.ready(() => {\n        if (this.isDestroyed) return;\n\n        this.isPlayerReady = true;\n        this.isInitialized = true;\n        this.isInitializing = false;\n        \n        this.notify?.('status:media', { message: 'Video.js player ready', type: 'success' });\n        \n        this.initPlugins().then(() => {\n          // ✅ CORRIGÉ: Callbacks après plugins pour supporter playlist events\n          this.setupCallbacks();\n          \n          this.notify?.('status:media', { message: 'Video.js player initialization complete', type: 'success' });\n          this._triggerRender();\n        }).catch((error) => {\n          this.notify?.('status:media', { message: 'Plugin initialization failed', type: 'error', error: error.message });\n          this.props.onError?.(error);\n        });\n      });\n\n    } catch (error) {\n      this.notify?.('status:media', { message: 'Failed to initialize Video.js player', type: 'error', error: error.message });\n      this.isInitializing = false;\n      this.props.onError?.(error);\n    }\n  }\n\n  initPlugins = async () => {\n    if (this.isDestroyed || !this.player) return;\n\n    try {\n      this.notify?.('status:media', { message: 'Loading Video.js plugins...', type: 'processing' });\n\n      const [vrResult, playlistResult] = await Promise.allSettled([\n        this.initVRPlugin(),\n        this.initPlaylistPlugin()\n      ]);\n\n      if (vrResult.status === 'rejected') {\n        this.notify?.('status:media', { message: 'VR plugin initialization failed', type: 'log', error: vrResult.reason?.message });\n      }\n\n      if (playlistResult.status === 'rejected') {\n        this.notify?.('status:media', { message: 'Playlist plugin initialization failed', type: 'error', error: playlistResult.reason?.message });\n      }\n\n      if (this._hasValidPlaylist()) {\n        await this.updatePlaylistFromProps();\n      }\n\n      this.notify?.('status:media', { message: 'Video.js plugins loaded', type: 'success' });\n\n    } catch (error) {\n      this.notify?.('status:media', { message: 'Plugin initialization error', type: 'error', error: error.message });\n      throw error;\n    }\n  }\n\n  // ============================================================================\n  // VR PLUGIN\n  // ============================================================================\n  \n  initVRPlugin = async () => {\n    if (!this.player || this.isDestroyed) return;\n\n    try {\n      this.notify?.('status:media', { message: 'Loading Video.js VR plugin...', type: 'log' });\n      const vrPlugin = await loadVRPlugin();\n      \n      if (!vrPlugin) {\n        this.notify?.('status:media', { message: 'VR plugin not available', type: 'info' });\n        return;\n      }\n\n      if (typeof this.player.vr === 'function') {\n        this.configureVRPlugin();\n        return;\n      }\n\n      if (!videojs.getPlugin('vr')) {\n        if (vrPlugin.default) {\n          const vrWrapper = function(options = {}) {\n            return new vrPlugin.default(this, options);\n          };\n          videojs.registerPlugin('vr', vrWrapper);\n        }\n      }\n\n      this.configureVRPlugin();\n      this.notify?.('status:media', { message: 'VR plugin loaded successfully', type: 'success' });\n      \n    } catch (error) {\n      this.notify?.('status:media', { message: 'VR plugin initialization failed', type: 'log', error: error.message });\n    }\n  }\n\n  configureVRPlugin = () => {\n    if (!this.player || this.isDestroyed) return;\n    \n    try {\n      if (!this.player.mediainfo) {\n        this.player.mediainfo = {};\n      }\n      \n      this.player.vr({\n        projection: 'AUTO',\n        debug: false,\n        forceCardboard: false\n      });\n      \n      this.notify?.('status:media', { message: 'VR plugin configured', type: 'log' });\n    } catch (error) {\n      this.notify?.('status:media', { message: 'VR configuration failed', type: 'log', error: error.message });\n    }\n  }\n\n  // ============================================================================\n  // CALLBACKS\n  // ============================================================================\n\n  setupCallbacks = () => {\n    if (!this.player) return;\n\n    // ============================================================================\n    // ERROR EVENTS (en premier pour capturer les erreurs setup)\n    // ============================================================================\n    \n    this.player.on('error', (error) => {\n      this.notify?.('status:media', { message: 'Video.js player error occurred', type: 'error', error: error?.message || 'Unknown Video.js error' });\n      this.props.onError?.(error);\n    });\n\n    // ============================================================================\n    // PLAYBACK CONTROL EVENTS\n    // ============================================================================\n    \n    this.player.on('play', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: `Playback started at ${currentTime.toFixed(1)}s`, type: 'log' });\n      \n      this.updatePlaylistButtons();\n      this.props.onPlay?.({ currentTime });\n    });\n\n    this.player.on('pause', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: `Playback paused at ${currentTime.toFixed(1)}s`, type: 'log' });\n      \n      this.props.onPause?.({ currentTime });\n    });\n\n    this.player.on('ended', () => {\n      this.notify?.('status:media', { message: 'Media playback ended', type: 'info' });\n      this.props.onEnded?.({ currentTime: 0 });\n    });\n\n    // ============================================================================\n    // SEEKING EVENTS\n    // ============================================================================\n    \n    this.player.on('seeking', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: `Seeking to ${currentTime.toFixed(1)}s`, type: 'log' });\n      this.props.onSeeking?.({ currentTime });\n    });\n\n    this.player.on('seeked', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: `Seeked to ${currentTime.toFixed(1)}s`, type: 'log' });\n      \n      this.props.onSeeked?.({ currentTime });\n    });\n\n    // ============================================================================\n    // TIME EVENTS\n    // ============================================================================\n    \n    this.player.on('timeupdate', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.props.onTimeUpdate?.({ currentTime });\n    });\n\n    this.player.on('durationchange', () => {\n      const duration = this.player.duration() || 0;\n      this.notify?.('status:media', { message: `Duration changed: ${duration.toFixed(1)}s`, type: 'log' });\n      this.props.onDurationChange?.({ duration });\n    });\n\n    // ============================================================================\n    // LOADING EVENTS\n    // ============================================================================\n    \n    this.player.on('loadstart', () => {\n      this.notify?.('status:media', { message: 'Media loading started', type: 'log' });\n      this.props.onLoadStart?.({ });\n    });\n\n    this.player.on('loadeddata', () => {\n      const duration = this.player.duration() || 0;\n      this.notify?.('status:media', { message: 'Media data loaded', type: 'log' });\n      this.props.onLoadedData?.({ duration });\n    });\n\n    this.player.on('loadedmetadata', () => {\n      const duration = this.player.duration() || 0;\n      this.notify?.('status:media', { message: `Media loaded: ${duration.toFixed(1)}s duration`, type: 'success' });\n      \n      this.updatePlaylistButtons();\n      this._triggerRender();\n      \n      this.props.onLoadedMetadata?.({ \n        duration, \n        type: this._isPlaylistMode() ? 'playlist' : 'media' \n      });\n    });\n\n    this.player.on('canplay', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: 'Media ready to play', type: 'log' });\n      this.props.onCanPlay?.({ currentTime });\n    });\n\n    this.player.on('canplaythrough', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: 'Media can play through', type: 'log' });\n      this.props.onCanPlayThrough?.({ currentTime });\n    });\n\n    // ============================================================================\n    // BUFFERING EVENTS\n    // ============================================================================\n    \n    this.player.on('waiting', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: 'Media buffering...', type: 'log' });\n      this.props.onWaiting?.({ currentTime });\n    });\n\n    this.player.on('stalled', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: 'Media connection stalled', type: 'warning' });\n      this.props.onStalled?.({ currentTime });\n    });\n\n    this.player.on('suspend', () => {\n      const currentTime = this.player.currentTime() || 0;\n      this.notify?.('status:media', { message: 'Media loading suspended', type: 'log' });\n      this.props.onSuspend?.({ currentTime });\n    });\n\n    // ============================================================================\n    // VOLUME EVENTS\n    // ============================================================================\n    \n    this.player.on('volumechange', () => {\n      const volume = this.player.volume();\n      const muted = this.player.muted();\n      this.notify?.('status:media', { message: `Volume: ${muted ? 'muted' : Math.round(volume * 100) + '%'}`, type: 'log' });\n      this.props.onVolumeChange?.({ volume, muted });\n    });\n\n    // ============================================================================\n    // ERROR EVENTS\n    // ============================================================================\n    \n    this.player.on('error', (error) => {\n      this.notify?.('status:media', { message: 'Video.js player error occurred', type: 'error', error: error?.message || 'Unknown Video.js error' });\n      this.props.onError?.(error);\n    });\n\n    // ============================================================================\n    // SIZE EVENTS\n    // ============================================================================\n    \n    this.player.on('resize', () => {\n      const dimensions = {\n        width: this.player.currentWidth(),\n        height: this.player.currentHeight()\n      };\n      this.notify?.('status:media', { message: `Player resized: ${dimensions.width}x${dimensions.height}`, type: 'log' });\n      this.props.onResize?.(dimensions);\n    });\n\n    // ============================================================================\n    // PLAYLIST EVENTS - ✅ Événements playlist spécifiques FunPlayer\n    // ============================================================================\n    \n    // Setup playlist callbacks si playlist plugin est disponible\n    if (this.player.playlist) {\n      this.player.on('playlistitem', (event) => {\n        const currentIndex = this.player.playlist.currentItem();\n        const totalItems = this.player.playlist().length;\n        \n        this.notify?.('status:media', { \n          message: `Playlist item changed: ${currentIndex + 1}/${totalItems}`, \n          type: 'info' \n        });\n        \n        this.updatePlaylistButtons();\n        this._triggerRender();\n        \n        this.props.onPlaylistItemChange?.({ \n          index: currentIndex,\n          total: totalItems,\n          item: this.player.playlist()[currentIndex]\n        });\n      });\n    }\n  }\n\n  // ============================================================================\n  // CLEANUP\n  // ============================================================================\n\n  cleanup = () => {\n    this.isDestroyed = true;\n    this.isInitialized = false;\n    this.isInitializing = false;\n    \n    if (this.player) {\n      try {\n        if (!this.player.paused()) {\n          this.player.pause();\n        }\n        \n        if (typeof this.player.dispose === 'function') {\n          this.player.dispose();\n        }\n        \n        this.notify?.('status:media', { message: 'Video.js player disposed', type: 'log' });\n      } catch (error) {\n        this.notify?.('status:media', { message: 'Error during player cleanup', type: 'error', error: error.message });\n      } finally {\n        this.player = null;\n        this.isPlayerReady = false;\n        this.initRetries = 0;\n        \n        this.setState({\n          renderTrigger: 0\n        });\n      }\n    }\n  }\n\n  // ============================================================================\n  // PUBLIC API\n  // ============================================================================\n\n  play = () => this.player?.play()\n  pause = () => this.player?.pause()\n  stop = () => { \n    this.player?.pause(); \n    this.player?.currentTime(0); \n  }\n  seek = (time) => this.player?.currentTime(time)\n  getTime = () => this.player?.currentTime() || 0\n  getDuration = () => this.player?.duration() || 0\n  isPlaying = () => this.player ? !this.player.paused() : false\n\n  nextItem = () => this.handleNext()\n  previousItem = () => this.handlePrevious()\n  goToItem = (index) => this.goToPlaylistItem(index)\n  getCurrentItem = () => this.getCurrentPlaylistItem()\n  getPlaylist = () => this._isPlaylistMode() ? this.player.playlist() : []\n\n  getState = () => ({\n    currentTime: this.getTime(),\n    duration: this.getDuration(),\n    isPlaying: this.isPlaying(),\n    mediaType: this._isPlaylistMode() ? 'playlist' : 'media',\n    playlistInfo: this.getPlaylistInfo()\n  })\n\n  // ============================================================================\n  // RENDER\n  // ============================================================================\n\n  render() {\n    const hasContent = this._hasValidPlaylist();\n    \n    return (\n      <div className='fp-media-player'>\n        {hasContent ? (\n          <video\n            ref={this.videoRef}\n            className=\"video-js vjs-default-skin fp-media-player-video\"\n            playsInline\n            data-setup=\"{}\"\n          />\n        ) : (\n          <div className=\"fp-media-player-placeholder\">\n            <Logo className=\"fp-media-player-placeholder-logo\" size={240} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MediaPlayer;","/**\n * types.js - Types et enums centralisés pour FunPlayer\n * \n * RESPONSABILITÉS:\n * - Définitions des types de base utilisés dans toute l'application\n * - Enums pour les signaux haptiques et actions d'actuateurs\n * - Mappings et utilitaires de compatibilité\n * - Types pour les événements et états\n */\n\n// ============================================================================\n// TYPES DE SIGNAUX HAPTIQUES\n// ============================================================================\n\n/**\n * Type de signal haptique - détermine la compatibilité canal/actuateur\n * un canal peut contrôler un actuateur ssi ils ont le même HapticType\n * un actuateur est POLAR s'il gère rotate, SCALAR dans tout autre cas\n * un canal est POLAR s'il est orienté (valeur signée), SCALAR si valeurs >0\n */\nexport const HapticType = {\n  SCALAR: 'scalar',  // Signal unidirectionnel (0 à 1) - pour linear, vibrate, oscillate\n  POLAR: 'polar'     // Signal bidirectionnel (-1 à +1) - pour rotate\n};\n\n/**\n * Type de commande prise en charge par l'actuateur - détermine la commande envoyée au device\n */\nexport const Capability = {\n  LINEAR: 'linear',      // Mouvement linéaire\n  VIBRATE: 'vibrate',    // Vibration\n  OSCILLATE: 'oscillate', // Oscillation\n  ROTATE: 'rotate'       // Rotation\n};\n\n/**\n * Mapping action → type de signal par défaut\n */\nexport const CapabilityToHapticType = {\n  [Capability.LINEAR]: HapticType.SCALAR,\n  [Capability.VIBRATE]: HapticType.SCALAR,\n  [Capability.OSCILLATE]: HapticType.SCALAR,\n  [Capability.ROTATE]: HapticType.POLAR\n};\n\n\n// ============================================================================\n// TYPES D'ÉVÉNEMENTS MANAGER\n// ============================================================================\n\n/**\n * Types d'événements pour le système de messaging entre managers\n */\nexport const EventType = {\n  // ButtPlug events\n  BUTTPLUG_CONNECTION: 'buttplug:connection',\n  BUTTPLUG_DEVICE: 'buttplug:device',\n  BUTTPLUG_ERROR: 'buttplug:error',\n  BUTTPLUG_CONFIG: 'buttplug:config',\n  BUTTPLUG_MAPPING: 'buttplug:mapping',\n  BUTTPLUG_GLOBAL_SCALE: 'buttplug:globalScale',\n  BUTTPLUG_GLOBAL_OFFSET: 'buttplug:globalOffset',\n  BUTTPLUG_ACTUATOR_OPTIONS: 'buttplug:actuatorOptions',\n  \n  // Funscript events\n  FUNSCRIPT_LOAD: 'funscript:load',\n  FUNSCRIPT_RESET: 'funscript:reset',\n  FUNSCRIPT_CHANNELS: 'funscript:channels',\n  \n  // Playlist events\n  PLAYLIST_LOADED: 'playlist:loaded',\n  PLAYLIST_ITEM_CHANGED: 'playlist:itemChanged',\n  PLAYLIST_PLAYBACK_CHANGED: 'playlist:playbackChanged',\n  PLAYLIST_ITEM_UPDATED: 'playlist:itemUpdated',\n  PLAYLIST_ERROR: 'playlist:error',\n  \n  // Combined manager events\n  CORE_AUTO_CONNECT: 'core:autoConnect',\n  CORE_AUTO_MAP: 'core:autoMap'\n};\n\n// ============================================================================\n// TYPES D'ÉTAT PLAYBACK\n// ============================================================================\n\n/**\n * États de lecture possibles\n */\nexport const PlaybackState = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  READY: 'ready',\n  PLAYING: 'playing',\n  PAUSED: 'paused',\n  ENDED: 'ended',\n  ERROR: 'error'\n};\n\n/**\n * Types de media supportés\n */\nexport const MediaType = {\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  HAPTIC: 'haptic',\n  VIDEO_HAPTIC: 'video_haptic',\n  AUDIO_HAPTIC: 'audio_haptic',\n};\n\n// ============================================================================\n// CONFIGURATION PAR DÉFAUT\n// ============================================================================\n\n/**\n * Configuration par défaut d'un actuateur\n */\nexport const DEFAULT_ACTUATOR_SETTINGS = {\n  enabled: true,\n  scale: 1.0,\n  invert: false,\n  timeOffset: 0.0\n};\n\n/**\n * Configuration par défaut d'un canal\n */\nexport const DEFAULT_CHANNEL_CONFIG = {\n  timeField: 'at',\n  valueField: 'pos',\n  directionField: null\n};\n\n/**\n * Paramètres de performance par défaut\n */\nexport const DEFAULT_PERFORMANCE = {\n  UPDATE_RATE: 60,           // Hz - fréquence de la boucle haptique\n  SEEK_THRESHOLD: 100,       // ms - seuil pour détecter un seek vs progression\n  MIN_COMMAND_INTERVAL: 16,  // ms - intervalle minimum entre commandes\n  MAX_FILE_SIZE_MB: 200      // MB - taille max des fichiers uploadés\n};\n\n// ============================================================================\n// TYPES DE VALIDATION\n// ============================================================================\n\n/**\n * Types MIME supportés pour les media\n */\nexport const SUPPORTED_MEDIA_TYPES = {\n  VIDEO: [\n    'video/mp4', 'video/webm', 'video/quicktime', \n    'video/x-msvideo', 'video/x-matroska', 'video/ogg'\n  ],\n  AUDIO: [\n    'audio/mpeg', 'audio/wav', 'audio/ogg', \n    'audio/mp4', 'audio/aac', 'audio/flac'\n  ],\n  STREAMING: [\n    'application/x-mpegURL',     // HLS\n    'application/dash+xml',      // DASH\n    'application/vnd.ms-sstr+xml' // Smooth Streaming\n  ]\n};\n\n/**\n * Extensions de fichiers supportées\n */\nexport const SUPPORTED_EXTENSIONS = {\n  VIDEO: ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogv', '.m4v'],\n  AUDIO: ['.mp3', '.wav', '.ogg', '.m4a', '.aac', '.flac'],\n  FUNSCRIPT: ['.funscript', '.json'],\n  IMAGE: ['.jpg', '.jpeg', '.png', '.gif', '.webp']\n};\n\n// ============================================================================\n// UTILITAIRES DE VALIDATION\n// ============================================================================\n\n/**\n * Vérifie si un type MIME est supporté\n */\nexport const isSupportedMimeType = (mimeType) => {\n  return Object.values(SUPPORTED_MEDIA_TYPES)\n    .flat()\n    .includes(mimeType.toLowerCase());\n};\n\n/**\n * Vérifie si une extension est supportée\n */\nexport const isSupportedExtension = (extension) => {\n  const ext = extension.toLowerCase();\n  return Object.values(SUPPORTED_EXTENSIONS)\n    .flat()\n    .includes(ext);\n};\n\n/**\n * Détermine le type de media depuis un MIME type\n */\nexport const getMediaTypeFromMime = (mimeType) => {\n  const mime = mimeType.toLowerCase();\n  \n  if (SUPPORTED_MEDIA_TYPES.VIDEO.includes(mime)) {\n    return MediaType.VIDEO;\n  }\n  if (SUPPORTED_MEDIA_TYPES.AUDIO.includes(mime)) {\n    return MediaType.AUDIO;\n  }\n  if (SUPPORTED_MEDIA_TYPES.STREAMING.includes(mime)) {\n    return MediaType.VIDEO; // Traiter streaming comme vidéo\n  }\n  \n  return null;\n};\n\n/**\n * Détecte le type MIME depuis une extension\n */\nexport const getMimeTypeFromExtension = (extension) => {\n  const ext = extension.toLowerCase();\n  \n  const mimeMap = {\n    // Video\n    '.mp4': 'video/mp4',\n    '.webm': 'video/webm', \n    '.mov': 'video/quicktime',\n    '.avi': 'video/x-msvideo',\n    '.mkv': 'video/x-matroska',\n    '.ogv': 'video/ogg',\n    '.m4v': 'video/mp4',\n    \n    // Audio\n    '.mp3': 'audio/mpeg',\n    '.wav': 'audio/wav',\n    '.ogg': 'audio/ogg',\n    '.m4a': 'audio/mp4',\n    '.aac': 'audio/aac',\n    '.flac': 'audio/flac',\n    \n    // Funscript\n    '.funscript': 'application/json',\n    '.json': 'application/json',\n    \n    // Images\n    '.jpg': 'image/jpeg',\n    '.jpeg': 'image/jpeg',\n    '.png': 'image/png',\n    '.gif': 'image/gif',\n    '.webp': 'image/webp'\n  };\n  \n  return mimeMap[ext] || 'application/octet-stream';\n};\n\n// ============================================================================\n// EXPORTS GROUPÉS\n// ============================================================================\n\nexport const Types = {\n  HapticType,\n  Capability,\n  EventType,\n  PlaybackState,\n  MediaType\n};\n\nexport const Config = {\n  DEFAULT_ACTUATOR_SETTINGS,\n  DEFAULT_CHANNEL_CONFIG,\n  DEFAULT_PERFORMANCE\n};\n\nexport const Validation = {\n  SUPPORTED_MEDIA_TYPES,\n  SUPPORTED_EXTENSIONS,\n  isSupportedMimeType,\n  isSupportedExtension,\n  getMediaTypeFromMime,\n  getMimeTypeFromExtension\n};\n\nexport default {\n  ...Types,\n  ...Config,\n  ...Validation,\n  CapabilityToHapticType\n};","import { Capability } from './constants';\n\n/**\n * VirtualDevice - ✅ REFACTORISÉ: Status notifications uniformisées\n * \n * Device virtuel avec configuration d'actuateurs dynamique\n * \n * NOUVELLES FONCTIONNALITÉS:\n * - Configuration d'actuateurs à chaud via setConfig()\n * - Presets prédéfinis pour configurations communes\n * - Notification automatique des changements de config\n * - Comptage intelligent des commandes par actuateur\n * - API simple pour tests et développement\n */\nclass VirtualDevice {\n  constructor(notify = null) {\n    this.index = -1;\n    this.name = 'Virtual Device';\n    this.notify = notify;\n    this.messageTimingGap = 0;\n    \n    // Configuration dynamique des actuateurs\n    this.actuatorConfig = [];\n    this.messageAttributes = {};\n    \n    // Configuration par défaut (comme avant)\n    this.setConfig('default');\n    \n    // Système de comptage amélioré\n    this.commandCounts = {\n      total: 0,\n      byActuator: new Map(),\n      lastCommand: null,\n      lastCommandTime: null\n    };\n\n    this.notify?.('status:virtual', { message: 'Virtual Device initialized with default config', type: 'success' });\n  }\n\n  // ============================================================================\n  // SECTION 1: CONFIGURATION DYNAMIQUE\n  // ============================================================================\n\n  /**\n   * Configure les actuateurs du device virtuel\n   * @param {string|Array} config - Preset name ou array de configs d'actuateurs\n   * \n   * Exemples:\n   * - setConfig('default') -> 1 linear + 1 vibrate + 1 oscillate + 1 rotate\n   * - setConfig('simple') -> 1 linear + 1 vibrate  \n   * - setConfig([{capability: 'linear'}, {capability: 'vibrate'}])\n   * - setConfig('stroker') -> 1 linear seulement\n   * - setConfig('multi-vibe') -> 3 vibrate\n   */\n  setConfig(config) {\n    let newConfig = [];\n    \n    if (typeof config === 'string') {\n      newConfig = this._getPresetConfig(config);\n    } else if (Array.isArray(config)) {\n      newConfig = this._validateCustomConfig(config);\n    } else {\n      this.notify?.('status:virtual', { message: 'Invalid config type. Use preset name or array', type: 'error' });\n      return false;\n    }\n    \n    const oldConfig = [...this.actuatorConfig];\n    this.actuatorConfig = newConfig;\n    this._rebuildMessageAttributes();\n    this._resetCommandCounts();\n    \n    this.notify?.('status:virtual', { message: `Config changed from ${oldConfig.length} to ${newConfig.length} actuators`, type: 'success' });\n    \n    // Notifier le changement (comme un vrai device connect/disconnect)\n    this.notify?.('buttplug:device', { \n      device: this,\n      configChanged: true,\n      oldConfig,\n      newConfig: [...newConfig]\n    });\n    \n    return true;\n  }\n\n  /**\n   * Configurations prédéfinies\n   * @private\n   */\n  _getPresetConfig(preset) {\n    const presets = {\n      'default': [\n        { capability: Capability.LINEAR, name: 'Main Stroke' },\n        { capability: Capability.VIBRATE, name: 'Vibration' },\n        { capability: Capability.OSCILLATE, name: 'Oscillation' },\n        { capability: Capability.ROTATE, name: 'Rotation' }\n      ],\n      \n      'simple': [\n        { capability: Capability.LINEAR, name: 'Stroke' },\n        { capability: Capability.VIBRATE, name: 'Buzz' }\n      ],\n      \n      'stroker': [\n        { capability: Capability.LINEAR, name: 'Main Stroke' }\n      ],\n      \n      'multi-vibe': [\n        { capability: Capability.VIBRATE, name: 'Vibe 1' },\n        { capability: Capability.VIBRATE, name: 'Vibe 2' },\n        { capability: Capability.VIBRATE, name: 'Vibe 3' }\n      ],\n      \n      'full-featured': [\n        { capability: Capability.LINEAR, name: 'Main Stroke' },\n        { capability: Capability.LINEAR, name: 'Secondary' },\n        { capability: Capability.VIBRATE, name: 'Tip Vibe' },\n        { capability: Capability.VIBRATE, name: 'Base Vibe' },\n        { capability: Capability.ROTATE, name: 'Twist' },\n        { capability: Capability.OSCILLATE, name: 'Swing' }\n      ],\n      \n      'rotator': [\n        { capability: Capability.ROTATE, name: 'Main Rotation' },\n        { capability: Capability.VIBRATE, name: 'Secondary Vibe' }\n      ]\n    };\n    \n    if (!presets[preset]) {\n      this.notify?.('status:virtual', { message: `Unknown preset '${preset}', using 'default'`, type: 'info' });\n      return presets['default'];\n    }\n    \n    this.notify?.('status:virtual', { message: `Applied preset: ${preset}`, type: 'log' });\n    return presets[preset];\n  }\n\n  /**\n   * Valide une configuration custom\n   * @private\n   */\n  _validateCustomConfig(config) {\n    const validCapabilities = Object.values(Capability);\n    \n    return config.map((actuatorDef, index) => {\n      if (!actuatorDef.capability || !validCapabilities.includes(actuatorDef.capability)) {\n        this.notify?.('status:virtual', { message: `Invalid capability for actuator ${index}, using linear`, type: 'error' });\n        return { capability: Capability.LINEAR, name: `Actuator ${index}` };\n      }\n      \n      return {\n        capability: actuatorDef.capability,\n        name: actuatorDef.name || `${actuatorDef.capability} ${index}`,\n        stepCount: actuatorDef.stepCount || 20,\n        featureDescriptor: actuatorDef.featureDescriptor || `Virtual ${actuatorDef.capability}`\n      };\n    });\n  }\n\n  /**\n   * Reconstruit messageAttributes selon la config actuelle\n   * @private\n   */\n  _rebuildMessageAttributes() {\n    this.messageAttributes = {};\n    \n    // Grouper par type de commande\n    const scalarCmds = [];\n    const linearCmds = [];\n    const rotateCmds = [];\n    \n    this.actuatorConfig.forEach((actuator, index) => {\n      const baseAttrs = {\n        Index: index,\n        StepCount: actuator.stepCount || 20,\n        FeatureDescriptor: actuator.featureDescriptor || actuator.name\n      };\n      \n      switch (actuator.capability) {\n        case Capability.VIBRATE:\n          scalarCmds.push({ ...baseAttrs, ActuatorType: 'Vibrate' });\n          break;\n        case Capability.OSCILLATE:\n          scalarCmds.push({ ...baseAttrs, ActuatorType: 'Oscillate' });\n          break;\n        case Capability.LINEAR:\n          linearCmds.push(baseAttrs);\n          break;\n        case Capability.ROTATE:\n          rotateCmds.push(baseAttrs);\n          break;\n      }\n    });\n    \n    // Construire messageAttributes\n    if (scalarCmds.length > 0) {\n      this.messageAttributes['ScalarCmd'] = scalarCmds;\n    }\n    if (linearCmds.length > 0) {\n      this.messageAttributes['LinearCmd'] = linearCmds;\n    }\n    if (rotateCmds.length > 0) {\n      this.messageAttributes['RotateCmd'] = rotateCmds;\n    }\n    \n    // StopDeviceCmd toujours présent\n    this.messageAttributes['StopDeviceCmd'] = {};\n\n    this.notify?.('status:virtual', { message: `MessageAttributes rebuilt: ${Object.keys(this.messageAttributes).join(', ')}`, type: 'log' });\n  }\n\n  // ============================================================================\n  // SECTION 2: API DEVICE (compatible ButtplugClientDevice)\n  // ============================================================================\n\n  async vibrate(values) {\n    this._countCommand('ScalarCmd', 'Vibrate', values);\n    return Promise.resolve();\n  }\n\n  async oscillate(values) {\n    this._countCommand('ScalarCmd', 'Oscillate', values);\n    return Promise.resolve();\n  }\n\n  async linear(values) {\n    this._countCommand('LinearCmd', null, values);\n    return Promise.resolve();\n  }\n\n  async rotate(values) {\n    this._countCommand('RotateCmd', null, values);\n    return Promise.resolve();\n  }\n\n  async stop() {\n    this._countCommand('StopDeviceCmd');\n    return Promise.resolve();\n  }\n\n  getAllowedMessages() {\n    return Object.keys(this.messageAttributes);\n  }\n\n  // ============================================================================\n  // SECTION 3: COMPTAGE INTELLIGENT\n  // ============================================================================\n\n  /**\n   * Compte les commandes par actuateur intelligent\n   * @private\n   */\n  _countCommand(messageType, actuatorType = null, values = null) {\n    this.commandCounts.total++;\n    this.commandCounts.lastCommand = messageType;\n    this.commandCounts.lastCommandTime = Date.now();\n    \n    // Identifier les actuateurs affectés\n    const affectedActuators = this._getAffectedActuators(messageType, actuatorType, values);\n    \n    affectedActuators.forEach(actuatorIndex => {\n      if (!this.commandCounts.byActuator.has(actuatorIndex)) {\n        this.commandCounts.byActuator.set(actuatorIndex, 0);\n      }\n      this.commandCounts.byActuator.set(\n        actuatorIndex, \n        this.commandCounts.byActuator.get(actuatorIndex) + 1\n      );\n    });\n  }\n\n  /**\n   * Détermine quels actuateurs sont affectés par une commande\n   * @private\n   */\n  _getAffectedActuators(messageType, actuatorType, values) {\n    const affected = [];\n    \n    if (messageType === 'StopDeviceCmd') {\n      // Stop affecte tous les actuateurs\n      return this.actuatorConfig.map((_, index) => index);\n    }\n    \n    // Pour les autres commandes, identifier par capability\n    this.actuatorConfig.forEach((actuator, index) => {\n      let isAffected = false;\n      \n      if (messageType === 'ScalarCmd' && actuatorType) {\n        isAffected = (actuatorType === 'Vibrate' && actuator.capability === Capability.VIBRATE) ||\n                    (actuatorType === 'Oscillate' && actuator.capability === Capability.OSCILLATE);\n      } else if (messageType === 'LinearCmd') {\n        isAffected = actuator.capability === Capability.LINEAR;\n      } else if (messageType === 'RotateCmd') {\n        isAffected = actuator.capability === Capability.ROTATE;\n      }\n      \n      if (isAffected) {\n        affected.push(index);\n      }\n    });\n    \n    return affected;\n  }\n\n  _resetCommandCounts() {\n    this.commandCounts = {\n      total: 0,\n      byActuator: new Map(),\n      lastCommand: null,\n      lastCommandTime: null\n    };\n\n    this.notify?.('status:virtual', { message: 'Command counts reset', type: 'log' });\n  }\n\n  // ============================================================================\n  // SECTION 4: API PUBLIQUE - Configuration et Stats\n  // ============================================================================\n\n  /**\n   * Récupère la configuration actuelle\n   */\n  getConfig() {\n    return {\n      actuatorCount: this.actuatorConfig.length,\n      actuators: this.actuatorConfig.map((actuator, index) => ({\n        index,\n        capability: actuator.capability,\n        name: actuator.name\n      })),\n      presets: this.getAvailablePresets()\n    };\n  }\n\n  /**\n   * Récupère les presets disponibles\n   */\n  getAvailablePresets() {\n    return ['default', 'simple', 'stroker', 'multi-vibe', 'full-featured', 'rotator'];\n  }\n\n  /**\n   * Ajoute un actuateur à la config existante\n   */\n  addActuator(capability, name = null) {\n    const newActuator = {\n      capability,\n      name: name || `${capability} ${this.actuatorConfig.length}`,\n      stepCount: 20,\n      featureDescriptor: `Virtual ${capability}`\n    };\n    \n    this.actuatorConfig.push(newActuator);\n    this._rebuildMessageAttributes();\n    \n    this.notify?.('status:virtual', { message: `Added ${capability} actuator`, type: 'success' });\n    \n    // Notifier le changement\n    this.notify?.('buttplug:device', { \n      device: this,\n      actuatorAdded: true,\n      newActuator\n    });\n    \n    return true;\n  }\n\n  /**\n   * Supprime un actuateur par index\n   */\n  removeActuator(index) {\n    if (index < 0 || index >= this.actuatorConfig.length) {\n      this.notify?.('status:virtual', { message: `Invalid actuator index ${index}`, type: 'error' });\n      return false;\n    }\n    \n    const removed = this.actuatorConfig.splice(index, 1)[0];\n    this._rebuildMessageAttributes();\n    this._resetCommandCounts();\n    \n    this.notify?.('status:virtual', { message: `Removed actuator ${index} (${removed.capability})`, type: 'success' });\n    \n    // Notifier le changement\n    this.notify?.('buttplug:device', { \n      device: this,\n      actuatorRemoved: true,\n      removedActuator: removed\n    });\n    \n    return true;\n  }\n\n  /**\n   * Stats détaillées\n   */\n  getCommandStats() {\n    const byActuator = {};\n    this.commandCounts.byActuator.forEach((count, index) => {\n      const actuator = this.actuatorConfig[index];\n      byActuator[index] = {\n        count,\n        capability: actuator?.capability || 'unknown',\n        name: actuator?.name || `Actuator ${index}`\n      };\n    });\n    \n    return {\n      total: this.commandCounts.total,\n      byActuator,\n      lastCommand: this.commandCounts.lastCommand,\n      lastCommandTime: this.commandCounts.lastCommandTime,\n      actuatorCount: this.actuatorConfig.length\n    };\n  }\n\n  resetCommandStats() {\n    this._resetCommandCounts();\n    this.notify?.('status:virtual', { message: 'Command stats reset', type: 'info' });\n  }\n\n  /**\n   * Debug info complète\n   */\n  getDebugInfo() {\n    const debugInfo = {\n      config: this.getConfig(),\n      stats: this.getCommandStats(),\n      messageAttributes: this.messageAttributes,\n      name: this.name,\n      index: this.index\n    };\n\n    this.notify?.('status:virtual', { message: 'Debug info requested', type: 'log' });\n    \n    return debugInfo;\n  }\n}\n\nexport default VirtualDevice;","/**\n * Actuator.js - ✅ AMÉLIORÉ: Persistance mapping avec previousMappedChannel\n */\n\nimport { HapticType, Capability, CapabilityToHapticType } from \"./constants\";\n\n// ============================================================================\n// CLASSE ACTUATOR\n// ============================================================================\n\nexport class Actuator {\n  constructor(index, capability, options = {}, notify = null) {\n    // Propriétés de base\n    this.index = index;\n    this.type = CapabilityToHapticType[capability];\n    this.capability = capability;\n    \n    // Notification system\n    this.notify = notify;\n    \n    // Settings par défaut\n    this.settings = {\n      enabled: true,\n      scale: 1.0,\n      invert: false,\n      timeOffset: 0.0,\n      range: [0, 1], // [min, max] pour clamp final\n      ...options.settings\n    };\n    \n    // Canal assigné (référence vers instance Channel)\n    this.assignedChannel = null;\n    \n    // ✅ NOUVEAU: Persistance du mapping précédent pour autoMap intelligent\n    this.previousMappedChannel = null; // String: nom du canal mappé précédemment\n    \n    // Métadonnées optionnelles\n    this.metadata = {\n      name: `Actuator ${index}`,\n      featureDescriptor: '',\n      stepCount: 20,\n      ...options.metadata\n    };\n\n    this.notify?.('status:actuator', { message: `Actuator ${index} (${capability}) initialized`, type: 'log' });\n  }\n\n  // ============================================================================\n  // SYSTÈME DE BRANCHEMENT AVEC NOTIFY + PERSISTANCE MAPPING\n  // ============================================================================\n\n  /**\n   * Branche cet actuateur à un canal\n   */\n  plug(channel) {\n    const success = channel.plug(this); // Déléguer au canal qui gère la logique\n    \n    if (success) {\n      // ✅ NOUVEAU: Sauvegarder le nom du canal pour autoMap futur\n      this.previousMappedChannel = channel.name;\n      \n      this.notify?.('status:actuator', { message: `Actuator ${this.index} plugged to channel \"${channel.name}\"`, type: 'success' });\n      this.notify?.('actuator:plugged', {\n        actuatorIndex: this.index,\n        channelName: channel.name,\n        channel: {\n          name: channel.name,\n          type: channel.type,\n          duration: channel.duration\n        },\n        actuator: {\n          index: this.index,\n          type: this.type,\n          capability: this.capability\n        }\n      });\n    } else {\n      this.notify?.('status:actuator', { message: `Failed to plug actuator ${this.index} to channel \"${channel.name}\" (incompatible)`, type: 'error' });\n    }\n    \n    return success;\n  }\n\n  /**\n   * Débranche cet actuateur de son canal actuel\n   */\n  unplug() {\n    if (this.assignedChannel) {\n      const channelName = this.assignedChannel.name;\n      \n      // ✅ NOUVEAU: Conserver previousMappedChannel même après unplug\n      // (ça permet de retrouver le mapping au prochain funscript)\n      if (!this.previousMappedChannel) {\n        this.previousMappedChannel = channelName;\n      }\n      \n      this.assignedChannel.unplug(this);\n      \n      this.notify?.('status:actuator', { message: `Actuator ${this.index} unplugged from channel \"${channelName}\"`, type: 'info' });\n      this.notify?.('actuator:unplugged', {\n        actuatorIndex: this.index,\n        channelName: channelName,\n        actuator: {\n          index: this.index,\n          type: this.type,\n          capability: this.capability\n        }\n      });\n    } else {\n      this.notify?.('status:actuator', { message: `Actuator ${this.index} was not plugged to any channel`, type: 'info' });\n    }\n  }\n\n  /**\n   * ✅ NOUVEAU: Force l'oubli du mapping précédent (reset manuel)\n   */\n  forgetPreviousMapping() {\n    const oldMapping = this.previousMappedChannel;\n    this.previousMappedChannel = null;\n    \n    this.notify?.('status:actuator', { message: `Actuator ${this.index} forgot previous mapping to \"${oldMapping}\"`, type: 'info' });\n    \n    this.notify?.('actuator:mappingForgotten', {\n      actuatorIndex: this.index,\n      forgottenChannelName: oldMapping,\n      actuator: {\n        index: this.index,\n        type: this.type,\n        capability: this.capability\n      }\n    });\n  }\n\n  /**\n   * Vérifie si cet actuateur peut être branché à un canal\n   */\n  canPlugTo(channel) {\n    const compatible = this.settings.enabled && this.type === channel.type;\n    if (!compatible) {\n      this.notify?.('status:actuator', { message: `Actuator ${this.index} incompatible with channel \"${channel.name}\" (${this.type} vs ${channel.type})`, type: 'log' });\n    }\n    return compatible;\n  }\n\n  /**\n   * Récupère le nom du canal assigné\n   */\n  getAssignedChannelName() {\n    return this.assignedChannel ? this.assignedChannel.name : null;\n  }\n\n  /**\n   * ✅ NOUVEAU: Récupère le nom du canal mappé précédemment\n   */\n  getPreviousMappedChannelName() {\n    return this.previousMappedChannel;\n  }\n\n  /**\n   * ✅ NOUVEAU: Vérifie si l'actuateur a un mapping précédent\n   */\n  hasPreviousMapping() {\n    return this.previousMappedChannel !== null;\n  }\n\n  /**\n   * Vérifie si l'actuateur est branché à un canal\n   */\n  isPlugged() {\n    return this.assignedChannel !== null;\n  }\n\n  // ============================================================================\n  // CONFIGURATION ET ÉTAT AVEC NOTIFY\n  // ============================================================================\n\n  /**\n   * Met à jour les settings avec notification\n   */\n  updateSettings(newSettings) {\n    const oldSettings = { ...this.settings };\n    this.settings = { ...this.settings, ...newSettings };\n    \n    const changedKeys = Object.keys(newSettings);\n    this.notify?.('status:actuator', { message: `Actuator ${this.index} settings updated: ${changedKeys.join(', ')}`, type: 'log' });\n    \n    this.notify?.('actuator:settingsChanged', {\n      actuatorIndex: this.index,\n      oldSettings,\n      newSettings: { ...this.settings },\n      changes: changedKeys,\n      actuator: {\n        index: this.index,\n        type: this.type,\n        capability: this.capability,\n        channelName: this.getAssignedChannelName()\n      }\n    });\n  }\n\n  /**\n   * Reset des settings par défaut avec notification\n   */\n  resetSettings() {\n    const oldSettings = { ...this.settings };\n    \n    this.settings = {\n      enabled: true,\n      scale: 1.0,\n      invert: false,\n      timeOffset: 0.0,\n      range: [0, 1]\n    };\n    \n    this.notify?.('status:actuator', { message: `Actuator ${this.index} settings reset to defaults`, type: 'info' });\n    \n    this.notify?.('actuator:settingsReset', {\n      actuatorIndex: this.index,\n      oldSettings,\n      newSettings: { ...this.settings },\n      actuator: {\n        index: this.index,\n        type: this.type,\n        capability: this.capability,\n        channelName: this.getAssignedChannelName()\n      }\n    });\n  }\n\n  // ============================================================================\n  // COMPATIBILITÉ\n  // ============================================================================\n\n  /**\n   * Vérifie si cet actuateur est compatible avec un canal\n   */\n  isCompatibleWith(channel) {\n    return this.type === channel.type;\n  }\n\n  /**\n   * Vérifie si cet actuateur peut traiter un canal spécifique\n   */\n  canProcess(channel) {\n    if (!this.settings.enabled) {\n      this.notify?.('status:actuator', { message: `Actuator ${this.index} cannot process: disabled`, type: 'log' });\n      return false;\n    }\n    if (this.assignedChannel && this.assignedChannel !== channel) {\n      this.notify?.('status:actuator', { message: `Actuator ${this.index} cannot process: assigned to different channel`, type: 'log' });\n      return false;\n    }\n    \n    return this.isCompatibleWith(channel);\n  }\n\n  // ============================================================================\n  // TRAITEMENT DES VALEURS\n  // ============================================================================\n\n  /**\n   * Calcule la valeur de sortie finale à partir de la valeur brute interpolée\n   */\n  processValue(rawValue, globalScale = 1.0) {\n    if (!this.settings.enabled || rawValue === null || rawValue === undefined) {\n      return 0;\n    }\n\n    let value = rawValue;\n    \n    // 1. Appliquer invert si demandé\n    if (this.settings.invert) {\n      if (this.type === HapticType.POLAR) {\n        value = -value; // Inverser le signe pour polaire\n      } else {\n        value = 1 - value; // Inverser pour scalaire\n      }\n    }\n    \n    // 2. Appliquer l'échelle individuelle\n    value *= this.settings.scale;\n    \n    // 3. Appliquer l'échelle globale\n    value *= globalScale;\n    \n    // 4. Clamp selon le type et la plage\n    const [minRange, maxRange] = this.settings.range;\n    \n    if (this.type === HapticType.POLAR) {\n      // Pour polaire : maintenir le signe, clamp l'amplitude\n      const amplitude = Math.abs(value);\n      const clampedAmplitude = Math.max(0, Math.min(1, amplitude));\n      value = Math.sign(value) * clampedAmplitude;\n    } else {\n      // Pour scalaire : clamp direct\n      value = Math.max(0, Math.min(1, value));\n    }\n    \n    return value;\n  }\n\n  /**\n   * Génère l'objet de commande pour le device\n   */\n  generateCommand(processedValue, options = {}) {\n    if (!this.settings.enabled || processedValue === 0) {\n      return {\n        capability: this.capability,\n        value: 0,\n        options: {}\n      };\n    }\n\n    const command = {\n      capability: this.capability,\n      value: processedValue,\n      options: {}\n    };\n\n    // Options spécifiques par capability\n    switch (this.capability) {\n      case Capability.LINEAR:\n        command.options.duration = options.duration || 100;\n        break;\n        \n      case Capability.ROTATE:\n        // Pour rotate, convertir en speed + direction\n        command.value = Math.abs(processedValue);\n        command.options.clockwise = processedValue >= 0;\n        break;\n        \n      case Capability.VIBRATE:\n      case Capability.OSCILLATE:\n        // Pas d'options spéciales pour scalar\n        break;\n    }\n\n    return command;\n  }\n\n  /**\n   * Pipeline complet : rawValue → command\n   */\n  process(rawValue, globalScale = 1.0, options = {}) {\n    const processedValue = this.processValue(rawValue, globalScale);\n    const command = this.generateCommand(processedValue, options);    \n    return command;\n  }\n\n  // ============================================================================\n  // UTILITAIRES ET DEBUG\n  // ============================================================================\n\n  /**\n   * ✅ AMÉLIORÉ: Export de la configuration avec previousMappedChannel\n   */\n  toConfig() {\n    return {\n      index: this.index,\n      type: this.type,\n      capability: this.capability,\n      settings: { ...this.settings },\n      assignedChannelName: this.getAssignedChannelName(),\n      previousMappedChannel: this.previousMappedChannel, // ✅ NOUVEAU\n      metadata: { ...this.metadata }\n    };\n  }\n\n  /**\n   * ✅ AMÉLIORÉ: Import de configuration avec previousMappedChannel\n   */\n  fromConfig(config) {\n    if (config.settings) {\n      const oldSettings = { ...this.settings };\n      this.settings = { ...this.settings, ...config.settings };\n      this.notify?.('status:actuator', { message: `Actuator ${this.index} loaded settings from config`, type: 'log' });\n    }\n    if (config.metadata) {\n      this.metadata = { ...this.metadata, ...config.metadata };\n    }\n    \n    // ✅ NOUVEAU: Restaurer previousMappedChannel\n    if (config.previousMappedChannel) {\n      this.previousMappedChannel = config.previousMappedChannel;\n      this.notify?.('status:actuator', { message: `Actuator ${this.index} restored previous mapping to \"${config.previousMappedChannel}\"`, type: 'log' });\n    }\n    \n    // Note: assignedChannelName ne peut pas être restauré directement, \n    // il faut rebrancher via plug()\n  }\n\n  /**\n   * ✅ AMÉLIORÉ: Informations de debug avec previousMappedChannel\n   */\n  getDebugInfo() {\n    const debugInfo = {\n      index: this.index,\n      type: this.type,\n      capability: this.capability,\n      settings: { ...this.settings },\n      assignedChannel: this.assignedChannel ? {\n        name: this.assignedChannel.name,\n        type: this.assignedChannel.type,\n        duration: this.assignedChannel.duration\n      } : null,\n      previousMappedChannel: this.previousMappedChannel, // ✅ NOUVEAU\n      isPlugged: this.isPlugged(),\n      hasPreviousMapping: this.hasPreviousMapping(), // ✅ NOUVEAU\n      metadata: { ...this.metadata }\n    };\n    return debugInfo;\n  }\n\n  /**\n   * ✅ AMÉLIORÉ: Représentation string avec info mapping précédent\n   */\n  toString() {\n    const channel = this.getAssignedChannelName() || 'unassigned';\n    const status = this.settings.enabled ? 'enabled' : 'disabled';\n    const plugged = this.isPlugged() ? 'plugged' : 'unplugged';\n    const previousInfo = this.previousMappedChannel ? ` (prev: ${this.previousMappedChannel})` : '';\n    return `Actuator[${this.index}](${this.capability}, ${this.type}, ${status}, ${plugged} to ${channel}${previousInfo})`;\n  }\n}\n\nexport default Actuator;","import { \n  ButtplugClient, \n  ButtplugBrowserWebsocketClientConnector,\n  ActuatorType\n} from 'buttplug';\nimport VirtualDevice from './VirtualDevice';\nimport { Actuator } from './Actuator';\nimport { Capability, HapticType, CapabilityToHapticType } from './constants';\n\n/**\n * ButtPlugManager - ✅ REFACTORISÉ: Status notifications uniformisées\n */\nclass ButtPlugManager {\n  constructor(notify) {\n    this.notify = notify;\n    \n    // Core buttplug\n    this.client = null;\n    this.connector = null;\n    this.initialized = false;\n    this.intifaceUrl = 'ws://localhost:12345';\n    \n    // Device state\n    this.devices = new Map();\n    this.isConnected = false;\n    this.isScanning = false;\n    \n    // VirtualDevice toujours disponible\n    this.virtualDevice = new VirtualDevice(this.notify)\n    this.devices.set(-1, this.virtualDevice);\n    this.selectedDevice = this.virtualDevice;\n    \n    // Actuators array\n    this.actuators = [];\n    this._initActuators();\n    \n    // Global modulation\n    this.globalScale = 1.0;\n    this.globalOffset = 0.0;\n    \n    // Performance & config\n    this.throttleMap = new Map();\n    this.minCommandInterval = 16;\n  }\n\n  // ============================================================================\n  // SECTION 1: DEVICE CONNECTION & MANAGEMENT\n  // ============================================================================\n\n  async init() {\n    if (this.initialized) return true;\n\n    try {\n      // ✅ NOUVEAU: Status notification au lieu de console.log\n      this.notify?.('status:buttplug', { \n        message: 'Initializing ButtPlug client...', \n        type: 'processing' \n      });\n\n      this.client = new ButtplugClient('FunPlayer');\n      this.connector = new ButtplugBrowserWebsocketClientConnector(this.intifaceUrl);\n      \n      this.client.addListener('deviceadded', this._onDeviceAdded);\n      this.client.addListener('deviceremoved', this._onDeviceRemoved);\n      this.client.addListener('disconnect', this._onDisconnect);\n      \n      this.initialized = true;\n      \n      // ✅ NOUVEAU: Log technique silencieux\n      this.notify?.('status:buttplug', { \n        message: 'ButtPlug client initialized successfully', \n        type: 'log' \n      });\n      \n      return true;\n\n    } catch (error) {\n      // ✅ NOUVEAU: Erreur structurée au lieu de console.error\n      this.notify?.('status:buttplug', { \n        message: 'Failed to initialize ButtPlug client', \n        type: 'error',\n        error: error.message || String(error)\n      });\n      \n      this.notify?.('buttplug:error', { message: 'Initialization failed', error: error.message || String(error) });\n      \n      return false;\n    }\n  }\n\n  async connect(address = null) {\n    if (this.isConnected) return true;\n\n    const targetUrl = address || this.intifaceUrl;\n    if (!this.initialized) {\n      const initSuccess = await this.init();\n      if (!initSuccess) return false;\n    }\n\n    if (this.connector._url !== targetUrl) {\n      this.connector = new ButtplugBrowserWebsocketClientConnector(targetUrl);\n    }\n\n    try {\n      // ✅ NOUVEAU: Status au lieu de console.log\n      this.notify?.('status:buttplug', { \n        message: `Connecting to ${targetUrl}...`, \n        type: 'processing' \n      });\n      \n      await this.client.connect(this.connector);\n      this.isConnected = true;\n      \n      if (address && address !== this.intifaceUrl) {\n        this.setIntifaceUrl(address);\n      }\n      \n      const existingDevices = this.client.devices;\n      existingDevices.forEach(device => {\n        this.devices.set(device.index, device);\n      });\n      \n      // ✅ NOUVEAU: Status succès + log technique\n      this.notify?.('status:buttplug', { \n        message: `Connected to Intiface Central`, \n        type: 'success' \n      });\n      \n      this.notify?.('status:buttplug', { \n        message: `Found ${existingDevices.length} existing devices (+ Virtual)`, \n        type: 'log' \n      });\n      \n      this.notify?.('buttplug:connection', { connected: true });\n      \n      return true;\n\n    } catch (error) {\n      // ✅ NOUVEAU: Erreur structurée\n      this.notify?.('status:buttplug', { \n        message: 'Failed to connect to Intiface Central', \n        type: 'error',\n        error: error.message || String(error)\n      });\n      \n      this.notify?.('buttplug:error', { message: 'Connection failed', error: error.message || String(error) });\n      \n      return false;\n    }\n  }\n\n  async scan(timeout = 5000) {\n    if (!this.isConnected || this.isScanning) return [];\n\n    try {\n      this.isScanning = true;\n      \n      // ✅ CAPTURE des indices existants AVANT le scan\n      const existingIndices = new Set(this.devices.keys());\n      \n      this.notify?.('status:buttplug', { \n        message: 'Scanning for devices...', \n        type: 'processing' \n      });\n      \n      await this.client.startScanning();\n      await new Promise(resolve => setTimeout(resolve, timeout));\n      await this.client.stopScanning();\n      \n      // ✅ SYNCHRONISATION: Mettre à jour notre Map avec ce que buttplug a trouvé\n      const foundDevices = this.client.devices;\n      foundDevices.forEach(device => {\n        this.devices.set(device.index, device);\n      });\n      \n      // ✅ FILTRAGE basé sur les indices qu'on avait avant\n      const newDevices = Array.from(this.devices.values())\n        .filter(device => !existingIndices.has(device.index));\n      \n      if (newDevices.length > 0) {\n        this.notify?.('status:buttplug', { \n          message: `Found ${newDevices.length} new device(s)`, \n          type: 'success' \n        });\n      } else {\n        this.notify?.('status:buttplug', { \n          message: 'No new devices found', \n          type: 'info' \n        });\n      }\n      \n      return newDevices;\n      \n    } catch (error) {\n      this.notify?.('status:buttplug', { \n        message: 'Device scan failed', \n        type: 'error',\n        error: error.message || String(error)\n      });\n      return [];\n    } finally {\n      this.isScanning = false;\n    }\n  }\n\n  async disconnect() {\n    if (!this.isConnected) return;\n    \n    try {\n      if (this.client) {\n        await this.client.disconnect();\n      }\n      \n      // ✅ NOUVEAU: Status disconnection\n      this.notify?.('status:buttplug', { \n        message: 'Disconnected from Intiface Central', \n        type: 'info' \n      });\n      \n    } catch (error) {\n      // ✅ NOUVEAU: Erreur disconnection (log technique)\n      this.notify?.('status:buttplug', { \n        message: `Disconnect error: ${error.message}`, \n        type: 'log' \n      });\n    }\n    \n    this._resetConnectionState();\n  }\n\n  selectDevice(deviceIndex) {\n    if (deviceIndex === null || deviceIndex === undefined) {\n      return this.selectDevice(-1); // VirtualDevice par défaut\n    }\n\n    const device = this.devices.get(deviceIndex);\n    if (!device) {\n      // ✅ NOUVEAU: Erreur device not found\n      this.notify?.('status:buttplug', { \n        message: `Device ${deviceIndex} not found`, \n        type: 'error' \n      });\n      return false;\n    }\n\n    this.selectedDevice = device;\n    this._initActuators(); // Reconstruire array d'actuateurs\n    \n    const deviceType = deviceIndex === -1 ? 'Virtual Device' : device.name;\n    \n    // ✅ NOUVEAU: Status device selected\n    this.notify?.('status:buttplug', { \n      message: `Selected: ${deviceType}`, \n      type: 'success' \n    });\n    \n    this.notify?.('buttplug:device', { device });\n    \n    return true;\n  }\n\n  // ============================================================================\n  // SECTION 2: ACTUATORS MANAGEMENT\n  // ============================================================================\n\n  _initActuators() {\n    // Débrancher tous les actuateurs existants\n    this.actuators.forEach(actuator => actuator.unplug());\n    this.actuators = [];\n\n    if (!this.selectedDevice) return;\n\n    this.actuators = this._buildActuators(this.selectedDevice);\n    \n    // ✅ NOUVEAU: Log technique actuators\n    this.notify?.('status:buttplug', { \n      message: `Built ${this.actuators.length} actuators for ${this.selectedDevice.name}`, \n      type: 'log' \n    });\n  }\n\n  _buildActuators(device) {\n    const messageAttrs = device.messageAttributes;\n    const actuators = [];\n\n    // ✅ NOUVEAU: Log technique détaillé\n    this.notify?.('status:buttplug', { \n      message: `Building actuators for device: ${device.name}`, \n      type: 'log' \n    });\n    \n    this.notify?.('status:buttplug', { \n      message: `Device messageAttributes: ${JSON.stringify(messageAttrs)}`, \n      type: 'log' \n    });\n\n    // ScalarCmd - Créer un actuateur par ActuatorType\n    if (messageAttrs.ScalarCmd) {\n      messageAttrs.ScalarCmd.forEach(attr => {\n        this.notify?.('status:buttplug', { \n          message: `Processing ScalarCmd attr: ${JSON.stringify(attr)}`, \n          type: 'log' \n        });\n        \n        let capability, type;\n        \n        if (attr.ActuatorType === ActuatorType.Vibrate) {\n          this.notify?.('status:buttplug', { \n            message: 'Matched Vibrate actuator', \n            type: 'log' \n          });\n          capability = Capability.VIBRATE;\n          type = HapticType.SCALAR;\n        } else if (attr.ActuatorType === ActuatorType.Oscillate) {\n          this.notify?.('status:buttplug', { \n            message: 'Matched Oscillate actuator', \n            type: 'log' \n          });\n          capability = Capability.OSCILLATE;\n          type = HapticType.SCALAR;\n        } else {\n          this.notify?.('status:buttplug', { \n            message: `No match for ActuatorType: ${attr.ActuatorType}`, \n            type: 'log' \n          });\n        }\n        \n        if (capability) {\n          this.notify?.('status:buttplug', { \n            message: `Creating actuator with capability: ${capability}`, \n            type: 'log' \n          });\n          const actuator = new Actuator(attr.Index, capability, {\n            metadata: {\n              name: `${device.name} #${attr.Index}`,\n              featureDescriptor: attr.FeatureDescriptor || '',\n              stepCount: attr.StepCount || 20\n            }\n          }, this.notify);\n          actuators.push(actuator);\n        }\n      });\n    }\n\n    // LinearCmd - Créer un actuateur linear par index\n    if (messageAttrs.LinearCmd) {\n      messageAttrs.LinearCmd.forEach(attr => {\n        this.notify?.('status:buttplug', { \n          message: `Processing LinearCmd attr: ${JSON.stringify(attr)}`, \n          type: 'log' \n        });\n        const actuator = new Actuator(attr.Index, Capability.LINEAR, {\n          metadata: {\n            name: `${device.name} #${attr.Index}`,\n            featureDescriptor: attr.FeatureDescriptor || '',\n            stepCount: attr.StepCount || 20\n          }\n        }, this.notify);\n        actuators.push(actuator);\n      });\n    }\n\n    // RotateCmd - Créer un actuateur rotate par index\n    if (messageAttrs.RotateCmd) {\n      messageAttrs.RotateCmd.forEach(attr => {\n        this.notify?.('status:buttplug', { \n          message: `Processing RotateCmd attr: ${JSON.stringify(attr)}`, \n          type: 'log' \n        });\n        const actuator = new Actuator(attr.Index, Capability.ROTATE, {\n          metadata: {\n            name: `${device.name} #${attr.Index}`,\n            featureDescriptor: attr.FeatureDescriptor || '',\n            stepCount: attr.StepCount || 20\n          }\n        }, this.notify);\n        actuators.push(actuator);\n      });\n    }\n\n    // Trier par index pour un ordre cohérent\n    actuators.sort((a, b) => a.index - b.index);\n\n    this.notify?.('status:buttplug', { \n      message: `Final actuators array: ${actuators.length} actuators`, \n      type: 'log' \n    });\n    \n    return actuators;\n  }\n\n  // ============================================================================\n  // SECTION 3: API SIMPLIFIÉE\n  // ============================================================================\n\n  getActuators() {\n    return [...this.actuators];\n  }\n\n  getActuator(index) {\n    return this.actuators.find(actuator => actuator.index === index) || null;\n  }\n\n  getActuatorsByCapability(capability) {\n    return this.actuators.filter(actuator => actuator.capability === capability);\n  }\n\n  setActuatorSettings(actuatorIndex, settings) {\n    const actuator = this.getActuator(actuatorIndex);\n    if (!actuator) return false;\n\n    actuator.updateSettings(settings);\n    this.notify?.('buttplug:actuatorOptions', { actuatorIndex, options: actuator.settings });\n    \n    return true;\n  }\n\n  getActuatorSettings(actuatorIndex) {\n    const actuator = this.getActuator(actuatorIndex);\n    return actuator ? { ...actuator.settings } : null;\n  }\n\n  plugChannelToActuator(channel, actuatorIndex) {\n    const actuator = this.getActuator(actuatorIndex);\n    if (!actuator) return false;\n\n    const success = channel.plug(actuator);\n    if (success) {\n      this.notify?.('buttplug:mapping', { channel: channel.name, actuatorIndex });\n    }\n    return success;\n  }\n\n  unplugChannelFromActuator(channel, actuatorIndex) {\n    const actuator = this.getActuator(actuatorIndex);\n    if (!actuator) return false;\n\n    channel.unplug(actuator);\n    this.notify?.('buttplug:mapping', { channel: channel.name, actuatorIndex: null });\n    \n    return true;\n  }\n\n  unplugAllChannels() {\n    this.actuators.forEach(actuator => actuator.unplug());\n    this.notify?.('buttplug:mapping', { channel: null, actuatorIndex: null });\n  }\n\n  // ============================================================================\n  // SECTION 4: GLOBAL MODULATION\n  // ============================================================================\n\n  setGlobalScale(scale) {\n    const newScale = typeof scale === 'number' ? Math.max(0, Math.min(5.0, scale)) : 1.0;\n    \n    if (this.globalScale !== newScale) {\n      this.globalScale = newScale;\n      this.notify?.('buttplug:globalScale', { scale: newScale });\n    }\n  }\n\n  getGlobalScale() {\n    return this.globalScale;\n  }\n\n  setGlobalOffset(offset) {\n    const newOffset = typeof offset === 'number' ? offset : 0.0;\n    \n    if (this.globalOffset !== newOffset) {\n      this.globalOffset = newOffset;\n      this.notify?.('buttplug:globalOffset', { offset: newOffset });\n    }\n  }\n\n  getGlobalOffset() {\n    return this.globalOffset;\n  }\n\n  // ============================================================================\n  // SECTION 5: HAPTIC ORCHESTRATION\n  // ============================================================================\n\n  getTimeWithOffsets(currentTime) {\n    const channelTimings = new Map();\n    \n    for (const actuator of this.actuators) {\n      if (actuator.isPlugged() && actuator.settings.enabled) {\n        const channel = actuator.assignedChannel;\n        const adjustedTime = currentTime + this.globalOffset + actuator.settings.timeOffset;\n        channelTimings.set(channel.name, adjustedTime);\n      }\n    }\n    \n    return channelTimings;\n  }\n\n  async processChannels(rawValues) {\n    if (!this.selectedDevice) {\n      return new Map();\n    }\n\n    const visualizerData = new Map();\n    \n    for (const actuator of this.actuators) {\n      if (actuator.isPlugged() && actuator.settings.enabled) {\n        const channel = actuator.assignedChannel;\n        const rawValue = rawValues[channel.name];\n        \n        if (rawValue !== undefined && rawValue !== null) {\n          // Traiter la valeur via l'actuateur\n          const command = actuator.process(rawValue, this.globalScale);\n          \n          // Envoyer au device\n          await this.sendThrottled(actuator.capability, command.value, actuator.index, command.options);\n          \n          // Préparer données visualizer\n          visualizerData.set(actuator.index, {\n            value: command.value,\n            type: actuator.capability\n          });\n        }\n      }\n    }\n\n    return visualizerData;\n  }\n\n  // ============================================================================\n  // SECTION 6: DEVICE COMMANDS\n  // ============================================================================\n\n  async vibrate(value, actuatorIndex = null) {\n    return this._sendScalarCommand(ActuatorType.Vibrate, value, actuatorIndex);\n  }\n\n  async oscillate(value, actuatorIndex = null) {\n    return this._sendScalarCommand(ActuatorType.Oscillate, value, actuatorIndex);\n  }\n\n  async linear(value, duration = 100, actuatorIndex = null) {\n    if (!this.selectedDevice) throw new Error('No device selected');\n    \n    const resolvedIndex = this._resolveActuatorIndex(Capability.LINEAR, actuatorIndex);\n    if (resolvedIndex === null) throw new Error('No linear actuator available');\n\n    try {\n      const clampedValue = Math.max(0, Math.min(1, value));\n      const clampedDuration = Math.max(1, Math.min(20000, duration));\n      \n      await this.selectedDevice.linear([[clampedValue, clampedDuration]]);\n      return true;\n    } catch (error) {\n      // ✅ NOUVEAU: Erreur commande (log technique)\n      this.notify?.('status:buttplug', { \n        message: `Linear command failed: ${error.message}`, \n        type: 'log' \n      });\n      return false;\n    }\n  }\n\n  async rotate(value, actuatorIndex = null) {\n    if (!this.selectedDevice) throw new Error('No device selected');\n    \n    const resolvedIndex = this._resolveActuatorIndex(Capability.ROTATE, actuatorIndex);\n    if (resolvedIndex === null) throw new Error('No rotate actuator available');\n\n    try {\n      const speed = Math.abs(value);\n      const clockwise = value >= 0;\n      \n      await this.selectedDevice.rotate([[speed, clockwise]]);\n      return true;\n    } catch (error) {\n      // ✅ NOUVEAU: Erreur commande (log technique)\n      this.notify?.('status:buttplug', { \n        message: `Rotate command failed: ${error.message}`, \n        type: 'log' \n      });\n      return false;\n    }\n  }\n\n  async sendThrottled(capability, value, actuatorIndex, options = {}) {\n    const now = Date.now();\n    const key = `${capability}-${actuatorIndex}`;\n    const lastSent = this.throttleMap.get(key) || 0;\n    \n    if (now - lastSent < this.minCommandInterval && !options.force) {\n      return true;\n    }\n    \n    this.throttleMap.set(key, now);\n    \n    try {\n      switch (capability) {\n        case Capability.VIBRATE:\n          return await this.vibrate(value, actuatorIndex);\n        case Capability.OSCILLATE:\n          return await this.oscillate(value, actuatorIndex);\n        case Capability.LINEAR:\n          return await this.linear(value, options.duration || 100, actuatorIndex);\n        case Capability.ROTATE:\n          return await this.rotate(value, actuatorIndex);\n        default:\n          // ✅ NOUVEAU: Erreur capability inconnue (log technique)\n          this.notify?.('status:buttplug', { \n            message: `Unknown capability: ${capability}`, \n            type: 'log' \n          });\n          return false;\n      }\n    } catch (error) {\n      return false; // Silent fail\n    }\n  }\n\n  async stopAll() {\n    if (!this.isConnected || !this.client) return;\n    \n    try {\n      await this.client.stopAllDevices();\n      \n      // ✅ NOUVEAU: Status stop all (log technique)\n      this.notify?.('status:buttplug', { \n        message: 'All devices stopped', \n        type: 'log' \n      });\n    } catch (error) {\n      // ✅ NOUVEAU: Erreur stop all (log technique)\n      this.notify?.('status:buttplug', { \n        message: `Stop all failed: ${error.message}`, \n        type: 'log' \n      });\n    }\n  }\n\n  // ============================================================================\n  // SECTION 7: UTILITIES & INFO\n  // ============================================================================\n\n  getDevices() {\n    return Array.from(this.devices.values());\n  }\n\n  getSelected() {\n    return this.selectedDevice;\n  }\n\n  getDeviceInfo() {\n    if (!this.selectedDevice) return null;\n\n    return {\n      deviceName: this.selectedDevice.name,\n      deviceIndex: this.selectedDevice.index,\n      actuatorCount: this.actuators.length,\n      actuators: this.actuators.map(actuator => ({\n        index: actuator.index,\n        type: actuator.type,\n        capability: actuator.capability,\n        enabled: actuator.settings.enabled,\n        assignedChannel: actuator.getAssignedChannelName(),\n        metadata: actuator.metadata\n      })),\n      messageTimingGap: this.selectedDevice.messageTimingGap || 0\n    };\n  }\n\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      isScanning: this.isScanning,\n      deviceCount: this.devices.size,\n      selectedDevice: this.selectedDevice ? {\n        index: this.selectedDevice.index,\n        name: this.selectedDevice.name\n      } : null,\n      actuatorCount: this.actuators.length,\n      globalScale: this.globalScale,\n      globalOffset: this.globalOffset,\n      config: { intifaceUrl: this.intifaceUrl }\n    };\n  }\n\n  setIntifaceUrl(url) {\n    const cleanUrl = this._validateAndCleanUrl(url);\n    \n    if (this.intifaceUrl !== cleanUrl) {\n      const wasConnected = this.isConnected;\n      const oldUrl = this.intifaceUrl;\n      \n      this.intifaceUrl = cleanUrl;\n      \n      if (this.connector && this.connector._url !== cleanUrl) {\n        this.connector = new ButtplugBrowserWebsocketClientConnector(cleanUrl);\n      }\n      \n      // ✅ NOUVEAU: Status URL change (log technique)\n      this.notify?.('status:buttplug', { \n        message: `URL changed: ${oldUrl} → ${cleanUrl}`, \n        type: 'log' \n      });\n      \n      this.notify?.('buttplug:config', { \n        key: 'intifaceUrl', \n        data: { oldUrl, newUrl: cleanUrl, wasConnected } \n      });\n    }\n  }\n\n  getIntifaceUrl() {\n    return this.intifaceUrl;\n  }\n\n  // ============================================================================\n  // SECTION 8: PRIVATE METHODS\n  // ============================================================================\n\n  _sendScalarCommand = async (actuatorType, value, actuatorIndex = null) => {\n    if (!this.selectedDevice) throw new Error('No device selected');\n\n    const capability = actuatorType === ActuatorType.Vibrate ? Capability.VIBRATE : Capability.OSCILLATE;\n    const resolvedIndex = this._resolveActuatorIndex(capability, actuatorIndex);\n    \n    if (resolvedIndex === null) {\n      throw new Error(`No ${actuatorType} actuator available`);\n    }\n\n    try {\n      const clampedValue = Math.max(0, Math.min(1, value));\n      \n      if (actuatorType === ActuatorType.Vibrate) {\n        await this.selectedDevice.vibrate(clampedValue);\n      } else if (actuatorType === ActuatorType.Oscillate) {\n        await this.selectedDevice.oscillate(clampedValue);\n      }\n      \n      return true;\n    } catch (error) {\n      // ✅ NOUVEAU: Erreur scalar command (log technique)\n      this.notify?.('status:buttplug', { \n        message: `${actuatorType} command failed: ${error.message}`, \n        type: 'log' \n      });\n      return false;\n    }\n  }\n\n  _resolveActuatorIndex = (capability, requestedIndex) => {\n    if (requestedIndex !== null && requestedIndex !== undefined) {\n      const actuator = this.getActuator(requestedIndex);\n      if (actuator && actuator.capability === capability) {\n        return requestedIndex;\n      }\n      return null;\n    }\n    \n    const available = this.getActuatorsByCapability(capability);\n    return available.length > 0 ? available[0].index : null;\n  }\n\n  _validateAndCleanUrl(url) {\n    if (!url || typeof url !== 'string') {\n      return 'ws://localhost:12345';\n    }\n    \n    let cleanUrl = url.trim();\n    \n    if (!cleanUrl.startsWith('ws://') && !cleanUrl.startsWith('wss://')) {\n      cleanUrl = 'ws://' + cleanUrl;\n    }\n    \n    try {\n      const urlObj = new URL(cleanUrl);\n      if (!urlObj.port) {\n        urlObj.port = '12345';\n        cleanUrl = urlObj.toString();\n      }\n    } catch (error) {\n      // ✅ NOUVEAU: Warning URL invalide (log technique)\n      this.notify?.('status:buttplug', { \n        message: `Invalid WebSocket URL, using default: ${url}`, \n        type: 'log' \n      });\n      return 'ws://localhost:12345';\n    }\n    \n    return cleanUrl;\n  }\n\n  _resetDevice = () => {\n    this.selectedDevice = this.virtualDevice;\n    this._initActuators();\n    this._notifyDeviceChanged(this.virtualDevice);\n  }\n\n  _resetConnectionState = () => {\n    this.isConnected = false;\n    this.isScanning = false;\n    \n    this.devices.clear();\n    this.devices.set(-1, this.virtualDevice);\n    \n    this.throttleMap.clear();\n    this._resetDevice();\n    \n    this.notify?.('buttplug:connection', { connected: false });\n  }\n\n  // ============================================================================\n  // SECTION 9: EVENT HANDLERS & NOTIFICATIONS\n  // ============================================================================\n\n  _onDeviceAdded = (device) => {\n    this.devices.set(device.index, device);\n    \n    // ✅ NOUVEAU: Status device added\n    this.notify?.('status:buttplug', { \n      message: `Device connected: ${device.name}`, \n      type: 'success' \n    });\n    \n    this.notify?.('buttplug:device', { device: undefined }); // Device list changed\n  }\n\n  _onDeviceRemoved = (device) => {\n    this.devices.delete(device.index);\n    \n    if (this.selectedDevice?.index === device.index) {\n      this.selectDevice(-1); // Retomber sur VirtualDevice\n    }\n    \n    // ✅ NOUVEAU: Status device removed\n    this.notify?.('status:buttplug', { \n      message: `Device disconnected: ${device.name}`, \n      type: 'info' \n    });\n    \n    this.notify?.('buttplug:device', { device: undefined }); // Device list changed\n  }\n\n  _onDisconnect = () => {\n    // ✅ NOUVEAU: Status disconnection\n    this.notify?.('status:buttplug', { \n      message: 'Lost connection to Intiface Central', \n      type: 'error' \n    });\n    \n    this._resetConnectionState();\n  }\n\n  // ============================================================================\n  // SECTION 10: CLEANUP\n  // ============================================================================\n\n  async cleanup() {\n    // Stop all devices\n    if (this.isConnected && this.client) {\n      try {\n        await this.client.stopAllDevices();\n      } catch (error) {\n        // ✅ NOUVEAU: Erreur cleanup (log technique)\n        this.notify?.('status:buttplug', { \n          message: `Stop all devices failed during cleanup: ${error.message}`, \n          type: 'log' \n        });\n      }\n    }\n    \n    // Disconnect\n    if (this.isConnected && this.client) {\n      try {\n        await this.client.disconnect();\n      } catch (error) {\n        // ✅ NOUVEAU: Erreur cleanup (log technique)\n        this.notify?.('status:buttplug', { \n          message: `Disconnect failed during cleanup: ${error.message}`, \n          type: 'log' \n        });\n      }\n    }\n    \n    // Cleanup references\n    if (this.client) {\n      try {\n        this.client.removeAllListeners();\n      } catch (error) {\n        // ✅ NOUVEAU: Erreur cleanup (log technique)\n        this.notify?.('status:buttplug', { \n          message: `Remove listeners failed during cleanup: ${error.message}`, \n          type: 'log' \n        });\n      }\n      this.client = null;\n    }\n    \n    this.connector = null;\n    this.throttleMap.clear();\n    \n    // Débrancher tous les actuateurs\n    this.actuators.forEach(actuator => actuator.unplug());\n    this.actuators = [];\n    \n    this.initialized = false;\n    this.isConnected = false;\n    this.isScanning = false;\n    this.devices.clear();\n    this.devices.set(-1, this.virtualDevice);\n    this._resetDevice();\n\n    // ✅ NOUVEAU: Status cleanup complet\n    this.notify?.('status:buttplug', { \n      message: 'ButtPlug cleanup completed', \n      type: 'log' \n    });\n  }\n}\n\nexport default ButtPlugManager;","/**\n * Channel.js - ✅ AMÉLIORÉ: Ajout likely_capability pour optimiser autoMap\n * \n * RESPONSABILITÉS:\n * - Classe Channel avec parsing et normalisation des actions\n * - Interpolation optimisée avec cache pour performance\n * - Validation stricte des données et configuration\n * - Système de branchement bidirectionnel avec actuateurs + notify\n * - ✅ NOUVEAU: Calcul de likely_capability au parsing pour éviter duplication dans autoMap\n */\n\nimport { HapticType, Capability } from './constants';\n\n// ============================================================================\n// CLASSE CHANNEL\n// ============================================================================\n\nexport class Channel {\n  constructor(name, rawActions, fieldConfig = {}, metadata = {}, notify = null) {\n    // Validation de base\n    if (!name || typeof name !== 'string') {\n      throw new Error('Channel name must be a non-empty string');\n    }\n    \n    // Propriétés de base\n    this.name = name;\n    this.metadata = metadata;\n    \n    // Notification system\n    this.notify = notify;\n    \n    // Configuration des champs à extraire\n    this.fieldConfig = {\n      timeField: 'at',           // Champ temps par défaut\n      valueField: 'pos',         // Champ valeur par défaut\n      directionField: null,      // Champ direction optionnel (pour rotation)\n      durationField: null,       // Champ durée optionnel (pour linear)\n      ...fieldConfig\n    };\n    \n    // Validation configuration\n    if (!this.fieldConfig.timeField || !this.fieldConfig.valueField) {\n      throw new Error(`Channel \"${name}\": timeField and valueField must be specified`);\n    }\n    \n    // Cache d'interpolation\n    this.interpolationCache = {\n      leftIndex: 0,\n      rightIndex: 1,\n      lastTime: -1\n    };\n    this.seekThreshold = 1000; // ms\n    \n    // Actuateurs connectés indexés par leur index\n    this.connectedActuators = new Map(); // Map<actuatorIndex, actuatorInstance>\n    \n    this.notify?.('status:channel', { message: `Creating channel \"${name}\"...`, type: 'log' });\n    \n    // Traitement des actions (peut lever des erreurs)\n    this.actions = this._processActions(rawActions);\n    \n    // ✅ NOUVEAU: Calcul de likely_capability AVANT type (pour pouvoir influencer le type si besoin)\n    this.likelyCapability = this._determineLikelyCapability();\n    \n    this.type = this._determineType();\n    this.duration = this._calculateDuration();\n    this.averageIntervalMs=this.actions.length > 1 ? (this.duration * 1000) / (this.actions.length - 1) : 100;\n    this.valueRange = this._calculateValueRange();\n\n    this.notify?.('status:channel', { message: `Channel \"${name}\" created: ${this.type} type, likely_capability: ${this.likelyCapability}, ${this.actions.length} actions, ${this.duration.toFixed(2)}s`, type: 'success' });\n  }\n\n  // ============================================================================\n  // ✅ NOUVEAU: DÉTERMINATION LIKELY_CAPABILITY\n  // ============================================================================\n\n  /**\n   * Détermine la capability la plus probable pour ce canal\n   * Combine analyse du nom + fieldConfig + données\n   */\n  _determineLikelyCapability() {\n    // 1. Priorité 1: Capability explicite dans metadata\n    if (this.metadata.capability) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Using explicit capability from metadata: ${this.metadata.capability}`, type: 'log' });\n      return this.metadata.capability;\n    }\n\n    // 2. Priorité 2: Analyse heuristique combinée\n    const heuristicResult = this._heuristicCapabilityAnalysis();\n    \n    // 3. Priorité 3: Validation avec fieldConfig et données\n    const validatedResult = this._validateCapabilityWithContext(heuristicResult);\n    \n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": Likely capability determined as \"${validatedResult}\" (from heuristic: \"${heuristicResult}\")`, type: 'log' });\n    \n    return validatedResult;\n  }\n\n  /**\n   * Analyse heuristique du nom du canal pour déterminer la capability\n   */\n  _heuristicCapabilityAnalysis() {\n    const nameLower = this.name.toLowerCase();\n    \n    // Patterns de détection par nom avec ordre de priorité\n    const patterns = [\n      { capability: Capability.ROTATE, regex: /^(rot|rotat|twist|spin|turn|roll|angle|pitch|yaw)$/i },\n      { capability: Capability.LINEAR, regex: /^(pos|position|stroke|linear|up|down|vertical|y)$/i },\n      { capability: Capability.OSCILLATE, regex: /^(osc|oscill|swing|wave|sway)$/i },\n      { capability: Capability.VIBRATE, regex: /^(vib|vibr|vibrat|buzz|rumble|shake)$/i },\n      \n      // Patterns étendus pour types non-officiels → mappés vers capabilities officielles\n      { capability: Capability.VIBRATE, regex: /^(squeeze|constrict|pressure|grip|clamp)$/i },\n      { capability: Capability.VIBRATE, regex: /^(suck|suction|vacuum|pump)$/i }\n    ];\n    \n    // Test des patterns dans l'ordre\n    for (const { capability, regex } of patterns) {\n      if (regex.test(nameLower)) {\n        this.notify?.('status:channel', { message: `Channel \"${this.name}\": Pattern match for ${capability}`, type: 'log' });\n        return capability;\n      }\n    }\n    \n    // Fallback: analyse par fieldConfig si pas de match par nom\n    return this._inferCapabilityFromFieldConfig();\n  }\n\n  /**\n   * Inférence de capability basée sur la structure du fieldConfig\n   */\n  _inferCapabilityFromFieldConfig() {\n    // Si directionField configuré → suggère rotate\n    if (this.fieldConfig.directionField) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Direction field detected, suggesting rotate`, type: 'log' });\n      return Capability.ROTATE;\n    }\n    \n    // Si durationField configuré → suggère linear\n    if (this.fieldConfig.durationField) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Duration field detected, suggesting linear`, type: 'log' });\n      return Capability.LINEAR;\n    }\n    \n    // Analyse du nom du valueField pour indices supplémentaires\n    const valueField = this.fieldConfig.valueField.toLowerCase();\n    if (valueField.includes('speed') || valueField.includes('spd')) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Speed field detected, suggesting rotate`, type: 'log' });\n      return Capability.ROTATE;\n    }\n    \n    if (valueField.includes('pos') || valueField.includes('position')) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Position field detected, suggesting linear`, type: 'log' });\n      return Capability.LINEAR;\n    }\n    \n    // Fallback ultime\n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": No clear indicators, defaulting to linear`, type: 'log' });\n    return Capability.LINEAR;\n  }\n\n  /**\n   * Validation de la capability avec le contexte (détection des downgrades)\n   */\n  _validateCapabilityWithContext(heuristicCapability) {\n    const hasNegativeValues = this.actions.some(a => a.value < 0);\n    const hasDirectionField = !!this.fieldConfig.directionField;\n    \n    // Cas spécial: rotate détecté mais pas de rotation effective → downgrade vers linear\n    if (heuristicCapability === Capability.ROTATE) {\n      // Si pas de directionField ET pas de valeurs signées → vraiment downgradé\n      if (!hasDirectionField && !hasNegativeValues) {\n        this.notify?.('status:channel', { message: `Channel \"${this.name}\": Rotate detected but no rotation data, downgrading to linear`, type: 'warning' });\n        return Capability.LINEAR;\n      }\n    }\n    \n    // Cas spécial: linear détecté mais a un directionField → upgrade vers rotate\n    if (heuristicCapability === Capability.LINEAR && hasDirectionField) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Linear detected but has direction field, upgrading to rotate`, type: 'log' });\n      return Capability.ROTATE;\n    }\n    \n    // Pas de modification nécessaire\n    return heuristicCapability;\n  }\n\n  // ============================================================================\n  // SYSTÈME DE BRANCHEMENT AVEC NOTIFY\n  // ============================================================================\n\n  /**\n   * Branche un actuateur à ce canal\n   */\n  plug(actuator) {\n    if (!this.canPlugTo(actuator)) {\n      this.notify?.('status:channel', { message: `Cannot plug actuator ${actuator.index} to channel \"${this.name}\" (incompatible: ${actuator.type} vs ${this.type})`, type: 'error' });\n      return false;\n    }\n    \n    // Déconnecter l'actuateur de son canal précédent si besoin\n    if (actuator.assignedChannel && actuator.assignedChannel !== this) {\n      actuator.assignedChannel.unplug(actuator);\n    }\n    \n    // Brancher\n    this.connectedActuators.set(actuator.index, actuator);\n    actuator.assignedChannel = this;\n    actuator.previousMappedChannel=this.name\n    \n    this.notify?.('status:channel', { message: `Channel \"${this.name}\" plugged to actuator ${actuator.index} (${actuator.capability})`, type: 'success' });\n    \n    this.notify?.('channel:plugged', {\n      channelName: this.name,\n      actuatorIndex: actuator.index,\n      actuator: {\n        index: actuator.index,\n        type: actuator.type,\n        capability: actuator.capability\n      },\n      connectedCount: this.connectedActuators.size\n    });\n    \n    return true;\n  }\n\n  /**\n   * Débranche un actuateur de ce canal\n   */\n  unplug(actuator) {\n    if (this.connectedActuators.get(actuator.index) === actuator) {\n      this.connectedActuators.delete(actuator.index);\n      \n      if (actuator.assignedChannel === this) {\n        actuator.assignedChannel = null;\n      }\n      \n      this.notify?.('status:channel', { message: `Channel \"${this.name}\" unplugged from actuator ${actuator.index}`, type: 'info' });\n      \n      this.notify?.('channel:unplugged', {\n        channelName: this.name,\n        actuatorIndex: actuator.index,\n        actuator: {\n          index: actuator.index,\n          type: actuator.type,\n          capability: actuator.capability\n        },\n        connectedCount: this.connectedActuators.size\n      });\n    } else {\n      this.notify?.('status:channel', { message: `Actuator ${actuator.index} was not connected to channel \"${this.name}\"`, type: 'warning' });\n    }\n  }\n\n  /**\n   * Débranche tous les actuateurs\n   */\n  unplugAll() {\n    const actuatorsToUnplug = Array.from(this.connectedActuators.values());\n    actuatorsToUnplug.forEach(actuator => this.unplug(actuator));\n  }\n\n  /**\n   * Vérifie si un actuateur peut être branché à ce canal\n   */\n  canPlugTo(actuator) {\n    return actuator.settings.enabled && this.type === actuator.type;\n  }\n\n  /**\n   * Retourne la liste des actuateurs connectés\n   */\n  getConnectedActuators() {\n    return Array.from(this.connectedActuators.values());\n  }\n\n  // ============================================================================\n  // GETTERS ET API PUBLIQUE\n  // ============================================================================\n\n  /**\n   * ✅ NOUVEAU: Getter pour likely_capability\n   */\n  getLikelyCapability() {\n    return this.likelyCapability;\n  }\n\n  /**\n   * Retourne les métadonnées du canal\n   */\n  getMetadata() {\n    return { ...this.metadata };\n  }\n\n  /**\n   * Vérifie si le canal a des actions\n   */\n  hasActions() {\n    return this.actions.length > 0;\n  }\n\n  /**\n   * Retourne le nombre d'actions\n   */\n  getActionCount() {\n    return this.actions.length;\n  }\n\n  // ============================================================================\n  // TRAITEMENT DES ACTIONS\n  // ============================================================================\n\n  _processActions(rawActions) {\n    if (!Array.isArray(rawActions) || rawActions.length === 0) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": No actions provided`, type: 'error' });\n      return [];\n    }\n\n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": Processing ${rawActions.length} raw actions...`, type: 'log' });\n\n    const { timeField, valueField, directionField } = this.fieldConfig;\n    const validActions = [];\n\n    for (const [index, action] of rawActions.entries()) {\n      const time = action[timeField];\n      let value = action[valueField];\n      \n      // ✅ AMÉLIORÉ: Gestion direction avec fallback gracieux\n      if (directionField && action[directionField] !== undefined) {\n        const direction = action[directionField];\n        const magnitude = Math.abs(value); // Force absolute pour magnitude\n        \n        // Si valeur était négative + directionField → warning + correction\n        if (value < 0) {\n          this.notify?.('status:channel', { message: `Channel \"${this.name}\": Negative value with direction field, applying Math.abs()`, type: 'warning' });\n        }\n        \n        // Conversion direction → signe\n        if (typeof direction === 'boolean') {\n          value = direction ? magnitude : -magnitude;\n        } else if (typeof direction === 'string') {\n          const isPositive = ['cw', 'clockwise', 'right', 'positive','+','true','1']\n            .includes(direction.toLowerCase());\n          value = isPositive ? magnitude : -magnitude;\n        } else if (typeof direction === 'number') {\n          value = direction >= 0 ? magnitude : -magnitude;\n        } else {\n          this.notify?.('status:channel', { message: `Channel \"${this.name}\": Invalid direction \"${direction}\", using absolute value`, type: 'warning' });\n          value = magnitude;\n        }\n      }\n      \n      // Validation et ajout\n      if (typeof time === 'number' && typeof value === 'number') {\n        // Préserver métadonnées\n        const actionMetadata = { ...action };\n        delete actionMetadata[timeField];\n        delete actionMetadata[valueField];\n        if (directionField) delete actionMetadata[directionField];\n        \n        validActions.push({ time, value, metadata: actionMetadata });\n      } else {\n        this.notify?.('status:channel', { message: `Channel \"${this.name}\": Invalid action at index ${index} (time: ${typeof time}, value: ${typeof value})`, type: 'log' });\n      }\n    }\n\n    if (validActions.length === 0) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": No valid actions found. Check \"${timeField}\" and \"${valueField}\" fields`, type: 'error' });\n      throw new Error(\n        `Channel \"${this.name}\": No valid actions. Check \"${timeField}\" and \"${valueField}\" fields.`\n      );\n    }\n\n    // Tri et normalisation\n    validActions.sort((a, b) => a.time - b.time);\n    \n    const maxAbsValue = Math.max(...validActions.map(a => Math.abs(a.value)));\n    const normFactor = maxAbsValue > 0 ? (1 / maxAbsValue) : 1;\n\n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": ${validActions.length} valid actions, normalization factor: ${normFactor.toFixed(3)}`, type: 'log' });\n\n    return validActions.map(({ time, value, metadata }) => ({\n      time,\n      value: value * normFactor,\n      metadata\n    }));\n  }\n\n  _determineType() {\n    if (this.actions.length === 0) return HapticType.SCALAR;\n    \n    // Si directionField configuré → forcément polaire\n    if (this.fieldConfig.directionField) {\n      this.notify?.('status:channel', { message: `Channel \"${this.name}\": Type determined as POLAR (has direction field)`, type: 'log' });\n      return HapticType.POLAR;\n    }\n    \n    // Sinon détecter par valeurs négatives\n    const hasNegative = this.actions.some(a => a.value < 0);\n    const type = hasNegative ? HapticType.POLAR : HapticType.SCALAR;\n    \n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": Type determined as ${type} (${hasNegative ? 'has negative values' : 'all positive values'})`, type: 'log' });\n    \n    return type;\n  }\n\n  _calculateDuration() {\n    const duration = this.actions.length > 0 ? this.actions[this.actions.length - 1].time / 1000 : 0;\n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": Duration calculated as ${duration.toFixed(2)}s`, type: 'log' });\n    return duration;\n  }\n\n  _calculateValueRange() {\n    if (this.actions.length === 0) return [0, 0];\n    const values = this.actions.map(a => a.value);\n    const range = [Math.min(...values), Math.max(...values)];\n    this.notify?.('status:channel', { message: `Channel \"${this.name}\": Value range: [${range[0].toFixed(3)}, ${range[1].toFixed(3)}]`, type: 'log' });\n    return range;\n  }\n\n  // ============================================================================\n  // INTERPOLATION OPTIMISÉE\n  // ============================================================================\n\n  interpolateAt(time) {\n    if (this.actions.length === 0) {\n      return 0;\n    }\n\n    const timeMs = time * 1000;\n\n    // Gestion cas limites\n    if (timeMs <= this.actions[0].time) {\n      return 0;\n    }\n    if (timeMs >= this.actions[this.actions.length - 1].time) {\n      return 0;\n    }\n\n    // Optimisation du cache pour éviter les recherches\n    const { leftIndex, rightIndex, lastTime } = this.interpolationCache;\n    \n    if  (timeMs < this.actions[leftIndex].time || \n        timeMs >= this.actions[rightIndex].time) {\n      this._updateInterpolationCache(timeMs);\n    }\n\n    const left = this.actions[this.interpolationCache.leftIndex];\n    const right = this.actions[this.interpolationCache.rightIndex];\n    \n    // Interpolation linéaire\n    const factor = (timeMs - left.time) / (right.time - left.time);\n    const result = left.value + factor * (right.value - left.value);\n    \n    this.interpolationCache.lastTime = timeMs;\n    return result;\n  }\n\n_updateInterpolationCache(timeMs) {\n  const { leftIndex: currentLeft, rightIndex: currentRight, lastTime } = this.interpolationCache;\n  \n  // 1. Si on a un cache valide et qu'on est proche temporellement\n  if (lastTime >= 0 && Math.abs(timeMs - lastTime) <= this.seekThreshold) {\n    \n    // Essayer le glissement incrémental optimisé\n    if (this._tryIncrementalSlide(timeMs)) {\n      return; // Succès ! Pas besoin de recherche dichotomique\n    }\n  }\n  \n  // 2. Fallback : recherche dichotomique complète (cas de seek lointain)\n  this._performBinarySearch(timeMs);\n}\n\n/**\n * ✅ NOUVEAU: Glissement incrémental des bornes du cache\n * Retourne true si l'encadrement a pu être rétabli, false sinon\n */\n_tryIncrementalSlide(timeMs) {\n  let { leftIndex, rightIndex } = this.interpolationCache;\n  const maxSlideSteps = this.seekThreshold/this.averageIntervalMs;\n  let steps = 0;\n  \n  // Glissement vers la gauche (timeMs < actions[leftIndex].time)\n  while (timeMs < this.actions[leftIndex]?.time && leftIndex > 0 && steps < maxSlideSteps) {\n    leftIndex--;\n    rightIndex--;\n    steps++;\n  }\n  \n  // Glissement vers la droite (timeMs > actions[rightIndex].time)  \n  while (timeMs >= this.actions[rightIndex]?.time && rightIndex < this.actions.length - 1 && steps < maxSlideSteps) {\n    leftIndex++;\n    rightIndex++;\n    steps++;\n  }\n  \n  // Vérifier que l'encadrement est correct\n  const isValid = leftIndex >= 0 && \n                  rightIndex < this.actions.length &&\n                  leftIndex < rightIndex &&\n                  timeMs >= this.actions[leftIndex].time &&\n                  timeMs < this.actions[rightIndex].time;\n  \n  if (isValid) {\n    // Succès : mettre à jour le cache\n    this.interpolationCache.leftIndex = leftIndex;\n    this.interpolationCache.rightIndex = rightIndex;\n    return true;\n  }\n  \n  return false; // Échec, fallback vers recherche dichotomique\n}\n\n/**\n * ✅ OPTIMISÉ: Recherche dichotomique avec bornes intelligentes\n * Exploite la position actuelle du cache pour réduire l'espace de recherche\n */\n_performBinarySearch(timeMs) {\n  const { leftIndex: currentLeft, rightIndex: currentRight } = this.interpolationCache;\n  let leftBound, rightBound;\n  \n  // Déterminer l'espace de recherche optimal selon la position de timeMs\n  if (timeMs < this.actions[currentLeft]?.time) {\n    // timeMs est avant la fenêtre actuelle → chercher dans [0, currentLeft]\n    leftBound = 0;\n    rightBound = currentLeft;\n  } else if (timeMs > this.actions[currentRight]?.time) {\n    // timeMs est après la fenêtre actuelle → chercher dans [currentRight, end]\n    leftBound = currentRight;\n    rightBound = this.actions.length - 1;\n  } else {\n    // timeMs est dans la fenêtre actuelle → resserrer directement l'intervalle\n    leftBound = currentLeft;\n    rightBound = currentRight;\n  }\n  \n  // Recherche dichotomique dans l'espace restreint\n  let leftIndex = leftBound;\n  let rightIndex = rightBound;\n  \n  while (rightIndex - leftIndex > 1) {\n    const mid = Math.floor((leftIndex + rightIndex) / 2);\n    if (this.actions[mid].time <= timeMs) {\n      leftIndex = mid;\n    } else {\n      rightIndex = mid;\n    }\n  }\n  \n  this.interpolationCache.leftIndex = leftIndex;\n  this.interpolationCache.rightIndex = rightIndex;\n}\n\n  // ============================================================================\n  // DEBUG ET UTILITAIRES\n  // ============================================================================\n\n  /**\n   * ✅ AMÉLIORÉ: Informations de debug avec likely_capability\n   */\n  getDebugInfo() {\n    const debugInfo = {\n      name: this.name,\n      type: this.type,\n      likelyCapability: this.likelyCapability, // ✅ NOUVEAU\n      duration: this.duration,\n      actionCount: this.actions.length,\n      valueRange: this.valueRange,\n      fieldConfig: { ...this.fieldConfig },\n      metadata: { ...this.metadata },\n      connectedActuators: Object.fromEntries(\n        Array.from(this.connectedActuators.entries()).map(([idx, actuator]) => [\n          idx, { index: actuator.index, type: actuator.type, enabled: actuator.settings.enabled }\n        ])\n      ),\n      sampleActions: this.actions.slice(0, 3).map(a => ({\n        ...a,\n        metadata: a.metadata ? a.metadata : undefined\n      })),\n      cache: { ...this.interpolationCache }\n    };\n    return debugInfo;\n  }\n\n  toString() {\n    const fieldInfo = `${this.fieldConfig.valueField}${\n      this.fieldConfig.directionField ? '+' + this.fieldConfig.directionField : ''\n    }`;\n    const connectedCount = this.connectedActuators.size;\n    return `Channel[${this.name}](${this.type}/${this.likelyCapability}, ${fieldInfo}, ${this.actions.length} actions, ${this.duration.toFixed(2)}s, ${connectedCount} actuators)`;\n  }\n}\n\nexport default Channel;","import { Channel } from './Channel';\nimport { HapticType } from './constants';\n\n/**\n * FunscriptManager - ✅ SIMPLIFIÉ: Heuristique déplacée dans Channel\n * \n * RESPONSABILITÉS SIMPLIFIÉES:\n * - Parsing funscript et extraction des champs \n * - Configuration fieldConfig basique (sans heuristique complexe)\n * - Création des instances Channel (qui font leur propre heuristique)\n * - AutoMap optimisé utilisant channel.likelyCapability\n * - Support config utilisateur custom pour override manuel\n */\nclass FunscriptManager {\n  constructor(notify) {\n    this.notify = notify;\n    \n    // Données funscript\n    this.data = null;\n    this.channels = []; // Array<Channel> - source de vérité unique\n    this.duration = 0;\n    \n    // Support config utilisateur custom\n    this.customFieldConfig = null;\n  }\n\n  // ============================================================================\n  // SECTION 1: LOADING & RESET\n  // ============================================================================\n\n  /**\n   * Charge un funscript depuis URL ou objet\n   */\n  async loadFromSource(src) {\n    try {\n      this.notify?.('status:funscript', { message: 'Loading funscript from source...', type: 'processing' });\n\n      let data;\n      if (typeof src === 'string') {\n        if (src.startsWith('http') || src.startsWith('/')) {\n          data = await this._fetchWithCorsProxy(src);\n        } else {\n          data = JSON.parse(src);\n        }\n      } else {\n        data = src;\n      }\n      \n      return this.load(data);\n      \n    } catch (error) {\n      this.notify?.('status:funscript', { message: 'Failed to load funscript from source', type: 'error', error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Charge un funscript et extrait tous les canaux en instances Channel\n   */\n  load(funscriptData) {\n    try {\n      this.notify?.('status:funscript', { message: 'Processing funscript data...', type: 'processing' });\n\n      this.data = typeof funscriptData === 'string' ? JSON.parse(funscriptData) : funscriptData;\n      this._extractChannels();\n      this._calculateDuration();\n      \n      this.notify?.('status:funscript', { message: `Loaded ${this.channels.length} channels, ${this.duration.toFixed(2)}s`, type: 'success' });\n      this.notify?.('status:funscript', { message: `Channel extraction complete: ${this.channels.map(ch => ch.name).join(', ')}`, type: 'log' });\n      \n      this.notify?.('funscript:load', { \n        data: this.data, \n        channels: this.channels.map(ch => ch.name),\n        channelInstances: this.channels,\n        duration: this.duration\n      });\n      \n      this.notify?.('funscript:channels', { \n        channels: this.channels.map(ch => ch.name),\n        channelInstances: this.channels,\n        total: this.channels.length \n      });\n      \n      return true;\n    } catch (error) {\n      this.notify?.('status:funscript', { message: 'Failed to process funscript', type: 'error', error: error.message });\n      this._reset();\n      return false;\n    }\n  }\n\n  /**\n   * Charge un funscript avec config utilisateur custom\n   */\n  loadWithCustomFieldConfig(funscriptData, customFieldConfig = null) {\n    this.customFieldConfig = customFieldConfig;\n    return this.load(funscriptData);\n  }\n\n  /**\n   * Charge le funscript d'un item de playlist\n   */\n  async loadFromPlaylistItem(item) {\n    if (!item) {\n      this.reset();\n      return true;\n    }\n\n    try {\n      this.notify?.('status:funscript', { message: `Loading funscript for item: ${item.name || 'Untitled'}`, type: 'processing' });\n\n      if (item.funscript) {\n        if (typeof item.funscript === 'object') {\n          this.load(item.funscript);\n        } else {\n          await this.loadFromSource(item.funscript);\n        }\n        this.notify?.('status:funscript', { message: `Funscript loaded for: ${item.name || 'Untitled'}`, type: 'success' });\n      } else {\n        this.reset();\n        this.notify?.('status:funscript', { message: 'No funscript for current item', type: 'info' });\n      }\n\n      return true;\n\n    } catch (error) {\n      this.notify?.('status:funscript', { message: `Failed to load funscript from playlist item: ${error.message}`, type: 'error' });\n      this.reset();\n      return false;\n    }\n  }\n\n  /**\n   * Fetch avec proxy CORS si besoin\n   */\n  async _fetchWithCorsProxy(url) {\n    const directError = null;\n    const proxyError = null;\n    \n    try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`HTTP ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      try {\n        const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(url)}`;\n        const response = await fetch(proxyUrl);\n        if (!response.ok) throw new Error(`HTTP ${response.status}`);\n        return await response.json();\n      } catch (proxyErr) {\n        throw new Error(`Failed to fetch funscript. Direct: ${directError?.message || error.message}, Proxy: ${proxyErr.message}`);\n      }\n    }\n  }\n\n  /**\n   * Vérifie si des canaux sont chargés\n   */\n  hasFunscript() {\n    return this.channels.length > 0;\n  }\n\n  /**\n   * Reset complet du manager\n   */\n  reset() {\n    this._reset();\n    this.notify?.('status:funscript', { message: 'Funscript manager reset', type: 'info' });\n    this.notify?.('funscript:reset', {});\n  }\n\n  /**\n   * Reset interne\n   */\n  _reset() {\n    // Débrancher tous les canaux avant reset\n    this.channels.forEach(channel => channel.unplugAll());\n    \n    this.data = null;\n    this.channels = [];\n    this.duration = 0;\n    this.customFieldConfig = null;\n  }\n\n  // ============================================================================\n  // SECTION 2: GETTERS & BASIC INFO\n  // ============================================================================\n\n  getChannels() {\n    return [...this.channels];\n  }\n\n  getChannelNames() {\n    return this.channels.map(channel => channel.name);\n  }\n\n  getChannel(channelName) {\n    return this.channels.find(channel => channel.name === channelName) || null;\n  }\n\n  hasChannel(channelName) {\n    return this.getChannel(channelName) !== null;\n  }\n\n  getChannelsByType(hapticType) {\n    return this.channels.filter(channel => channel.type === hapticType);\n  }\n\n  getDuration() {\n    return this.duration;\n  }\n\n  // ============================================================================\n  // SECTION 3: INTERPOLATION PURE\n  // ============================================================================\n\n  interpolateAll(channelTimings) {\n    const result = {};\n    \n    for (const [channelName, t_canal] of Object.entries(channelTimings)) {\n      const channel = this.getChannel(channelName);\n      if (channel) {\n        const value = channel.interpolateAt(t_canal);\n        if (value!=null){\n          result[channelName] = value;\n        }\n      }\n    }\n    \n    return result;\n  }\n\n  // ============================================================================\n  // SECTION 4: AUTO-MAPPING OPTIMISÉ avec likely_capability\n  // ============================================================================\n\n  autoMapChannels(actuators) {\n    if (this.channels.length === 0) {\n      this.notify?.('status:funscript', { message: 'No channels available for auto-mapping', type: 'info' });\n      return { suggestions: [], mapped: 0, total: 0, mode: 'no channels' };\n    }\n\n    if (!actuators || actuators.length === 0) {\n      this.notify?.('status:funscript', { message: 'No actuators available for auto-mapping', type: 'info' });\n      return { suggestions: [], mapped: 0, total: this.channels.length, mode: 'no actuators' };\n    }\n\n    this.notify?.('status:funscript', { message: `Starting auto-mapping for ${this.channels.length} channels with ${actuators.length} actuators...`, type: 'processing' });\n\n    const suggestions = [];\n    let mappedCount = 0;\n\n    for (const channel of this.channels) {\n      // Utiliser directement channel.likelyCapability au lieu de re-analyser le nom\n      const bestActuator = this._findBestActuatorMatch(channel, actuators);\n      \n      if (bestActuator) {\n        suggestions.push({\n          channelName: channel.name,\n          actuatorIndex: bestActuator.index,\n          confidence: 'high', // Basé sur likely_capability, donc high confidence\n          reason: `${channel.likelyCapability} match`\n        });\n        mappedCount++;\n      } else {\n        this.notify?.('status:funscript', { message: `No compatible actuator found for channel \"${channel.name}\" (${channel.type}, likely: ${channel.likelyCapability})`, type: 'warning' });\n      }\n    }\n\n    const mode = mappedCount === this.channels.length ? 'complete' : \n                 mappedCount > 0 ? 'partial' : 'none';\n\n    this.notify?.('status:funscript', { message: `Auto-mapping complete: ${mappedCount}/${this.channels.length} channels mapped`, type: mappedCount > 0 ? 'success' : 'warning' });\n\n    return {\n      suggestions,\n      mapped: mappedCount,\n      total: this.channels.length,\n      mode\n    };\n  }\n\n  /**\n   * ✅ SIMPLIFIÉ: Trouve le meilleur actuateur pour un canal basé sur likely_capability\n   */\n  _findBestActuatorMatch(channel, actuators) {\n    // Filtrer les actuateurs compatibles (même type SCALAR/POLAR)\n    const compatibleActuators = actuators.filter(actuator => \n      actuator.settings.enabled && channel.canPlugTo(actuator)\n    );\n\n    if (compatibleActuators.length === 0) {\n      this.notify?.('status:funscript', { message: `No compatible actuators for channel \"${channel.name}\" (${channel.type})`, type: 'log' });\n      return null;\n    }\n\n    // 1. Priorité 1 : Match exact avec likely_capability\n    const exactMatch = compatibleActuators.find(actuator => \n      actuator.capability === channel.likelyCapability\n    );\n    \n    if (exactMatch) {\n      this.notify?.('status:funscript', { message: `Perfect match: ${channel.name} → ${exactMatch.capability} (likely_capability match)`, type: 'log' });\n      return exactMatch;\n    }\n\n    // 2. Priorité 2 : Ordre de priorité par défaut\n    const priorityOrder = ['linear', 'vibrate', 'oscillate', 'rotate'];\n    for (const capability of priorityOrder) {\n      const actuator = compatibleActuators.find(a => a.capability === capability);\n      if (actuator) {\n        this.notify?.('status:funscript', { message: `Fallback mapping: ${channel.name} → ${capability} (priority order)`, type: 'log' });\n        return actuator;\n      }\n    }\n    \n    // 3. Dernier recours : premier compatible\n    const fallbackActuator = compatibleActuators[0] || null;\n    if (fallbackActuator) {\n      this.notify?.('status:funscript', { message: `Last resort mapping: ${channel.name} → ${fallbackActuator.capability} (first available)`, type: 'log' });\n    }\n    return fallbackActuator;\n  }\n\n  // ============================================================================\n  // SECTION 5: FUNSCRIPT PARSING SIMPLIFIÉ\n  // ============================================================================\n\n  /**\n   * Extrait tous les canaux du funscript en créant des instances Channel\n   */\n  _extractChannels() {\n    this.channels = [];\n\n    this.notify?.('status:funscript', { message: 'Extracting channels from funscript data...', type: 'processing' });\n\n    // 1. Extraire les métadonnées globales (si disponibles)\n    const metadata = this._extractMetadata();\n    \n    // 2. Format standard single-channel (toujours en premier)\n    if (this.data.actions?.length) {\n      const channel = this._createChannelFromActions('pos', this.data.actions, metadata);\n      if (channel) {\n        this.channels.push(channel);\n        this.notify?.('status:funscript', { message: `Found main channel: ${channel.name} (${this.data.actions.length} actions)`, type: 'log' });\n      }\n    }\n\n    // 3. Détection flexible des canaux multi-axes\n    this._extractMultiAxisChannels(metadata);\n\n    // 4. Format tracks nested (format alternatif)\n    if (this.data.tracks) {\n      this.notify?.('status:funscript', { message: `Processing ${Object.keys(this.data.tracks).length} nested tracks...`, type: 'log' });\n      for (const [trackName, trackData] of Object.entries(this.data.tracks)) {\n        if (trackData.actions?.length) {\n          const trackMetadata = { ...metadata, ...trackData.metadata };\n          const channel = this._createChannelFromActions(trackName, trackData.actions, trackMetadata);\n          if (channel) {\n            this.channels.push(channel);\n            this.notify?.('status:funscript', { message: `Found track channel: ${channel.name} (${trackData.actions.length} actions)`, type: 'log' });\n          }\n        }\n      }\n    }\n\n    if (this.channels.length === 0) {\n      throw new Error('No valid channels found in funscript data');\n    }\n\n    this.notify?.('status:funscript', { message: `Channel extraction complete: ${this.channels.length} channels created`, type: 'success' });\n  }\n\n  /**\n   * Scan des canaux multi-axes dans les propriétés root\n   */\n  _extractMultiAxisChannels(metadata) {\n    this.notify?.('status:funscript', { message: 'Scanning for multi-axis channels...', type: 'log' });\n\n    let foundMultiAxis = 0;\n    for (const [key, value] of Object.entries(this.data)) {\n      if (this._isActionArray(value)) {\n        if (key === 'actions') continue; // Éviter de retraiter 'actions'\n        \n        const channel = this._createChannelFromActions(key, value, metadata);\n        if (channel) {\n          this.channels.push(channel);\n          foundMultiAxis++;\n        }\n      }\n    }\n\n    if (foundMultiAxis > 0) {\n      this.notify?.('status:funscript', { message: `Found ${foundMultiAxis} multi-axis channels`, type: 'log' });\n    }\n  }\n\n  /**\n   * Test si un objet est un array d'actions valide\n   */\n  _isActionArray(value) {\n    return Array.isArray(value) && \n           value.length > 0 && \n           value.every(action => \n             typeof action === 'object' && \n             action !== null &&\n             (action.at !== undefined || action.t !== undefined || action.time !== undefined)\n           );\n  }\n\n  /**\n   * ✅ SIMPLIFIÉ: Création d'une instance Channel (heuristique déléguée au Channel)\n   */\n  _createChannelFromActions(fieldName, actions, metadata = {}) {\n    try {\n      this.notify?.('status:funscript', { message: `Creating channel from field: ${fieldName} (${actions.length} actions)`, type: 'log' });\n\n      // 1. Configuration utilisateur explicite (priorité absolue)\n      if (this.customFieldConfig && this.customFieldConfig[fieldName]) {\n        const userConfig = this.customFieldConfig[fieldName];\n        const fieldConfig = {\n          timeField: userConfig.timeField || 'at',\n          valueField: userConfig.valueField || 'pos',\n          directionField: userConfig.directionField || null,\n          durationField: userConfig.durationField || null\n        };\n        \n        this.notify?.('status:funscript', { message: `Using user-defined config for ${fieldName}`, type: 'success' });\n        \n        return new Channel(fieldName, actions, fieldConfig, {\n          ...metadata,\n          originalField: fieldName\n        }, this.notify);\n      }\n\n      // 2. Configuration basique avec détection automatique des champs\n      const fieldConfig = this._buildBasicFieldConfig(fieldName, actions, metadata);\n      \n      const channel = new Channel(fieldName, actions, fieldConfig, {\n        ...metadata,\n        originalField: fieldName\n      }, this.notify);\n\n      this.notify?.('status:funscript', { message: `Channel created: ${channel.name} (${channel.type}, likely: ${channel.likelyCapability}, ${channel.actions.length} actions)`, type: 'log' });\n      \n      return channel;\n      \n    } catch (error) {\n      this.notify?.('status:funscript', { message: `Failed to create channel \"${fieldName}\": ${error.message}`, type: 'error' });\n      return null;\n    }\n  }\n\n  /**\n   * ✅ NOUVEAU: Construit un fieldConfig basique en détectant les champs disponibles\n   */\n  _buildBasicFieldConfig(fieldName, actions, metadata) {\n    if (actions.length === 0) {\n      return { timeField: 'at', valueField: 'pos' };\n    }\n\n    const firstAction = actions[0];\n    const availableFields = Object.keys(firstAction);\n\n    // Détecter timeField\n    const timeField = this._detectTimeField(availableFields);\n    \n    // Détecter valueField  \n    const valueField = this._detectValueField(availableFields, fieldName);\n    \n    // Détecter directionField optionnel\n    const directionField = this._detectDirectionField(availableFields);\n    \n    // Détecter durationField optionnel\n    const durationField = this._detectDurationField(availableFields);\n\n    this.notify?.('status:funscript', { message: `Field detection for ${fieldName}: time=${timeField}, value=${valueField}, direction=${directionField || 'none'}, duration=${durationField || 'none'}`, type: 'log' });\n\n    return {\n      timeField,\n      valueField,\n      directionField,\n      durationField\n    };\n  }\n\n  /**\n   * Détecte le champ temps dans les actions\n   */\n  _detectTimeField(availableFields) {\n    const timeFields = ['at', 't', 'time', 'timestamp'];\n    for (const field of timeFields) {\n      if (availableFields.includes(field)) {\n        return field;\n      }\n    }\n    return 'at'; // fallback\n  }\n\n  /**\n   * Détecte le champ valeur principal\n   */\n  _detectValueField(availableFields, fieldName) {\n    // Essayer des noms liés au fieldName d'abord\n    if (availableFields.includes(fieldName.toLowerCase())) {\n      return fieldName.toLowerCase();\n    }\n\n    // Standards communs\n    const valueFields = [\n      'pos', 'position', 'value', 'val', 'v',\n      'speed', 'spd', 's',\n      'scalar', 'intensity', 'i'\n    ];\n    \n    for (const field of valueFields) {\n      if (availableFields.includes(field)) {\n        return field;\n      }\n    }\n    \n    return 'pos'; // fallback\n  }\n\n  /**\n   * Détecte le champ direction optionnel\n   */\n  _detectDirectionField(availableFields) {\n    const directionFields = [\n      'clockwise', 'cw', 'direction', 'dir',\n      'ccw', 'counterclockwise'\n    ];\n    \n    for (const field of directionFields) {\n      if (availableFields.includes(field)) {\n        return field;\n      }\n    }\n    \n    return null; // Pas de champ direction trouvé\n  }\n\n  /**\n   * Détecte le champ durée optionnel\n   */\n  _detectDurationField(availableFields) {\n    const durationFields = ['duration', 'dur', 'd'];\n    \n    for (const field of durationFields) {\n      if (availableFields.includes(field)) {\n        return field;\n      }\n    }\n    \n    return null; // Pas de champ durée trouvé\n  }\n\n  /**\n   * Extrait métadonnées du funscript\n   */\n  _extractMetadata() {\n    if (!this.data) return {};\n    \n    return {\n      metadata: this.data.metadata || {},\n      channels: this.data.channels || {},\n      mapping: this.data.mapping || {},\n      ...this.data.metadata // Flatten au niveau racine\n    };\n  }\n\n  /**\n   * Calcule la durée totale du funscript\n   */\n  _calculateDuration() {\n    this.duration = Math.max(\n      ...this.channels.map(channel => channel.duration),\n      0\n    );\n  }\n\n  // ============================================================================\n  // SECTION 6: HELPERS ET DEBUG\n  // ============================================================================\n\n  /**\n   * ✅ NOUVEAU: Retourne les likely_capability de tous les canaux\n   */\n  getChannelSuggestions() {\n    return this.channels.map(channel => ({\n      name: channel.name,\n      type: channel.type,\n      likelyCapability: channel.likelyCapability,\n      actionCount: channel.getActionCount(),\n      duration: channel.duration\n    }));\n  }\n\n  /**\n   * Informations de debug complètes\n   */\n  getDebugInfo() {\n    return {\n      loaded: this.hasFunscript(),\n      channelCount: this.channels.length,\n      duration: this.duration,\n      channels: this.channels.map(ch => ({\n        name: ch.name,\n        type: ch.type,\n        likelyCapability: ch.likelyCapability,\n        actionCount: ch.getActionCount(),\n        connectedActuators: ch.getConnectedActuators().length\n      })),\n      customFieldConfig: this.customFieldConfig,\n      dataKeys: this.data ? Object.keys(this.data) : []\n    };\n  }\n\n  /**\n   * Métadonnées d'un canal spécifique\n   */\n  getChannelMetadata(channelName) {\n    const channel = this.getChannel(channelName);\n    return channel ? channel.getMetadata() : {};\n  }\n\n  /**\n   * Vérifie si un canal a des valeurs négatives\n   */\n  hasNegativeValues(channelName) {\n    const channel = this.getChannel(channelName);\n    return channel ? channel.type === HapticType.POLAR : false;\n  }\n\n  // ============================================================================\n  // SECTION 7: DÉTECTION DES CHAMPS POUR CHANNELSETTINGS\n  // ============================================================================\n\n  /**\n   * ✅ NOUVEAU: Analyse des champs disponibles dans chaque canal pour ChannelSettings\n   */\n  getDetectedFields() {\n    if (!this.data) return {};\n    \n    const detectedFields = {};\n    \n    // Analyser le canal principal\n    if (this.data.actions?.length > 0) {\n      detectedFields['pos'] = this._analyzeFieldsInActions(this.data.actions);\n    }\n    \n    // Analyser les canaux multi-axes\n    for (const [key, value] of Object.entries(this.data)) {\n      if (this._isActionArray(value) && key !== 'actions') {\n        detectedFields[key] = this._analyzeFieldsInActions(value);\n      }\n    }\n    \n    // Analyser les tracks nested\n    if (this.data.tracks) {\n      for (const [trackName, trackData] of Object.entries(this.data.tracks)) {\n        if (trackData.actions?.length) {\n          detectedFields[trackName] = this._analyzeFieldsInActions(trackData.actions);\n        }\n      }\n    }\n    \n    return detectedFields;\n  }\n\n  /**\n   * ✅ NOUVEAU: Analyse les champs dans un array d'actions\n   */\n  _analyzeFieldsInActions(actions) {\n    if (!actions || actions.length === 0) {\n      return {\n        availableTimeFields: ['at'],\n        availableValueFields: ['pos'],\n        availableDirectionFields: [],\n        availableDurationFields: [],\n        otherFields: [],\n        sampleAction: null\n      };\n    }\n    \n    const firstAction = actions[0];\n    const allFields = Object.keys(firstAction);\n    \n    return {\n      // Champs de temps (étendus avec conventions buttplug)\n      availableTimeFields: allFields.filter(k => {\n        const lower = k.toLowerCase();\n        return ['at', 't', 'time', 'timestamp', 'ms'].includes(lower);\n      }),\n      \n      // Champs de valeur (étendus avec conventions buttplug)\n      availableValueFields: allFields.filter(k => {\n        const lower = k.toLowerCase();\n        return ['pos', 'p', 'position', 'scalar', 'speed', 'spd', 's', \n                'val', 'v', 'value', 'intensity', 'i'].includes(lower);\n      }),\n      \n      // Champs de direction (étendus avec conventions buttplug)\n      availableDirectionFields: allFields.filter(k => {\n        const lower = k.toLowerCase();\n        return ['clockwise', 'cw', 'direction', 'dir', 'ccw', 'counterclockwise'].includes(lower);\n      }),\n      \n      // Champs de durée (étendus avec conventions buttplug)\n      availableDurationFields: allFields.filter(k => {\n        const lower = k.toLowerCase();\n        return ['duration', 'dur', 'd', 'delay', 'ms', 'millis', 'time'].includes(lower);\n      }),\n      \n      // Autres champs (non reconnus)\n      otherFields: allFields.filter(k => {\n        const lower = k.toLowerCase();\n        const knownFields = [\n          // Time\n          'at', 't', 'time', 'timestamp', 'ms',\n          // Value\n          'pos', 'p', 'position', 'scalar', 'speed', 'spd', 's', \n          'val', 'v', 'value', 'intensity', 'i',\n          // Direction\n          'clockwise', 'cw', 'direction', 'dir', 'ccw', 'counterclockwise',\n          // Duration\n          'duration', 'dur', 'd', 'delay', 'millis'\n        ];\n        return !knownFields.includes(lower);\n      }),\n      \n      sampleAction: firstAction\n    };\n  }\n}\n\nexport default FunscriptManager;","import feather from 'feather-icons';\n\n/**\n * MediaUtils - Utilitaires média centralisés\n * \n * RESPONSABILITÉS :\n * - Détection MIME types\n * - Génération audio silencieux\n * - Génération posters SVG fallback\n * - Extraction métadonnées funscript\n * - Génération thumbnails vidéo\n */\nclass PlaylistUtils {\n  \n  // ============================================================================\n  // SECTION 1: MIME TYPE DETECTION\n  // ============================================================================\n  \n  /**\n   * Détecte le type MIME d'un fichier depuis son URL/extension\n   */\n  static detectMimeType(src) {\n    if (src.startsWith('data:')) {\n      const mimeMatch = src.match(/data:([^;]+)/);\n      return mimeMatch ? mimeMatch[1] : 'video/mp4';\n    }\n    \n    const url = new URL(src, window.location.href);\n    const extension = url.pathname.toLowerCase().split('.').pop();\n    \n    const mimeTypes = {\n      // Video formats\n      'mp4': 'video/mp4', 'webm': 'video/webm', 'ogg': 'video/ogg',\n      'mov': 'video/quicktime', 'avi': 'video/x-msvideo', 'mkv': 'video/x-matroska',\n      'm4v': 'video/mp4', 'ogv': 'video/ogg',\n      \n      // Audio formats  \n      'mp3': 'audio/mpeg', 'wav': 'audio/wav', 'ogg': 'audio/ogg',\n      'm4a': 'audio/mp4', 'aac': 'audio/aac', 'flac': 'audio/flac',\n      'oga': 'audio/ogg',\n      \n      // Streaming formats\n      'm3u8': 'application/x-mpegURL',      // HLS\n      'mpd': 'application/dash+xml',        // DASH\n      'ism': 'application/vnd.ms-sstr+xml', // Smooth Streaming\n      \n      // Autres\n      'json': 'application/json',\n      'funscript': 'application/json'\n    };\n    \n    return mimeTypes[extension] || 'video/mp4';\n  }\n\n  // ============================================================================\n  // SECTION 2: AUDIO GENERATION\n  // ============================================================================\n  \n  /**\n   * Génère un fichier audio silencieux de la durée spécifiée\n   */\n  static generateSilentAudio(duration) {\n    const sampleRate = 44100;\n    const channels = 1;\n    const samples = Math.floor(duration * sampleRate);\n    \n    const buffer = new ArrayBuffer(44 + samples * 2);\n    const view = new DataView(buffer);\n    \n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    // WAV header\n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + samples * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, channels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * 2, true);\n    view.setUint16(32, 2, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, samples * 2, true);\n    \n    // Silent audio data\n    for (let i = 0; i < samples; i++) {\n      view.setInt16(44 + i * 2, 0, true);\n    }\n    \n    const blob = new Blob([buffer], { type: 'audio/wav' });\n    return URL.createObjectURL(blob);\n  }\n\n  // ============================================================================\n  // SECTION 3: SVG POSTER GENERATION\n  // ============================================================================\n  \n  /**\n   * Génère un poster SVG de fallback basé sur le type d'item\n   */\n  static generateSVGPoster(item, index) {\n    let iconName = 'file';\n    const bgColor = '#000000'; // Black background\n    \n    if (item.sources && item.sources.length > 0) {\n      const firstSource = item.sources[0];\n      const srcLower = firstSource.src.toLowerCase();\n      const typeLower = (firstSource.type || '').toLowerCase();\n      \n      if (typeLower.startsWith('audio/') || \n          ['.mp3', '.wav', '.ogg', '.m4a', '.aac'].some(ext => srcLower.includes(ext))) {\n        iconName = 'music'; // ✅ MODIFIÉ: Feather icon name\n      } else if (typeLower.startsWith('video/') || \n                ['.mp4', '.webm', '.mov', '.avi', '.mkv'].some(ext => srcLower.includes(ext))) {\n        iconName = 'film'; // ✅ MODIFIÉ: Feather icon name\n      }\n    } else if (item.funscript) {\n      iconName = 'activity'; // ✅ MODIFIÉ: Feather icon name\n    } else if (item.duration) {\n      iconName = 'clock'; // ✅ MODIFIÉ: Feather icon name\n    }\n\n    // ✅ MODIFIÉ: Generate SVG with real Feather icon\n    const iconSvg = feather.icons[iconName].toSvg({\n      width: 16,\n      height: 16,\n      stroke: 'white',\n      'stroke-width': 2\n    });\n    \n    const svg = `<svg width=\"48\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"48\" height=\"32\" fill=\"${bgColor}\" rx=\"4\"/>\n      <g transform=\"translate(16, 8)\">\n        ${iconSvg}\n      </g>\n    </svg>`;\n    \n    return `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;\n  }\n\n  // ============================================================================\n  // SECTION 4: FUNSCRIPT METADATA EXTRACTION\n  // ============================================================================\n  \n  /**\n   * Extrait la durée d'un funscript depuis ses métadonnées ou actions\n   */\n  static extractFunscriptDuration(funscriptData) {\n    try {\n      let data = funscriptData;\n      \n      if (typeof funscriptData === 'string') {\n        if (funscriptData.startsWith('http') || funscriptData.startsWith('/')) {\n          console.warn('Cannot extract duration from funscript URL synchronously');\n          return 0;\n        }\n        data = JSON.parse(funscriptData);\n      }\n      \n      if (!data || typeof data !== 'object') {\n        return 0;\n      }\n      \n      // Cas 1: Durée explicite dans les métadonnées\n      if (data.duration && typeof data.duration === 'number') {\n        return data.duration;\n      }\n      \n      // Cas 2: Calculer depuis les actions\n      let maxTime = 0;\n      \n      // Chercher dans les actions principales\n      if (data.actions && Array.isArray(data.actions) && data.actions.length > 0) {\n        const lastAction = data.actions[data.actions.length - 1];\n        if (lastAction && typeof lastAction.at === 'number') {\n          maxTime = Math.max(maxTime, lastAction.at);\n        }\n      }\n      \n      // Chercher dans tous les champs qui pourraient contenir des actions\n      for (const [key, value] of Object.entries(data)) {\n        if (Array.isArray(value) && value.length > 0) {\n          const lastItem = value[value.length - 1];\n          if (lastItem && typeof lastItem.at === 'number') {\n            maxTime = Math.max(maxTime, lastItem.at);\n          } else if (lastItem && typeof lastItem.t === 'number') {\n            maxTime = Math.max(maxTime, lastItem.t);\n          } else if (lastItem && typeof lastItem.time === 'number') {\n            maxTime = Math.max(maxTime, lastItem.time);\n          }\n        }\n      }\n      \n      // Convertir ms en secondes et ajouter un petit buffer\n      const durationSeconds = maxTime > 0 ? (maxTime / 1000) + 1 : 0;\n      return durationSeconds;      \n    } catch (error) {\n      return 0;\n    }\n  }\n\n  // ============================================================================\n  // SECTION 5: VIDEO THUMBNAIL GENERATION\n  // ============================================================================\n  \n  /**\n   * Génère un poster depuis une frame vidéo\n   */\n  static async generatePosterFromVideo(videoSrc, timeOffset = 10, maxWidth = 480) {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      video.crossOrigin = 'anonymous';\n      video.muted = true;\n      video.style.display = 'none';\n      document.body.appendChild(video);\n      \n      const cleanup = () => {\n        if (video.parentNode) {\n          video.parentNode.removeChild(video);\n        }\n      };\n      \n      video.onloadedmetadata = () => {\n        // Calculer les dimensions\n        const aspectRatio = video.videoWidth / video.videoHeight;\n        if (video.videoWidth > maxWidth) {\n          canvas.width = maxWidth;\n          canvas.height = maxWidth / aspectRatio;\n        } else {\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n        }\n        \n        // Aller au temps voulu\n        video.currentTime = Math.min(timeOffset, video.duration - 1);\n      };\n      \n      video.onseeked = () => {\n        try {\n          // Capturer la frame\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n          \n          // Générer le data URL base64\n          const dataURL = canvas.toDataURL('image/jpeg', 0.8);\n          \n          if (dataURL && dataURL.length > 1000) {\n            const sizeKB = Math.round(dataURL.length * 0.75 / 1024);\n            cleanup();\n            resolve(dataURL);\n          } else {\n            cleanup();\n            reject(new Error('Failed to generate valid poster'));\n          }\n          \n        } catch (error) {\n          cleanup();\n          reject(error);\n        }\n      };\n      \n      video.onerror = () => {\n        cleanup();\n        reject(new Error('Video loading failed'));\n      };\n      \n      video.src = videoSrc;\n      video.load();\n    });\n  }\n\n  // ============================================================================\n  // SECTION 6: FILE VALIDATION & HELPERS\n  // ============================================================================\n  \n  /**\n   * Vérifie si un fichier est un media supporté\n   */\n  static isSupportedMediaFile(filename) {\n    const extension = filename.toLowerCase().split('.').pop();\n    const supportedExtensions = [\n      // Video\n      'mp4', 'webm', 'mov', 'avi', 'mkv', 'ogv', 'm4v',\n      // Audio  \n      'mp3', 'wav', 'ogg', 'm4a', 'aac', 'flac'\n    ];\n    return supportedExtensions.includes(extension);\n  }\n  \n  /**\n   * Vérifie si un fichier est un funscript\n   */\n  static isFunscriptFile(filename) {\n    const extension = filename.toLowerCase().split('.').pop();\n    return ['funscript', 'json'].includes(extension);\n  }\n  \n  /**\n   * Extrait le nom de fichier depuis une URL\n   */\n  static extractFilename(src) {\n    if (src.startsWith('data:')) {\n      return 'uploaded_file';\n    }\n    \n    try {\n      const url = new URL(src, window.location.href);\n      return url.pathname.split('/').pop().split('.')[0] || 'unnamed';\n    } catch {\n      return 'unnamed';\n    }\n  }\n\n  // ============================================================================\n  // COMPARAISON PROFONDE DE PLAYLISTS\n  // ============================================================================\n\n  /**\n   * Compare deux playlists en profondeur pour détecter les vrais changements\n   * Ignore les propriétés générées automatiquement (_id, poster généré, etc.)\n   * @param {Array} playlist1 - Première playlist à comparer\n   * @param {Array} playlist2 - Deuxième playlist à comparer\n   * @returns {boolean} true si les playlists sont identiques en contenu\n   */\n  static deepComparePlaylist(playlist1, playlist2) {\n    // Cas de base : références identiques\n    if (playlist1 === playlist2) return true;\n    \n    // Cas de base : null/undefined\n    if (!playlist1 || !playlist2) return playlist1 === playlist2;\n    \n    // Longueurs différentes\n    if (playlist1.length !== playlist2.length) return false;\n    \n    // Comparaison item par item\n    for (let i = 0; i < playlist1.length; i++) {\n      if (!PlaylistUtils.deepComparePlaylistItem(playlist1[i], playlist2[i])) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Compare deux items de playlist en profondeur\n   * Ignore les propriétés générées automatiquement\n   * @param {Object} item1 - Premier item à comparer\n   * @param {Object} item2 - Deuxième item à comparer\n   * @returns {boolean} true si les items sont identiques en contenu\n   */\n  static deepComparePlaylistItem(item1, item2) {\n    // Cas de base : références identiques\n    if (item1 === item2) return true;\n    \n    // Cas de base : null/undefined\n    if (!item1 || !item2) return item1 === item2;\n    \n    // Propriétés à ignorer (générées automatiquement)\n    const ignoredProps = new Set([\n      '_id',           // ID généré automatiquement\n      '_generatedPoster', // Flag de poster généré\n      'poster'         // Poster peut être généré automatiquement\n    ]);\n    \n    // Récupérer toutes les clés des deux objets\n    const keys1 = Object.keys(item1).filter(key => !ignoredProps.has(key));\n    const keys2 = Object.keys(item2).filter(key => !ignoredProps.has(key));\n    \n    // Nombre de propriétés différent\n    if (keys1.length !== keys2.length) return false;\n    \n    // Vérifier chaque propriété\n    for (const key of keys1) {\n      if (!keys2.includes(key)) return false;\n      \n      const val1 = item1[key];\n      const val2 = item2[key];\n      \n      // Comparaison récursive pour les objets/arrays\n      if (typeof val1 === 'object' && typeof val2 === 'object') {\n        if (Array.isArray(val1) && Array.isArray(val2)) {\n          // Comparaison d'arrays\n          if (!PlaylistUtils.deepCompareArray(val1, val2)) return false;\n        } else if (Array.isArray(val1) || Array.isArray(val2)) {\n          // Un array et un objet : différents\n          return false;\n        } else {\n          // Comparaison d'objets\n          if (!PlaylistUtils.deepCompareObject(val1, val2)) return false;\n        }\n      } else {\n        // Comparaison de primitives\n        if (val1 !== val2) return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Compare deux arrays en profondeur\n   * @param {Array} arr1 - Premier array\n   * @param {Array} arr2 - Deuxième array\n   * @returns {boolean} true si identiques\n   */\n  static deepCompareArray(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    \n    for (let i = 0; i < arr1.length; i++) {\n      const val1 = arr1[i];\n      const val2 = arr2[i];\n      \n      if (typeof val1 === 'object' && typeof val2 === 'object') {\n        if (Array.isArray(val1) && Array.isArray(val2)) {\n          if (!PlaylistUtils.deepCompareArray(val1, val2)) return false;\n        } else if (!Array.isArray(val1) && !Array.isArray(val2)) {\n          if (!PlaylistUtils.deepCompareObject(val1, val2)) return false;\n        } else {\n          return false; // Un array et un objet\n        }\n      } else if (val1 !== val2) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Compare deux objets en profondeur\n   * @param {Object} obj1 - Premier objet\n   * @param {Object} obj2 - Deuxième objet\n   * @returns {boolean} true si identiques\n   */\n  static deepCompareObject(obj1, obj2) {\n    if (!obj1 || !obj2) return obj1 === obj2;\n    \n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    \n    if (keys1.length !== keys2.length) return false;\n    \n    for (const key of keys1) {\n      if (!keys2.includes(key)) return false;\n      \n      const val1 = obj1[key];\n      const val2 = obj2[key];\n      \n      if (typeof val1 === 'object' && typeof val2 === 'object') {\n        if (Array.isArray(val1) && Array.isArray(val2)) {\n          if (!PlaylistUtils.deepCompareArray(val1, val2)) return false;\n        } else if (!Array.isArray(val1) && !Array.isArray(val2)) {\n          if (!PlaylistUtils.deepCompareObject(val1, val2)) return false;\n        } else {\n          return false;\n        }\n      } else if (val1 !== val2) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n}\n\nexport default PlaylistUtils;","import PlaylistUtils from './PlaylistUtils';\n\n/**\n * PlaylistManager - ✅ REFACTORISÉ: Status notifications uniformisées\n */\nclass PlaylistManager {\n  constructor(notify) {\n    this.notify = notify;\n    \n    // État centralisé\n    this.currentIndex = -1;\n    this.items = [];\n    this.originalPlaylist = [];\n    \n    // État de lecture (synchronisé avec MediaPlayer)\n    this.isPlaying = false;\n    this.currentTime = 0;\n    this.duration = 0;\n  }\n\n  // ============================================================================\n  // SECTION 1: TRAITEMENT PLAYLIST\n  // ============================================================================\n\n  /**\n   * Point d'entrée principal enrichi avec notifications status\n   */\n  loadPlaylist = async (playlist) => {\n    if (!playlist || playlist.length === 0) {\n      this._resetPlaylist();\n      \n      this.notify?.('status:playlist', { message: 'No playlist to load', type: 'info' });\n      this.notify?.('playlist:loaded', { items: [], originalPlaylist: [], totalItems: 0 });\n      \n      return [];\n    }\n\n    try {\n      // ✅ NOUVEAU: Comparaison intelligente du contenu\n      if (PlaylistUtils.deepComparePlaylist(this.originalPlaylist, playlist)) {\n        this.notify?.('status:playlist', { \n          message: 'Playlist content identical, keeping current state', \n          type: 'log' \n        });\n        return this.items; // Retourne la référence existante\n      }\n\n      this.notify?.('status:playlist', { \n        message: `Playlist content changed, processing ${playlist.length} items...`, \n        type: 'processing' \n      });\n      \n      // 1. Sauvegarder + traitement\n      this.originalPlaylist = [...playlist];\n      const processedItems = await this.processPlaylist(playlist);\n      \n      // ✅ NOUVELLE RÉFÉRENCE: Seulement quand le contenu change vraiment\n      this.items = processedItems;\n      this.currentIndex = processedItems.length > 0 ? 0 : -1;\n      \n      this.notify?.('status:playlist', { \n        message: `Playlist loaded: ${processedItems.length} items processed`, \n        type: 'success' \n      });\n      \n      this.notify?.('playlist:loaded', { \n        items: this.items, \n        originalPlaylist: this.originalPlaylist, \n        totalItems: this.items.length \n      });\n      \n      return this.items;\n      \n    } catch (error) {\n      this.notify?.('status:playlist', { \n        message: 'Playlist loading failed', \n        type: 'error', \n        error: error.message \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Pipeline complet de traitement playlist\n   */\n  processPlaylist = async (playlist) => {\n    this.notify?.('status:playlist', { message: `Starting playlist processing pipeline...`, type: 'log' });\n    \n    // 1. Filtrer les items valides\n    const validItems = this.filterValidItems(playlist);\n    this.notify?.('status:playlist', { message: `Filtered to ${validItems.length} valid items`, type: 'log' });\n    \n    // 2. Marquer les types originaux\n    const withTypes = this.markItemTypes(validItems);\n    this.notify?.('status:playlist', { message: `Item types marked`, type: 'log' });\n    \n    // 3. Générer fallbacks SVG\n    const withFallbacks = this.addFallbackPosters(withTypes);\n    this.notify?.('status:playlist', { message: `Fallback posters generated`, type: 'log' });\n    \n    // 4. Traiter les cas sans media (funscript seul)\n    const withMedia = this.processNoMediaItems(withFallbacks);\n    this.notify?.('status:playlist', { message: `Silent audio generated for haptic-only items`, type: 'log' });\n    \n    // 5. Normaliser les sources\n    const normalizedPlaylist = this.normalizeSources(withMedia);\n    this.notify?.('status:playlist', { message: `Source normalization complete`, type: 'log' });\n    \n    return normalizedPlaylist;\n  }\n\n  /**\n   * Filtre les items de playlist valides\n   */\n  filterValidItems = (playlist) => {\n    this.notify?.('status:playlist', { message: `Filtering ${playlist.length} items for validity...`, type: 'log' });\n\n    const validItems = playlist.filter((item, index) => {\n      // Valide: A des sources (media)\n      if (item.sources && item.sources.length > 0) {\n        return true;\n      }\n      \n      // Valide: A un funscript (mode haptic pur)\n      if (item.funscript) {\n        return true;\n      }\n      \n      // Invalide: Timeline pur (duration seule sans media ni funscript)\n      if (item.duration && !item.sources && !item.funscript) {\n        this.notify?.('status:playlist', { message: `Filtered out timeline-only item ${index + 1}`, type: 'log' });\n        return false;\n      }\n      \n      // Invalide: Item vide\n      this.notify?.('status:playlist', { message: `Filtered out empty item ${index + 1}`, type: 'log' });\n      return false;\n    });\n\n    const filteredCount = playlist.length - validItems.length;\n    if (filteredCount > 0) {\n      this.notify?.('status:playlist', { message: `Filtered out ${filteredCount} invalid items`, type: 'info' });\n    }\n\n    return validItems;\n  }\n\n  /**\n   * Marquer les types avant enrichissement\n   */\n  markItemTypes = (playlist) => {\n    this.notify?.('status:playlist', { message: `Analyzing item types...`, type: 'log' });\n\n    return playlist.map((item, index) => {\n      let itemType = 'unknown';\n      \n      if (item.sources && item.sources.length > 0) {\n        const firstSource = item.sources[0];\n        const typeLower = (firstSource.type || PlaylistUtils.detectMimeType(firstSource.src)).toLowerCase();\n        \n        if (typeLower.startsWith('video/')) {\n          itemType = item.funscript ? 'video_haptic' : 'video';\n        } else if (typeLower.startsWith('audio/')) {\n          itemType = item.funscript ? 'audio_haptic' : 'audio';\n        } else {\n          itemType = 'media'; // HLS, DASH, etc.\n        }\n      } else if (item.funscript) {\n        itemType = 'haptic';\n      }\n      \n      this.notify?.('status:playlist', { message: `Item ${index + 1}: ${itemType}`, type: 'log' });\n      \n      return {\n        ...item,\n        item_type: itemType\n      };\n    });\n  }\n\n  /**\n   * Génère des sources audio silencieuses pour items sans media\n   */\n  processNoMediaItems = (playlist) => {\n    this.notify?.('status:playlist', { message: `Processing haptic-only items...`, type: 'log' });\n\n    let processedCount = 0;\n\n    const result = playlist.map((item, index) => {\n      // Si sources déjà présentes, ne pas toucher\n      if (item.sources && item.sources.length > 0) {\n        return item;\n      }\n      \n      // Seul cas restant: Funscript seul\n      if (item.funscript) {\n        try {\n          const funscriptDuration = PlaylistUtils.extractFunscriptDuration(item.funscript);\n          if (funscriptDuration > 0) {\n            const silentAudioUrl = PlaylistUtils.generateSilentAudio(funscriptDuration);\n            processedCount++;\n            this.notify?.('status:playlist', { message: `Generated ${funscriptDuration.toFixed(1)}s silent audio for item ${index + 1}`, type: 'log' });\n            return {\n              ...item,\n              sources: [{ src: silentAudioUrl, type: 'audio/wav' }]\n            };\n          }\n        } catch (error) {\n          this.notify?.('status:playlist', { message: `Failed to process funscript for item ${index + 1}: ${error.message}`, type: 'error' });\n        }\n      }\n      \n      this.notify?.('status:playlist', { message: `Unexpected item without sources or funscript at index ${index}`, type: 'log' });\n      return item;\n    });\n\n    if (processedCount > 0) {\n      this.notify?.('status:playlist', { message: `Generated silent audio for ${processedCount} haptic-only items`, type: 'info' });\n    }\n\n    return result;\n  }\n\n  /**\n   * Normalise les sources via PlaylistUtils\n   */\n  normalizeSources = (playlist) => {\n    this.notify?.('status:playlist', { message: `Normalizing source MIME types...`, type: 'log' });\n\n    return playlist.map(item => {\n      if (!item.sources || item.sources.length === 0) {\n        return item;\n      }\n      \n      const normalizedSources = item.sources.map(source => ({\n        ...source,\n        type: source.type || PlaylistUtils.detectMimeType(source.src)\n      }));\n      \n      return {\n        ...item,\n        sources: normalizedSources\n      };\n    });\n  }\n\n  /**\n   * Génère des fallbacks SVG via PlaylistUtils\n   */\n  addFallbackPosters = (playlist) => {\n    this.notify?.('status:playlist', { message: `Generating fallback posters...`, type: 'log' });\n\n    let generatedCount = 0;\n\n    const result = playlist.map((item, index) => {\n      // Skip si poster déjà présent\n      if (item.poster) return item;\n      \n      generatedCount++;\n      return {\n        ...item,\n        poster: PlaylistUtils.generateSVGPoster(item, index),\n        _generatedPoster: true\n      };\n    });\n\n    if (generatedCount > 0) {\n      this.notify?.('status:playlist', { message: `Generated ${generatedCount} SVG fallback posters`, type: 'log' });\n    }\n\n    return result;\n  }\n\n  // ============================================================================\n  // SECTION 2: NAVIGATION\n  // ============================================================================\n\n  /**\n   * Navigation vers l'item suivant\n   */\n  next = () => {\n    if (this.items.length === 0) {\n      this.notify?.('status:playlist', { message: 'Cannot go next: empty playlist', type: 'info' });\n      return false;\n    }\n    \n    const nextIndex = this.currentIndex + 1;\n    if (nextIndex >= this.items.length) {\n      this.notify?.('status:playlist', { message: 'Cannot go next: end of playlist reached', type: 'info' });\n      return false;\n    }\n    \n    return this.goTo(nextIndex);\n  }\n\n  /**\n   * Navigation vers l'item précédent\n   */\n  previous = () => {\n    if (this.items.length === 0) {\n      this.notify?.('status:playlist', { message: 'Cannot go previous: empty playlist', type: 'info' });\n      return false;\n    }\n    \n    const prevIndex = this.currentIndex - 1;\n    if (prevIndex < 0) {\n      this.notify?.('status:playlist', { message: 'Cannot go previous: beginning of playlist reached', type: 'info' });\n      return false;\n    }\n    \n    return this.goTo(prevIndex);\n  }\n\n  /**\n   * Navigation vers un item spécifique\n   */\n  goTo = (index) => {\n    if (this.items.length === 0) {\n      this.notify?.('status:playlist', { message: 'Cannot navigate: empty playlist', type: 'error' });\n      return false;\n    }\n    \n    if (index < 0 || index >= this.items.length) {\n      this.notify?.('status:playlist', { message: `Cannot navigate to index ${index}: out of bounds`, type: 'error' });\n      return false;\n    }\n    \n    const previousIndex = this.currentIndex;\n    this.currentIndex = index;\n    \n    const currentItem = this.items[index];\n    const itemName = currentItem?.name || `Item ${index + 1}`;\n    \n    this.notify?.('status:playlist', { message: `Playing: ${itemName} (${index + 1}/${this.items.length})`, type: 'success' });\n    \n    this.notify?.('playlist:itemChanged', { \n      index, \n      item: currentItem ? { ...currentItem } : null, \n      previousIndex,\n      hasNext: this.canNext(),\n      hasPrevious: this.canPrevious()\n    });\n    \n    return true;\n  }\n\n  /**\n   * Vérifie si on peut aller au suivant\n   */\n  canNext = () => {\n    return this.items.length > 0 && this.currentIndex < this.items.length - 1;\n  }\n\n  /**\n   * Vérifie si on peut aller au précédent\n   */\n  canPrevious = () => {\n    return this.items.length > 0 && this.currentIndex > 0;\n  }\n\n  // ============================================================================\n  // SECTION 3: GETTERS D'ÉTAT\n  // ============================================================================\n\n  getCurrentIndex = () => this.currentIndex\n\n  getCurrentItem = () => {\n    if (this.currentIndex >= 0 && this.currentIndex < this.items.length) {\n      return this.items[this.currentIndex];\n    }\n    return null;\n  }\n\n  getOriginalPlaylist = () => [...this.originalPlaylist]\n\n  getPlaylistInfo = () => ({\n    currentIndex: this.currentIndex,\n    totalItems: this.items.length,\n    hasPlaylist: this.items.length > 0,\n    canNext: this.canNext(),\n    canPrevious: this.canPrevious(),\n    isPlaying: this.isPlaying,\n    currentTime: this.currentTime,\n    duration: this.duration\n  })\n\n  // ============================================================================\n  // SECTION 4: SYNCHRONISATION PLAYBACK\n  // ============================================================================\n\n  /**\n   * Synchronise l'état de lecture avec MediaPlayer\n   */\n  updatePlaybackState = (isPlaying, currentTime = null, duration = null) => {\n    let hasChanged = false;\n    \n    if (this.isPlaying !== isPlaying) {\n      this.isPlaying = isPlaying;\n      hasChanged = true;\n    }\n    \n    if (currentTime !== null && this.currentTime !== currentTime) {\n      this.currentTime = currentTime;\n      hasChanged = true;\n    }\n    \n    if (duration !== null && this.duration !== duration) {\n      this.duration = duration;\n      hasChanged = true;\n    }\n    \n    if (hasChanged) {\n      // Log détaillé pour debug playback\n      this.notify?.('status:playlist', { message: `Playback state: ${isPlaying ? 'playing' : 'paused'} ${currentTime?.toFixed(1)}s/${duration?.toFixed(1)}s`, type: 'log' });\n      \n      this.notify?.('playlist:playbackChanged', {\n        isPlaying: this.isPlaying,\n        currentTime: this.currentTime,\n        duration: this.duration,\n        currentIndex: this.currentIndex,\n        currentItem: this.getCurrentItem(),\n        playlistInfo: this.getPlaylistInfo()\n      });\n    }\n  }\n\n  updateCurrentItemDuration = (realDuration) => {\n    const currentItem = this.getCurrentItem();\n    if (!currentItem) return false;\n    \n    const oldDuration = currentItem.duration;\n    currentItem.duration = realDuration;\n    \n    this.notify?.('status:playlist', { message: `Duration corrected: ${oldDuration?.toFixed(1) || 'unknown'}s → ${realDuration.toFixed(1)}s`, type: 'log' });\n    \n    this.notify?.('playlist:itemUpdated', { \n      index: this.currentIndex, \n      item: { ...currentItem }, \n      change: { \n        field: 'duration', \n        oldValue: oldDuration, \n        newValue: realDuration \n      } \n    });\n    \n    return true;\n  }\n\n  // ============================================================================\n  // SECTION 5: RESET & CLEANUP\n  // ============================================================================\n\n  _resetPlaylist = () => {\n    this.currentIndex = -1;\n    this.items = [];\n    this.originalPlaylist = [];\n    this.isPlaying = false;\n    this.currentTime = 0;\n    this.duration = 0;\n  }\n\n  reset = () => {\n    this._resetPlaylist();\n    this.notify?.('status:playlist', { message: 'Playlist manager reset', type: 'info' });\n  }\n\n  cleanup = () => {\n    this._resetPlaylist();\n    this.notify?.('status:playlist', { message: 'Playlist manager cleanup completed', type: 'log' });\n  }\n\n  // ============================================================================\n  // SECTION 6: DEBUG & STATS\n  // ============================================================================\n\n  getStats = () => ({\n    totalItems: this.items.length,\n    currentIndex: this.currentIndex,\n    isPlaying: this.isPlaying,\n    hasGeneratedPosters: this.items.filter(item => item._generatedPoster).length,\n    processingComplete: true\n  })\n\n  getDebugInfo = () => {\n    const stats = this.getStats();\n    \n    this.notify?.('status:playlist', { message: `Debug info requested: ${stats.totalItems} items, index ${stats.currentIndex}, ${stats.hasGeneratedPosters} generated posters`, type: 'log' });\n\n    return {\n      state: {\n        currentIndex: this.currentIndex,\n        totalItems: this.items.length,\n        isPlaying: this.isPlaying,\n        currentTime: this.currentTime,\n        duration: this.duration\n      },\n      currentItem: this.getCurrentItem(),\n      navigation: {\n        canNext: this.canNext(),\n        canPrevious: this.canPrevious()\n      },\n      stats\n    };\n  }\n}\n\nexport default PlaylistManager;","/**\n * LoggingManager - Gestionnaire centralisé des logs\n * \n * RESPONSABILITÉS:\n * - Centralisation de tous les logs de l'application\n * - Formatage et persistance des messages de debug\n * - Interface unifiée pour les composants UI\n * - Rotation automatique des logs pour éviter les fuites mémoire\n * - Support console logging configurable\n * - Export/import des logs\n * \n * ARCHITECTURE:\n * - Manager autonome (pas de dépendances vers autres managers)\n * - Interface simple et cohérente avec les autres managers\n * - Optimisé pour les performances (pas de reformat systématique)\n * - Extensible (niveaux, filtres, etc.)\n */\n\nclass LoggingManager {\n  constructor(notify) {\n    // ============================================================================\n    // CONFIGURATION\n    // ============================================================================\n    this.notify=notify\n    this.enableConsoleLogging = process.env.NODE_ENV !== 'production';\n    this.maxDebugLogs = 1000;\n    this.sessionStart = performance.now();\n    \n    // ============================================================================\n    // STOCKAGE DES LOGS\n    // ============================================================================\n    this.debugLogs = [];\n    \n    // ============================================================================\n    // TYPES ET EMOJIS\n    // ============================================================================\n    this.statusEmojis = {\n      'log': '📝',\n      'info': 'ℹ️',\n      'success': '✅',\n      'warning': '⚠️',\n      'error': '❌',\n      'processing': '⏳',\n      'device': '🔌',\n      'funscript': '📊',\n      'playlist': '📋',\n      'media': '🎬'\n    };\n  }\n  \n  \n  // ============================================================================\n  // CRÉATION ET FORMATAGE DES MESSAGES\n  // ============================================================================\n  \n  /**\n   * Crée un objet message structuré\n   * @param {string} event - Nom de l'événement (ex: 'status:core', 'buttplug:device')\n   * @param {object} data - Données du message { message, type, error }\n   * @returns {object} Message structuré avec metadata\n   */\n  createMessage(event, data = {}) {\n    return {\n      timestamp: new Date().toISOString(),\n      relativeTime: ((performance.now() - this.sessionStart) / 1000).toFixed(3),\n      source: this._extractSource(event),\n      type: data.type || 'log',\n      message: data.message || '',\n      error: data.error || null,\n      event,\n      id: this._generateMessageId()\n    };\n  }\n  \n  /**\n   * ✅ CORRIGÉ: Formate un message pour l'affichage console avec type toujours visible\n   * @param {object} messageObj - Message structuré\n   * @param {boolean} includeTimestamp - Inclure le timestamp relatif\n   * @returns {string} Message formaté\n   */\n  formatMessage(messageObj, includeTimestamp = false) {\n    const emoji = this.statusEmojis[messageObj.type] || '📝';\n    const time = includeTimestamp ? `[${messageObj.relativeTime.padStart(8)}s] ` : '';\n    const source = `[${messageObj.source.padEnd(13)}]`;\n    \n    // ✅ CORRIGÉ: Toujours afficher un type, [INFO] par défaut pour 'log'\n    const typeMap = {\n      'log': 'LOG',\n      'info': 'INFO', \n      'success': 'SUCCESS',\n      'warning': 'WARNING',\n      'error': 'ERROR',\n      'processing': 'PROCESSING'\n    };\n    const typeLabel = typeMap[messageObj.type] || messageObj.type.toUpperCase();\n    const type = `[${typeLabel.padEnd(13)}]`; // Alignement sur 11 chars pour [PROCESSING]\n    \n    const message = messageObj.message;\n    const error = messageObj.error ? ` (ERROR: ${messageObj.error})` : '';\n    \n    return `${emoji} ${time}${source} ${type} ${message}${error}`;\n  }\n  \n  // ============================================================================\n  // AJOUT ET GESTION DES LOGS\n  // ============================================================================\n  \n  addInitialSessionMessage(){\n    this.notify('status:core', {\n      message: 'FunPlayerCore session started',\n      type: 'info'\n    });\n  }\n\n  /**\n   * Ajoute un message de log (interface principale)\n   * @param {string} event - Nom de l'événement\n   * @param {object} data - Données du message\n   */\n  log(event, data = {}) {\n    // 1. Créer le message structuré\n    const messageObj = this.createMessage(event, data);\n    \n    // 2. Stockage avec rotation automatique\n    this._addMessage(messageObj);\n    \n    // 3. Console logging si activé\n    if (this.enableConsoleLogging) {\n      this._outputToConsole(messageObj);\n    }\n\n    this.notify?.(\"logging:new-message\",{messageObj:messageObj})\n    \n    return messageObj;\n  }\n  \n  // ============================================================================\n  // RÉCUPÉRATION DES LOGS\n  // ============================================================================\n  \n  /**\n   * Récupère tous les logs bruts\n   * @returns {Array} Copie des logs pour éviter les mutations\n   */\n  getLogs() {\n    return [...this.debugLogs];\n  }\n  \n  /**\n   * Récupère les logs formatés pour l'affichage\n   * @returns {string} Logs formatés avec timestamps\n   */\n  getFormattedLogs() {\n    return this.debugLogs\n      .map(msg => this.formatMessage(msg, true))\n      .join('\\n');\n  }\n  \n  /**\n   * Filtre les logs par critères\n   * @param {object} filters - { source, type, since, until }\n   * @returns {Array} Logs filtrés\n   */\n  getFilteredLogs(filters = {}) {\n    return this.debugLogs.filter(log => {\n      if (filters.source && log.source !== filters.source) return false;\n      if (filters.type && log.type !== filters.type) return false;\n      if (filters.since && new Date(log.timestamp) < filters.since) return false;\n      if (filters.until && new Date(log.timestamp) > filters.until) return false;\n      return true;\n    });\n  }\n  \n  // ============================================================================\n  // GESTION DES LOGS\n  // ============================================================================\n  \n  /**\n   * Vide tous les logs\n   */\n  clear() {\n    this.debugLogs = [];\n    this.sessionStart = performance.now();\n    \n    // Ajouter le message initial\n    this.addInitialSessionMessage();\n    \n    // Notifier les listeners\n    this.notify('status:logging', {message:\"Logs cleared\", type:'info'});\n  }\n  \n  /**\n   * Génère le contenu complet des logs pour export\n   * @returns {string} Contenu formaté pour fichier\n   */\n  generateExportContent() {\n    const header = `FunPlayer Debug Log\nGenerated: ${new Date().toISOString()}\nTotal entries: ${this.debugLogs.length}\nSession duration: ${((performance.now() - this.sessionStart) / 1000).toFixed(1)}s\nConsole logging: ${this.enableConsoleLogging ? 'enabled' : 'disabled'}\n\n${'='.repeat(80)}\n\n`;\n    \n    const content = this.debugLogs\n      .map(msg => this.formatMessage(msg, true))\n      .join('\\n');\n    \n    return header + content;\n  }\n  \n  // ============================================================================\n  // CONFIGURATION\n  // ============================================================================\n  \n  /**\n   * Active/désactive le logging console\n   * @param {boolean} enabled \n   */\n  setConsoleLogging(enabled) {\n    this.enableConsoleLogging = enabled;\n    this.notify?.('status:config', { \n      message: `Console logging ${enabled ? 'enabled' : 'disabled'}`,\n      type: 'info'\n    });\n  }\n  \n  getConsoleLogging() {\n    return this.enableConsoleLogging;\n  }\n  \n  /**\n   * Configure la limite de logs\n   * @param {number} maxLogs \n   */\n  setMaxLogs(maxLogs) {\n    this.maxDebugLogs = Math.max(100, maxLogs); // Minimum 100\n    this._rotateLogsIfNeeded();\n    \n    this.notify?.('logging:config', { \n      message: `Max logs set to ${this.maxDebugLogs}`,\n      type: 'info'\n    });\n  }\n  \n  getMaxLogs() {\n    return this.maxDebugLogs;\n  }\n  \n  // ============================================================================\n  // MÉTHODES PRIVÉES\n  // ============================================================================\n  \n  _addMessage(messageObj) {\n    this.debugLogs.push(messageObj);\n    this._rotateLogsIfNeeded();\n  }\n  \n  _rotateLogsIfNeeded() {\n    if (this.debugLogs.length > this.maxDebugLogs) {\n      this.debugLogs = this.debugLogs.slice(-this.maxDebugLogs);\n    }\n  }\n  \n  _extractSource(event) {\n    return event.split(':')[1] || event.split(':')[0] || 'unknown';\n  }\n  \n  _generateMessageId() {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  _outputToConsole(messageObj) {\n    const formattedMsg = this.formatMessage(messageObj);\n    \n    switch (messageObj.type) {\n      case 'error':\n        console.error(formattedMsg, messageObj.error || '');\n        break;\n      case 'warning':\n        console.warn(formattedMsg);\n        break;\n      case 'info':\n      case 'success':\n        console.info(formattedMsg);\n        break;\n      default:\n        console.log(formattedMsg);\n    }\n  }\n}\n\nexport default LoggingManager;","import ButtPlugManager from './ButtPlugManager';\nimport FunscriptManager from './FunscriptManager';\nimport PlaylistManager from './PlaylistManager';\nimport LoggingManager from './LoggingManager';\n\n/**\n * FunPlayerCore - ✅ REFACTORISÉ: Hub business logic central\n * \n * - Hors cycle de vie du composant React, survit au remounts\n * - Centralise tous les managers + logique business\n * - ✅ NOUVEAU: handleEvent() central pour toute la logique business\n * - ✅ NOUVEAU: État business centralisé (isReady, status, error)\n * - Lazy initialization des managers via getters\n * - notify() public direct passé aux managers\n * - API simple et prévisible partout dans l'app\n */\n\nclass FunPlayerCore {\n  static instance = null;\n  \n  constructor() {\n    \n      // ✅ NOUVEAU: Configuration logging\n    this.enableConsoleLogging = process.env.NODE_ENV !== 'production';\n    this.debugLogs = [];\n    this.maxDebugLogs = 1000;\n    this.sessionStart = performance.now();\n\n    // ============================================================================\n    // INSTANCES PRIVÉES - Lazy initialization via getters (INCHANGÉ)\n    // ============================================================================\n    this._buttplug = null;\n    this._funscript = null;\n    this._playlist = null;\n    this._logging = null;\n    \n    // ============================================================================\n    // ÉTAT BUSINESS CENTRALISÉ (INCHANGÉ)\n    // ============================================================================\n    this.status = 'idle';\n    this.error = null;\n    this.isReady = false;\n    \n    // ============================================================================\n    // SYSTÈME D'ÉVÉNEMENTS (INCHANGÉ)\n    // ============================================================================\n    this.listeners = new Set();\n    this.addListener(this.handleEvent)\n\n    // ✅ MODIFIÉ: Log de session via LoggingManager\n    this.logging.addInitialSessionMessage();\n  }\n\n  // ============================================================================\n  // BUS D'ÉVÉNEMENTS (INCHANGÉ)\n  // ============================================================================\n  \n  addListener(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n  \n  notify = (event, data) => {\n    this.listeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        // ✅ MODIFIÉ: Respect du flag logging\n        if (this.enableConsoleLogging) {\n          console.error('Core: Listener error:', error);\n        }\n      }\n    });\n  }\n\n  handleEvent = (event, data) => {\n    // ✅ NOUVEAU: Handler unifié de status avec source dans l'événement\n    if (event.startsWith('status:')) {\n      this._handleStatusEvent(event, data);\n    } else if (event.startsWith('buttplug:')) {\n      this._handleButtplugEvent(event, data);\n    } else if (event.startsWith('channel:')) {\n      this._handleChannelEvent(event, data);\n    } else if (event.startsWith('actuator:')) {\n      this._handleActuatorEvent(event, data);\n    } else if (event.startsWith('funscript:')) {\n      this._handleFunscriptEvent(event, data);\n    } else if (event.startsWith('playlist:')) {\n      this._handlePlaylistEvent(event, data);\n    } else if (event.startsWith('media:')) {\n      this._handleMediaEvent(event, data);\n    } else if (event.startsWith('core:')) {\n      this._handleCoreEvent(event, data);\n    } else if (event.startsWith('logging:')) {\n      this._handleLoggingEvent(event, data);\n    } else if (event.startsWith('component:')) {\n      this._handleComponentEvent(event, data);\n    } else {\n      if (this.enableConsoleLogging) {\n        console.warn(`FunPlayerCore: Unknown event type ${event}`);\n      }\n    }\n  }\n  \n  // ============================================================================\n  // GETTERS DECLARATIFS VERS LES MANAGERS (INCHANGÉ)\n  // ============================================================================\n  \n  get buttplug() {\n    if (!this._buttplug) {\n      this._buttplug = new ButtPlugManager(this.notify);\n    }\n    return this._buttplug;\n  }\n  \n  get funscript() {\n    if (!this._funscript) {\n      this._funscript = new FunscriptManager(this.notify);\n    }\n    return this._funscript;\n  }\n\n  get playlist() {\n    if (!this._playlist) {\n      this._playlist = new PlaylistManager(this.notify);\n    }\n    return this._playlist;\n  }\n\n    get logging() {\n    if (!this._logging) {\n      this._logging = new LoggingManager(this.notify);\n    }\n    return this._logging;\n  }\n\n  // ============================================================================\n  // EVENT HANDLERS MÉTIER (SIMPLIFIÉS)\n  // ============================================================================\n\n  /**\n   * ✅ Handler unifié pour tous les status avec extraction automatique de la source\n   */\n  _handleStatusEvent = (event, data) => {\n    // 1. Créer l'objet message structuré\n    const messageObj = this.logging.log(event, data);\n    \n    // 4. Gestion des événements système\n    switch (messageObj.type) {\n      case 'log':\n        break;\n      case 'error':\n        this.setError(messageObj);\n        break;\n      case 'success':\n      case 'info':\n      case 'processing':\n      default:\n        this.setStatus(messageObj);\n        break;\n    }\n  }\n\n  /**\n   * ✅ CORRIGÉ: Handler d'événements core avec messageObj structuré\n   */\n  _handleCoreEvent = (event, data) => {\n    switch (event) {\n      case 'core:autoConnect':\n        if (data.success) {\n          this.setStatus({\n            source: 'core',\n            message: `Auto-connected to ${data.device.name} (${data.mapResult.mapped}/${data.mapResult.total} channels mapped)`,\n            type: 'success'\n          });\n        } else {\n          this.setError({\n            source: 'core',\n            message: 'Auto-connect failed',\n            type: 'error',\n            error: data.error\n          });\n        }\n        break;\n\n      case 'core:autoMap':\n        this.setStatus({\n          source: 'core',\n          message: `Auto-mapped ${data.result.mapped} new channels`,\n          type: 'success'\n        });\n        break;\n    }\n  }\n\n  /**\n   * ✅ CORRIGÉ: Handler d'événements buttplug avec messageObj structuré\n   */\n  _handleButtplugEvent = (event, data) => {\n    switch (event) {\n      case 'buttplug:connection':\n        this.setStatus({\n          source: 'buttplug',\n          message: data.connected ? 'Connected to Intiface' : 'Disconnected from Intiface',\n          type: data.connected ? 'success' : 'info'\n        });\n        break;\n        \n      case 'buttplug:device':\n        this.setStatus({\n          source: 'buttplug',\n          message: data.device ? `Device selected: ${data.device.name}` : 'No device selected',\n          type: data.device ? 'success' : 'info'\n        });\n        \n        if (data.device) {\n          setTimeout(() => {\n            const mapResult = this.autoMapChannels(); // ✅ Utilise le nouvel autoMap intelligent\n          }, 100);\n        }\n        break;\n        \n      case 'buttplug:error':\n        this.setError({\n          source: 'buttplug',\n          message: 'Device error',\n          type: 'error',\n          error: data.error\n        });\n        break;\n    }\n  }\n\n  /**\n   * ✅ CORRIGÉ: Handler d'événements funscript (si utilisé)\n   */\n  _handleFunscriptEvent = (event, data) => {\n    switch (event) {\n      case 'funscript:load':\n        setTimeout(() => {\n          const mapResult = this.autoMapChannels(); // ✅ Utilise le nouvel autoMap intelligent\n        }, 100);\n        break;\n        \n      case 'funscript:channels':        \n      case 'funscript:options':\n      case 'funscript:globalOffset':\n        break;\n    }\n  }\n\n  /**\n   * ✅ CORRIGÉ: Handler d'événements playlist avec messageObj structuré\n   */\n  _handlePlaylistEvent = (event, data) => {\n    switch (event) {\n      case 'playlist:loaded':\n        this.isReady = false;\n        \n        // ✅ Précharger automatiquement le funscript du premier item\n        if (data.items && data.items.length > 0) {\n          const firstItem = data.items[0];\n          \n          this.notify?.('status:core', { \n            message: `Preloading funscript for first item: ${firstItem.name || 'Untitled'}`, \n            type: 'log' \n          });\n          \n          // Charger le funscript du premier item\n          this.funscript.loadFromPlaylistItem(firstItem)\n            .then(() => {\n              this.notify?.('status:core', { \n                message: `First item ready: ${firstItem.name || 'Untitled'}`, \n                type: 'success' \n              });\n              this.setReady(true);\n            })\n            .catch(error => {\n              this.notify?.('status:core', { \n                message: `Failed to preload funscript for first item`, \n                type: 'error', \n                error: error.message \n              });\n              // Toujours marquer comme prêt même si pas de funscript\n              this.setReady(true);\n            });\n        } else {\n          // Playlist vide, quand même prêt\n          this.setReady(true);\n        }\n        break;\n        \n      case 'playlist:itemChanged':\n        this.isReady = false;\n        \n        // stopAll() préventif + chargement funscript\n        this.buttplug.stopAll().catch(err => console.warn('Failed to stop devices:', err));\n        \n        if (data.item) {\n          this.funscript.loadFromPlaylistItem(data.item)\n            .then(() => {\n              this.setReady(true);\n            })\n            .catch(error => {\n              // Erreur gérée par status:funscript\n              console.error('Failed to load funscript for item:', error);\n              this.setReady(true); // Quand même prêt même sans funscript\n            });\n        } else {\n          this.setReady(true);\n        }\n        break;\n        \n      case 'playlist:playbackChanged':\n        // Synchroniser l'état de lecture se fait automatiquement\n        break;\n        \n      case 'playlist:error':\n        // Erreurs gérées par status:playlist\n        break;\n    }\n  }\n\n  _handleActuatorEvent = (event, data) => {\n    switch (event) {\n      default:\n        break\n    }\n  }\n\n  _handleChannelEvent = (event, data) => {\n    switch (event) {\n      default:\n        break\n    }\n  }\n\n  _handleLoggingEvent = (event, data) => {\n    switch (event) {\n      default:\n        break\n    }\n  }\n\n  _handleMediaEvent = (event, data) => {\n    switch (event) {\n      default:\n        break\n    }\n  }\n\n  _handleComponentEvent = (event, data) => {\n    switch (event) {\n      default:\n        break\n    }\n  }\n\n  // ============================================================================\n  // GLOBAL STATE HELPERS (INCHANGÉ)\n  // ============================================================================\n\n\n  /**\n   * Met à jour le status à partir d'un messageObj\n   */\n  setStatus = (messageObj) => {\n    // Formater le message pour l'affichage système\n    const formattedMessage = `[${messageObj.source.charAt(0).toUpperCase() + messageObj.source.slice(1)}] ${messageObj.message}`;\n    \n    this.status = formattedMessage;\n    this.error = null;\n    this.notify('core:status', { status: formattedMessage, error: null, messageObj });\n  }\n\n  /**\n   * Met à jour l'erreur à partir d'un messageObj\n   */\n  setError = (messageObj) => {\n    // Formater le message pour l'affichage système\n    const formattedMessage = `[${messageObj.source.charAt(0).toUpperCase() + messageObj.source.slice(1)}] ${messageObj.message}`;\n    \n    this.error = formattedMessage;\n    this.status = 'error';\n    this.isReady = false;\n    \n    // Logging d'erreurs toujours activé (important en production aussi)\n    if (messageObj.error) {\n      console.error(`FunPlayer Core Error: ${formattedMessage}`, messageObj.error);\n    }\n    \n    this.notify('core:status', { status: 'error', error: formattedMessage, messageObj });\n  }\n\n  setReady = (ready) => {\n    this.isReady = ready;\n    this.notify('core:ready', { isReady: ready });\n  }\n\n  // ============================================================================\n  // CHANNEL/ACTUATOR HELPERS (INCHANGÉ)\n  // ============================================================================\n\n  plugChannel(channelName, actuatorIndex) {\n    const channel = this.funscript.getChannel(channelName);\n    const actuator = this.buttplug.getActuator(actuatorIndex);\n    \n    if (!channel || !actuator) return false;\n    \n    return channel.plug(actuator);\n  }\n\n  unplugChannel(channelName, actuatorIndex) {\n    const channel = this.funscript.getChannel(channelName);\n    const actuator = this.buttplug.getActuator(actuatorIndex);\n    \n    if (!channel || !actuator) return false;\n    \n    channel.unplug(actuator);\n    return true;\n  }\n\n  unplugAllChannels() {\n    this.funscript.getChannels().forEach(channel => {\n      channel.unplugAll();\n    });\n  }\n\n  // ============================================================================\n  // CORE METHODS (INCHANGÉ)\n  // ============================================================================\n  \n  /**\n   * ✅ CORRIGÉ: autoConnect avec gestion d'erreur cohérente\n   */\n  async autoConnect(scanTimeout = 3000) {\n    try {\n      const connected = await this.buttplug.connect();\n      \n      if (!connected) {\n        throw new Error('Failed to connect to Intiface Central');\n      }\n      \n      const devices = this.buttplug.getDevices().filter(device => device.index>=0)\n\n      if (devices.length === 0) {\n        throw new Error('No physical device found');\n      }\n      \n      const selectSuccess = this.buttplug.selectDevice(devices[0].index);\n      if (!selectSuccess) {\n        throw new Error('Failed to select device');\n      }\n      \n      const mapResult = this.autoMapChannels();\n      \n      this.notify('core:autoConnect', {\n        success: true,\n        device: devices[0],\n        mapResult,\n        deviceInfo: this.buttplug.getDeviceInfo()\n      });\n\n      this.notify('status:core', { \n        message: `AutoConnect successful: ${devices[0].name}`, \n        type: 'success' \n      });\n      \n      return {\n        success: true,\n        device: devices[0],\n        mapResult\n      };\n      \n    } catch (error) {\n      this.notify('core:autoConnect', {\n        success: false,\n        error: error.message\n      });\n      \n      // ✅ CORRIGÉ: Notification d'erreur avec format cohérent\n      this.notify('status:core', {\n        message: 'AutoConnect failed',\n        type: 'error',\n        error: error.message\n      });\n      \n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  async processHapticFrame(currentTime, options = {}) {\n    const channels = this.funscript.getChannels();\n    if (channels.length === 0) {\n      return new Map();\n    }\n\n    const times = this.buttplug.getTimeWithOffsets(currentTime);\n    const channelTimings = Object.fromEntries(times.entries());\n    const values = this.funscript.interpolateAll(channelTimings);\n    const actuatorData = await this.buttplug.processChannels(values);\n    \n    return actuatorData;\n  }\n\n  // ============================================================================\n  // SECTION: AUTOMAP INTELLIGENT AVEC PERSISTANCE\n  // ============================================================================\n\n  /**\n   * ✅ NOUVEAU: AutoMap intelligent qui préserve la configuration utilisateur entre funscripts\n   * \n   * STRATÉGIE:\n   * 1. Sauvegarder les mappings actuels avant reset\n   * 2. Pour chaque actuateur :\n   *    - Priorité 1: Canal même nom que previousMappedChannel (si compatible)\n   *    - Priorité 2: Canal avec capability matching (parmi non-mappés)\n   *    - Priorité 3: Canal avec type matching (parmi non-mappés)\n   *    - Priorité 4: Répéter 2-3 sur canaux déjà mappés (multi-assignment)\n   */\n  autoMapChannels() {\n    const actuators = this.buttplug.getActuators();\n    const channels = this.funscript.getChannels();\n    \n    if (actuators.length === 0) {\n      this.notify('status:core', { message: 'No actuators available for auto-mapping', type: 'info' });\n      return { mapped: 0, total: 0, skippedIncompatible: 0, strategy: 'no_actuators' };\n    }\n    \n    if (channels.length === 0) {\n      this.notify('status:core', { message: 'No channels available for auto-mapping', type: 'info' });\n      return { mapped: 0, total: actuators.length, skippedIncompatible: 0, strategy: 'no_channels' };\n    }\n\n    this.notify('status:core', { message: `🎯 Starting intelligent autoMap: ${actuators.length} actuators → ${channels.length} channels`, type: 'processing' });\n\n    // 1. Sauvegarder les mappings actuels (déjà fait via unplug → previousMappedChannel)\n    this._savePreviousMappings(actuators);\n\n    // 2. Initialiser le tracking des assignations\n    const assignmentTracker = {\n      mappedActuators: new Set(),\n      assignedChannels: new Map(), // channelName → [actuatorIndex, ...]\n      unmappedChannels: new Set(channels.map(ch => ch.name)),\n      statistics: {\n        priorityByName: 0,\n        priorityByCapability: 0,\n        priorityByType: 0,\n        fallbackMultiAssignment: 0,\n        incompatible: 0\n      }\n    };\n\n    // 3. Phase 1: Mappings prioritaires (nom + capability/type sur canaux non-mappés)\n    this._phase1PriorityMapping(actuators, channels, assignmentTracker);\n\n    // 4. Phase 2: Fallback multi-assignment sur canaux déjà mappés\n    this._phase2FallbackMapping(actuators, channels, assignmentTracker);\n\n    // 5. Résultats et logging\n    const result = this._buildAutoMapResult(assignmentTracker, actuators.length);\n    \n    this.notify('core:autoMap', {\n      result,\n      deviceInfo: this.buttplug.getDeviceInfo(),\n      strategy: 'intelligent_persistent'\n    });\n\n    return result;\n  }\n\n  /**\n   * ✅ NOUVEAU: Sauvegarde les mappings actuels dans previousMappedChannel\n   */\n  _savePreviousMappings(actuators) {\n    let savedMappings = 0;\n    \n    for (const actuator of actuators) {\n      if (actuator.isPlugged()) {\n        const channelName = actuator.getAssignedChannelName();\n        \n        // Le mapping sera automatiquement sauvé lors du unplug dans _reset()\n        this.notify('status:core', { message: `💾 Saving mapping: Actuator ${actuator.index} was connected to \"${channelName}\"`, type: 'log' });\n        savedMappings++;\n      }\n    }\n    \n    if (savedMappings > 0) {\n      this.notify('status:core', { message: `💾 Saved ${savedMappings} previous mappings for intelligent autoMap`, type: 'info' });\n    }\n  }\n\n  /**\n   * ✅ NOUVEAU: Phase 1 - Mappings prioritaires\n   */\n  _phase1PriorityMapping(actuators, channels, tracker) {\n    this.notify('status:core', { message: '🎯 Phase 1: Priority mapping (name → capability → type)', type: 'log' });\n\n    for (const actuator of actuators) {\n      if (!actuator.settings.enabled) {\n        this.notify('status:core', { message: `⏭️ Skipping disabled actuator ${actuator.index}`, type: 'log' });\n        continue;\n      }\n\n      // Priorité 1: Canal même nom que previousMappedChannel\n      if (this._tryMapByPreviousName(actuator, channels, tracker)) continue;\n      \n      // Priorité 2: Canal avec capability matching (parmi non-mappés uniquement)\n      if (this._tryMapByCapability(actuator, channels, tracker, false)) continue;\n      \n      // Priorité 3: Canal avec type matching (parmi non-mappés uniquement)\n      if (this._tryMapByType(actuator, channels, tracker, false)) continue;\n      \n      // Phase 1 terminée pour cet actuateur, sera tenté en Phase 2\n    }\n  }\n\n  /**\n   * ✅ NOUVEAU: Phase 2 - Fallback multi-assignment\n   */\n  _phase2FallbackMapping(actuators, channels, tracker) {\n    this.notify('status:core', { message: '🎯 Phase 2: Fallback multi-assignment on already mapped channels', type: 'log' });\n\n    for (const actuator of actuators) {\n      if (!actuator.settings.enabled || tracker.mappedActuators.has(actuator.index)) {\n        continue; // Déjà mappé ou désactivé\n      }\n\n      // Priorité 4: Capability matching sur canaux déjà mappés\n      if (this._tryMapByCapability(actuator, channels, tracker, true)) continue;\n      \n      // Priorité 5: Type matching sur canaux déjà mappés\n      if (this._tryMapByType(actuator, channels, tracker, true)) continue;\n      \n      // Aucun mapping possible\n      tracker.statistics.incompatible++;\n      this.notify('status:core', { message: `❌ No mapping found for actuator ${actuator.index} (${actuator.capability}/${actuator.type})`, type: 'warning' });\n    }\n  }\n\n  /**\n   * ✅ NOUVEAU: Tentative de mapping par nom précédent\n   */\n  _tryMapByPreviousName(actuator, channels, tracker) {\n    const previousChannelName = actuator.getPreviousMappedChannelName();\n    \n    if (!previousChannelName) {\n      return false; // Pas de mapping précédent\n    }\n    \n    const targetChannel = channels.find(ch => ch.name === previousChannelName);\n    \n    if (!targetChannel) {\n      this.notify('status:core', { message: `🔍 Previous channel \"${previousChannelName}\" not found in new funscript for actuator ${actuator.index}`, type: 'log' });\n      return false;\n    }\n    \n    if (!actuator.canPlugTo(targetChannel)) {\n      this.notify('status:core', { message: `🔍 Previous channel \"${previousChannelName}\" incompatible with actuator ${actuator.index} (${actuator.type} vs ${targetChannel.type})`, type: 'log' });\n      return false;\n    }\n    \n    // Mapping réussi !\n    const success = targetChannel.plug(actuator);\n    if (success) {\n      this._recordSuccessfulMapping(actuator, targetChannel, tracker, 'previous_name');\n      tracker.statistics.priorityByName++;\n      this.notify('status:core', { message: `✅ [PRIORITY NAME] Actuator ${actuator.index} → \"${targetChannel.name}\" (restored previous mapping)`, type: 'success' });\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * ✅ NOUVEAU: Tentative de mapping par capability\n   */\n  _tryMapByCapability(actuator, channels, tracker, allowAlreadyMapped) {\n    const candidateChannels = channels.filter(channel => {\n      // Vérifier compatibilité de base\n      if (!actuator.canPlugTo(channel)) return false;\n      \n      // Vérifier si matching capability\n      if (channel.likelyCapability !== actuator.capability) return false;\n      \n      // Vérifier statut mapping selon la phase\n      const isAlreadyMapped = tracker.assignedChannels.has(channel.name);\n      return allowAlreadyMapped || !isAlreadyMapped;\n    });\n    \n    if (candidateChannels.length === 0) return false;\n    \n    // Prendre le premier candidat (ou améliorer avec scoring si besoin)\n    const targetChannel = candidateChannels[0];\n    const success = targetChannel.plug(actuator);\n    \n    if (success) {\n      const phase = allowAlreadyMapped ? 'MULTI-CAPABILITY' : 'CAPABILITY';\n      this._recordSuccessfulMapping(actuator, targetChannel, tracker, 'capability');\n      \n      if (allowAlreadyMapped) {\n        tracker.statistics.fallbackMultiAssignment++;\n      } else {\n        tracker.statistics.priorityByCapability++;\n      }\n      \n      this.notify('status:core', { message: `✅ [${phase}] Actuator ${actuator.index} → \"${targetChannel.name}\" (${actuator.capability} match)`, type: 'success' });\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * ✅ NOUVEAU: Tentative de mapping par type\n   */\n  _tryMapByType(actuator, channels, tracker, allowAlreadyMapped) {\n    const candidateChannels = channels.filter(channel => {\n      // Vérifier compatibilité de base\n      if (!actuator.canPlugTo(channel)) return false;\n      \n      // Vérifier statut mapping selon la phase\n      const isAlreadyMapped = tracker.assignedChannels.has(channel.name);\n      return allowAlreadyMapped || !isAlreadyMapped;\n    });\n    \n    if (candidateChannels.length === 0) return false;\n    \n    // Prendre le premier candidat compatible\n    const targetChannel = candidateChannels[0];\n    const success = targetChannel.plug(actuator);\n    \n    if (success) {\n      const phase = allowAlreadyMapped ? 'MULTI-TYPE' : 'TYPE';\n      this._recordSuccessfulMapping(actuator, targetChannel, tracker, 'type');\n      \n      if (allowAlreadyMapped) {\n        tracker.statistics.fallbackMultiAssignment++;\n      } else {\n        tracker.statistics.priorityByType++;\n      }\n      \n      this.notify('status:core', { message: `✅ [${phase}] Actuator ${actuator.index} → \"${targetChannel.name}\" (${actuator.type} type match)`, type: 'success' });\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * ✅ NOUVEAU: Enregistre un mapping réussi dans le tracker\n   */\n  _recordSuccessfulMapping(actuator, channel, tracker, reason) {\n    tracker.mappedActuators.add(actuator.index);\n    \n    if (!tracker.assignedChannels.has(channel.name)) {\n      tracker.assignedChannels.set(channel.name, []);\n      tracker.unmappedChannels.delete(channel.name);\n    }\n    \n    tracker.assignedChannels.get(channel.name).push({\n      actuatorIndex: actuator.index,\n      reason: reason\n    });\n  }\n\n  /**\n   * ✅ NOUVEAU: Construit le résultat final de l'autoMap\n   */\n  _buildAutoMapResult(tracker, totalActuators) {\n    const mapped = tracker.mappedActuators.size;\n    const multiAssignedChannels = Array.from(tracker.assignedChannels.entries())\n      .filter(([channelName, assignments]) => assignments.length > 1)\n      .length;\n    \n    this.notify('status:core', { \n      message: `🎯 AutoMap completed: ${mapped}/${totalActuators} actuators mapped` +\n              (multiAssignedChannels > 0 ? `, ${multiAssignedChannels} channels multi-assigned` : ''), \n      type: mapped > 0 ? 'success' : 'warning' \n    });\n    \n    // Détails statistiques\n    const stats = tracker.statistics;\n    if (stats.priorityByName > 0) {\n      this.notify('status:core', { message: `📊 Priority mappings: ${stats.priorityByName} by name, ${stats.priorityByCapability} by capability, ${stats.priorityByType} by type`, type: 'log' });\n    }\n    if (stats.fallbackMultiAssignment > 0) {\n      this.notify('status:core', { message: `📊 Fallback multi-assignments: ${stats.fallbackMultiAssignment}`, type: 'log' });\n    }\n    if (stats.incompatible > 0) {\n      this.notify('status:core', { message: `📊 Incompatible actuators: ${stats.incompatible}`, type: 'log' });\n    }\n    \n    return {\n      mapped,\n      total: totalActuators,\n      skippedIncompatible: stats.incompatible,\n      strategy: 'intelligent_persistent',\n      statistics: {\n        ...stats,\n        multiAssignedChannels,\n        unmappedChannels: tracker.unmappedChannels.size\n      },\n      details: {\n        assignedChannels: Object.fromEntries(tracker.assignedChannels.entries()),\n        unmappedChannels: Array.from(tracker.unmappedChannels)\n      }\n    };\n  }\n\n  // ============================================================================\n  // UTILITAIRES POUR DEBUG ET GESTION MANUELLE\n  // ============================================================================\n\n  /**\n   * ✅ NOUVEAU: Force l'oubli de tous les mappings précédents\n   */\n  clearAllPreviousMappings() {\n    const actuators = this.buttplug.getActuators();\n    let clearedCount = 0;\n    \n    for (const actuator of actuators) {\n      if (actuator.hasPreviousMapping()) {\n        actuator.forgetPreviousMapping();\n        clearedCount++;\n      }\n    }\n    \n    this.notify('status:core', { message: `🧹 Cleared ${clearedCount} previous mappings`, type: 'info' });\n    \n    return { cleared: clearedCount, total: actuators.length };\n  }\n\n  /**\n   * ✅ NOUVEAU: Diagnostic des mappings précédents\n   */\n  getPreviousMappingsDiagnostic() {\n    const actuators = this.buttplug.getActuators();\n    const channels = this.funscript.getChannelNames();\n    \n    const diagnostics = actuators.map(actuator => {\n      const previousChannel = actuator.getPreviousMappedChannelName();\n      const currentChannel = actuator.getAssignedChannelName();\n      const isAvailable = previousChannel ? channels.includes(previousChannel) : false;\n      const isCompatible = isAvailable ? actuator.canPlugTo(this.funscript.getChannel(previousChannel)) : false;\n      \n      return {\n        actuatorIndex: actuator.index,\n        capability: actuator.capability,\n        type: actuator.type,\n        currentChannel,\n        previousChannel,\n        isAvailable,\n        isCompatible,\n        canRestore: isAvailable && isCompatible\n      };\n    });\n    \n    const stats = {\n      total: actuators.length,\n      withPreviousMapping: diagnostics.filter(d => d.previousChannel).length,\n      canRestore: diagnostics.filter(d => d.canRestore).length,\n      lost: diagnostics.filter(d => d.previousChannel && !d.isAvailable).length,\n      incompatible: diagnostics.filter(d => d.previousChannel && d.isAvailable && !d.isCompatible).length\n    };\n    \n    return { diagnostics, stats };\n  }\n  \n  getCompatibilityDiagnostic() {\n    const allChannels = this.funscript.getChannels();\n    const allActuators = this.buttplug.getActuators();\n    \n    if (allChannels.length === 0) {\n      return { channels: [], actuators: [], issues: ['No funscript loaded'] };\n    }\n    \n    const channelDiag = allChannels.map(channel => {\n      const compatibleActuators = allActuators.filter(actuator => \n        channel.canPlugTo(actuator)\n      ).map(actuator => actuator.index);\n      \n      return {\n        channel: channel.name,\n        type: channel.type,\n        valueRange: channel.valueRange,\n        compatibleActuators,\n        isOrphaned: compatibleActuators.length === 0,\n        connectedActuators: Array.from(channel.connectedActuators.keys())\n      };\n    });\n    \n    const actuatorDiag = allActuators.map(actuator => {\n      const compatibleChannels = allChannels.filter(channel => \n        channel.canPlugTo(actuator)\n      ).map(channel => channel.name);\n      \n      return {\n        index: actuator.index,\n        type: actuator.type,\n        capability: actuator.capability,\n        compatibleChannels,\n        isUnused: compatibleChannels.length === 0,\n        assignedChannel: actuator.getAssignedChannelName()\n      };\n    });\n    \n    const issues = [];\n    const orphanedChannels = channelDiag.filter(c => c.isOrphaned);\n    const unusedActuators = actuatorDiag.filter(a => a.isUnused);\n    \n    if (orphanedChannels.length > 0) {\n      issues.push(`${orphanedChannels.length} channel(s) have no compatible actuators`);\n    }\n    if (unusedActuators.length > 0) {\n      issues.push(`${unusedActuators.length} actuator(s) have no compatible channels`);\n    }\n    \n    return {\n      channels: channelDiag,\n      actuators: actuatorDiag,\n      issues\n    };\n  }\n  \n  // ============================================================================\n  // STATUS & CLEANUP HELPERS (INCHANGÉ)\n  // ============================================================================\n  \n  getStatus() {\n    return {\n      status: this.status,\n      error: this.error,\n      isReady: this.isReady,\n      buttplug: this.buttplug.getStatus(),\n      funscript: this.funscript?.getDebugInfo() || { loaded: false },\n      playlist: this.playlist.getStats()\n    };\n  }\n  \n  async cleanup() {\n    if (this._buttplug) {\n      await this._buttplug.cleanup();\n      this._buttplug = null;\n    }\n    \n    if (this._playlist) {\n      this._playlist.cleanup();\n      this._playlist = null;\n    }\n    \n    if (this._funscript) {\n      this._funscript.reset();\n      this._funscript = null;\n    }\n    \n    this.status = 'idle';\n    this.error = null;\n    this.isReady = false;\n    this.listeners.clear();\n    \n    if (this.logging.enableConsoleLogging) {\n      console.log('Core: Cleanup complete');\n    }\n\n    if (this._logging) {\n      this._logging.cleanup();\n      this._logging = null;\n    }\n  }\n}\n\nexport default FunPlayerCore;","import React, { Component } from 'react';\nimport core from './FunPlayerCore';\n\n/**\n * PlaylistComponent - ✅ REFACTORISÉ selon guidelines\n * \n * RESPONSABILITÉS SIMPLIFIÉES:\n * - UI pure pour la playlist (uniquement si > 1 item)\n * - Appels directs this.core.xxx (pas d'indirections)\n * - Re-render sur événements choisis uniquement\n * - ✅ PLUS DE: getters redondants, logique business dans event handlers\n */\nclass PlaylistComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=props.core\n    \n    this.state = {\n      renderTrigger: 0\n    };\n    \n    this.coreListener = null;\n  }\n\n  componentDidMount() {\n    this.coreListener = this.core.addListener(this.handleEvent);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.visible !== this.props.visible) {\n      const reason = this.props.visible ? 'shown' : 'hidden';\n      this.core.notify('component:resize', {\n        source: 'PlaylistComponent',\n        reason: `visibility-${reason}`\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.coreListener) {\n      this.coreListener();\n      this.coreListener = null;\n    }\n  }\n\n  // ============================================================================\n  // ✅ GESTION D'ÉVÉNEMENTS SIMPLIFIÉE - Juste re-render\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    const eventsToReact = [\n      'playlist:loaded',\n      'playlist:itemChanged'\n    ];\n    \n    if (eventsToReact.includes(event)) {\n      this._triggerRender();\n      this.core.notify('component:resize', {\n        source: 'PlaylistComponent',\n        reason: event === 'playlist:loaded' ? 'playlist-loaded' : 'item-changed'\n      });\n    }\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  // ============================================================================\n  // ✅ ACTIONS SIMPLIFIÉES - Appels directs core, pas d'indirections\n  // ============================================================================\n\n  handleItemClick = (index) => {\n    // ✅ BON: Appel direct core\n    const success = this.core.playlist.goTo(index);\n    \n    if (!success) {\n      console.error('PlaylistComponent: Failed to go to item', index);\n    }\n  }\n\n  // ============================================================================\n  // ✅ HELPERS SIMPLIFIÉS - Accès direct core\n  // ============================================================================\n\n  getItemTitle = (item, index) => {\n    // ✅ Priorité name > title (format Video.js étendu)\n    if (item.name) {\n      return item.name;\n    }\n    \n    if (item.title) {\n      return item.title;\n    }\n\n    // ✅ Extraire du nom de fichier sources\n    if (item.sources && item.sources.length > 0) {\n      const firstSource = item.sources[0];\n      \n      if (firstSource.src.startsWith('data:')) {\n        const mimeMatch = firstSource.src.match(/data:([^;]+)/);\n        const mimeType = mimeMatch ? mimeMatch[1] : 'unknown';\n        return `Uploaded ${mimeType.split('/')[0]}`;\n      }\n\n      const filename = firstSource.src.split('/').pop().split('.')[0];\n      return filename || `Item ${index + 1}`;\n    }\n\n    // ✅ Extraire du nom de fichier funscript\n    if (item.funscript && typeof item.funscript === 'string') {\n      if (item.funscript.startsWith('data:')) {\n        return `Uploaded funscript`;\n      }\n      const filename = item.funscript.split('/').pop().split('.')[0];\n      return filename || `Haptic ${index + 1}`;\n    }\n\n    return `Item ${index + 1}`;\n  }\n\n  getItemInfo = (item) => {\n    const info = [];\n\n    // Type detection basée sur item_type (généré par PlaylistManager)\n    switch (item.item_type) {\n      case 'video': \n        info.push('VIDEO'); \n        break;\n      case 'video_haptic': \n        info.push('VIDEO'); \n        break;\n      case 'audio': \n        info.push('AUDIO'); \n        break;\n      case 'audio_haptic': \n        info.push('AUDIO'); \n        break;\n      case 'haptic': \n        info.push('HAPTIC'); \n        break;\n    }\n\n    // ✅ Durée cosmétique (sera corrigée par MediaPlayer)\n    if (item.duration) {\n      const minutes = Math.floor(item.duration / 60);\n      const seconds = Math.floor(item.duration % 60);\n      info.push(`${minutes}:${seconds.toString().padStart(2, '0')}`);\n    }\n\n    // Haptic indicator\n    if (['video_haptic', 'audio_haptic', 'haptic'].includes(item.item_type)) {\n      info.push('🎮');\n    }\n\n    return info.join(' • ');\n  }\n\n  // ============================================================================\n  // RENDER \n  // ============================================================================\n\n  render() {\n    const { visible = true } = this.props;\n  \n    if (!visible) {\n      return null;\n    }\n\n    // ✅ BON: Accès direct core pour toutes les données\n    const playlist = this.core.playlist.items;\n    const currentIndex = this.core.playlist.getCurrentIndex();\n\n    // ✅ OPTIMISATION: Ne s'afficher que si playlist > 1\n    if (playlist.length <= 1) {\n      return null;\n    }\n\n    return (\n      <div className=\"fp-playlist\">\n        \n        {/* Header simple */}\n        <div className=\"fp-playlist-header\">\n          <span className=\"fp-playlist-title\">\n            Playlist ({playlist.length})\n          </span>\n        </div>\n\n        {/* Liste des items */}\n        <div className=\"fp-playlist-items\">\n          {playlist.map((item, index) => (\n            <div\n              key={index}\n              className={`fp-playlist-item ${index === currentIndex ? 'fp-playlist-item-active' : ''}`}\n              onClick={() => this.handleItemClick(index)}\n              title={item.description || this.getItemTitle(item, index)}\n            >\n              \n              {/* Thumbnail */}\n              <div className=\"fp-playlist-item-thumbnail\">\n                <img \n                  className=\"fp-playlist-item-image\"\n                  src={item.poster}\n                  alt={this.getItemTitle(item, index)}\n                  onError={(e) => { \n                    e.target.style.display = 'none';\n                    e.target.parentElement.innerHTML = '📄';\n                  }}\n                />\n              </div>\n              \n              {/* Contenu texte */}\n              <div className=\"fp-playlist-item-content\">\n                \n                {/* Titre de l'item */}\n                <div className=\"fp-playlist-item-title\">\n                  {this.getItemTitle(item, index)}\n                </div>\n                \n                {/* Infos de l'item */}\n                <div className=\"fp-playlist-item-info\">\n                  {this.getItemInfo(item)}\n                </div>\n                \n              </div>\n              \n            </div>\n          ))}\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default PlaylistComponent;","import React from 'react';\nimport feather from 'feather-icons';\n\n/**\n * Wrapper React pour Feather Icons\n * Usage: <FeatherIcon name=\"play\" size={16} color=\"white\" className=\"my-icon\" />\n */\nconst FeatherIcon = ({ \n  name,\n  size = 16,\n  color = null,\n  strokeWidth = 2,\n  className = '',\n  style = {},\n  ...props \n}) => {\n  const icon = feather.icons[name];\n  \n  if (!icon) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`FeatherIcon: icon '${name}' not found`);\n    }\n    return null;\n  }\n  \n  // ✅ MODIFIÉ: CSS-first - utiliser des CSS custom properties\n  const svgAttrs = {\n    width: `var(--icon-size, ${size}px)`,\n    height: `var(--icon-size, ${size}px)`,\n    'stroke-width': `var(--icon-stroke-width, ${strokeWidth})`,\n    stroke: color || `var(--icon-color, currentColor)`,\n    class: className\n  };\n  \n  const svgString = icon.toSvg(svgAttrs);\n  \n  const wrapperStyle = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    lineHeight: 1,\n    verticalAlign: 'middle',\n    transform: 'translateY(1px)',\n    ...style\n  };\n  \n  return (\n    <span \n      style={wrapperStyle}\n      dangerouslySetInnerHTML={{ __html: svgString }}\n      {...props}\n    />\n  );\n};\n\nexport default FeatherIcon;","import React, { Component } from 'react';\nimport FeatherIcon from './FeatherIcon'; // ✅ AJOUTÉ: Import du nouveau composant\n\n/**\n * ButtPlugSettingsComponent - ✅ NETTOYÉ: UI pure sans notifications\n * \n * RESPONSABILITÉS SIMPLIFIÉES:\n * - Barre horizontale compacte (status + actions)\n * - Appels directs this.core.xxx (pas d'indirections)\n * - Re-render sur événements choisis uniquement\n * - ✅ CLEAN: Pas de notifications status (c'est aux managers de le faire)\n * \n * ✅ MODIFIÉ: Utilise FeatherIcon au lieu d'emojis\n */\nclass ButtPlugSettingsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core = props.core\n    \n    this.state = {\n      isAutoConnecting: false,\n      isRescanActive: false,  // ✅ NOUVEAU: État pour le bouton rescan\n      renderTrigger: 0\n    };\n    \n    this.coreListener = null;\n  }\n\n  componentDidMount() {\n    this.coreListener = this.core.addListener(this.handleEvent);\n  }\n\n  componentWillUnmount() {\n    if (this.coreListener) {\n      this.coreListener();\n      this.coreListener = null;\n    }\n  }\n\n  // ============================================================================\n  // GESTION D'ÉVÉNEMENTS GRANULAIRES - Filtrage des événements buttplug\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    // Filtrage intelligent: Ne réagir qu'aux événements buttplug\n    const buttplugEvents = [\n      'buttplug:connection',    // Status connexion changé\n      'buttplug:scan',          // Scan démarré/arrêté\n      'buttplug:device',        // Device sélectionné\n      'funscript:load',         // Nouveaux canaux → affecte la validité connection\n      'funscript:channels'      // Canaux mis à jour → affecte la validité connection\n    ];\n    \n    if (buttplugEvents.includes(event)) {\n      this._triggerRender();\n      \n      // Reset des états temporaires\n      if (event === 'buttplug:connection') {\n        this.setState({ isAutoConnecting: false });\n      }\n      if (event === 'buttplug:scan') {\n        this.setState({ isRescanActive: false });\n      }\n    }\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  // ============================================================================\n  // ACTIONS SIMPLIFIÉES - Appels directs core, pas d'indirections\n  // ============================================================================\n\n  handleAutoConnect = async () => {\n    if (this.state.isAutoConnecting) return;\n    \n    this.setState({ isAutoConnecting: true });\n    \n    try {\n      // Appel direct core - les notifications seront faites par ButtPlugManager\n      const success = await this.core.buttplug.connect();\n      \n      if (success) {\n        // Auto-scan après connexion réussie\n        await this.core.buttplug.scan();\n      }\n    } catch (error) {\n      console.error('Auto-connect failed:', error);\n    }\n    \n    // L'état sera reset par l'événement buttplug:connection\n  }\n\n  handleDisconnect = async () => {\n    try {\n      // Appel direct core - les notifications seront faites par ButtPlugManager\n      await this.core.buttplug.disconnect();\n    } catch (error) {\n      console.error('Disconnect failed:', error);\n    }\n  }\n\n  handleRescan = async () => {\n    if (this.state.isRescanActive) return;\n    \n    this.setState({ isRescanActive: true });\n    \n    try {\n      // Appel direct core - les notifications seront faites par ButtPlugManager\n      await this.core.buttplug.scan();\n    } catch (error) {\n      console.error('Rescan failed:', error);\n    }\n    \n    // L'état sera reset par l'événement buttplug:scan\n  }\n\n  handleDeviceChange = (deviceIndex) => {\n    try {\n      const numericIndex = deviceIndex === '-1' ? -1 : parseInt(deviceIndex);\n      // Appel direct core - les notifications seront faites par ButtPlugManager\n      this.core.buttplug.selectDevice(numericIndex);\n    } catch (error) {\n      console.error('Device selection failed:', error);\n    }\n  }\n\n  // ============================================================================\n  // RENDER SIMPLIFIÉ - Accès direct aux données via core\n  // ============================================================================\n\n  render() {\n    const { \n      onToggleSettings, \n      isSettingsExpanded \n    } = this.props;\n    \n    const { isAutoConnecting, isRescanActive } = this.state;\n    \n    // Accès direct core pour toutes les données\n    const buttplugStatus = this.core.buttplug.getStatus();\n    const funscriptChannels = this.core.funscript.getChannelNames();\n    const devices = this.core.buttplug.getDevices();\n    const selectedDevice = this.core.buttplug.getSelected();\n    \n    const isConnected = buttplugStatus?.isConnected || false;\n    \n    return (\n      <div className=\"fp-buttplug-settings\">\n        \n        {/* Zone status à gauche */}\n        <div className=\"fp-buttplug-settings-status\">\n          {/* ✅ MODIFIÉ: Feather icon au lieu d'emoji pour le statut */}\n          <FeatherIcon \n            name={isConnected ? \"wifi\" : \"wifi-off\"} \n            size={18} \n            className=\"fp-buttplug-settings-connection-icon\"\n          />\n          <span className=\"fp-buttplug-settings-device-name\">\n            {selectedDevice?.name || 'Unknown device'}\n          </span>\n          {funscriptChannels.length === 0 && (\n            <span className=\"fp-buttplug-settings-no-haptic-hint\">\n              No haptic\n            </span>\n          )}\n        </div>\n        \n        {/* Zone actions à droite */}\n        <div className=\"fp-buttplug-settings-actions\">\n          \n          {/* Connect/Disconnect */}\n          {!isConnected ? (\n            <button \n              className=\"fp-buttplug-settings-connect-btn\"\n              onClick={this.handleAutoConnect}\n              disabled={isAutoConnecting || funscriptChannels.length === 0}\n              title={funscriptChannels.length === 0 ? \"Load funscript first\" : \"Connect to Intiface Central\"}\n            >\n              {/* ✅ MODIFIÉ: Feather icon pour connect */}\n              <FeatherIcon \n                name={isAutoConnecting ? \"loader\" : \"zap\"} \n                size={14} \n                className=\"fp-icon-button\"\n                style={{ marginRight: '4px' }}\n              />\n              {isAutoConnecting ? 'Connecting...' : 'Connect'}\n            </button>\n          ) : (\n            <>\n              <button \n                className=\"fp-buttplug-settings-disconnect-btn\"\n                onClick={this.handleDisconnect}\n              >\n                {/* ✅ MODIFIÉ: Feather icon pour disconnect */}\n                <FeatherIcon \n                  name=\"zap-off\" \n                  size={14} \n                  className=\"fp-icon-button\"\n                  style={{ marginRight: '4px' }}\n                />\n                Disconnect\n              </button>\n              \n              {/* Bouton rescan */}\n              <button\n                className=\"fp-buttplug-settings-rescan-btn\"\n                onClick={this.handleRescan}\n                disabled={isRescanActive}\n                title=\"Scan for new devices\"\n              >\n                {/* ✅ MODIFIÉ: Feather icons pour rescan */}\n                <FeatherIcon \n                  name={isRescanActive ? \"loader\" : \"search\"} \n                  size={14} \n                  className=\"fp-icon-button\"\n                />\n              </button>\n            </>\n          )}\n          \n          {/* Device selector */}\n          <select\n            className=\"fp-buttplug-settings-device-select\"\n            value={selectedDevice?.index ?? -1}\n            onChange={(e) => this.handleDeviceChange(e.target.value)}\n            disabled={funscriptChannels.length === 0}\n            title={funscriptChannels.length === 0 ? \n              \"Load funscript first\" : \n              \"Select haptic device\"}\n          >\n            {devices.map(device => (\n              <option key={device.index} value={device.index}>\n                {device.name} {device.index === -1 ? '(Virtual)' : ''}\n              </option>\n            ))}\n          </select>\n          \n          {/* Settings toggle */}\n          <button\n            className=\"fp-buttplug-settings-toggle\"\n            onClick={onToggleSettings}\n            title={isSettingsExpanded ? \"Hide haptic settings\" : \"Show haptic settings\"}\n          >\n            {/* ✅ MODIFIÉ: Feather icon pour toggle */}\n            <FeatherIcon \n              name={isSettingsExpanded ? \"chevron-up\" : \"chevron-down\"} \n              size={20} \n              className=\"fp-icon-button\"\n              style={{marginLeft:\"6px\",marginRight:\"6px\"}}\n            />\n          </button>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default ButtPlugSettingsComponent;","import React, { Component } from 'react';\nimport FeatherIcon from './FeatherIcon';\n\n/**\n * ActuatorSettingsComponent - ✅ NETTOYÉ: UI pure sans notifications\n * \n * RESPONSABILITÉS SIMPLIFIÉES:\n * - UI pure pour un actuateur (instance passée en props)\n * - Appels directs this.core.xxx (pas d'indirections)\n * - Re-render uniquement sur événements concernant CET actuateur\n * - ✅ CLEAN: Pas de notifications status (c'est aux managers de le faire)\n */\nclass ActuatorSettingsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=props.core\n    \n    this.state = {\n      isExpanded: false,\n      renderTrigger: 0\n    };\n    \n    this.coreListener = null;\n  }\n\n  componentDidMount() {\n    this.coreListener = this.core.addListener(this.handleEvent);\n  }\n\n  componentWillUnmount() {\n    if (this.coreListener) {\n      this.coreListener();\n      this.coreListener = null;\n    }\n  }\n\n  // ============================================================================\n  // GESTION D'ÉVÉNEMENTS GRANULAIRES - Filtrage par actuateur\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    const { actuator } = this.props;\n    if (!actuator) return;\n\n    // Événements granulaires concernant CET actuateur spécifiquement\n    if (event === 'actuator:settingsChanged' || \n        event === 'actuator:settingsReset' ||\n        event === 'actuator:plugged' ||\n        event === 'actuator:unplugged') {\n      \n      // Filtrage: Ne re-render que si c'est NOTRE actuateur\n      if (data.actuatorIndex === actuator.index) {\n        this._triggerRender();\n      }\n      return;\n    }\n\n    // Événements de canal concernant CET actuateur\n    if (event === 'channel:plugged' || event === 'channel:unplugged') {\n      // Filtrage: Ne re-render que si c'est NOTRE actuateur qui est affecté\n      if (data.actuatorIndex === actuator.index) {\n        this._triggerRender();\n      }\n      return;\n    }\n\n    // Événements globaux qui peuvent affecter la compatibilité\n    const globalEvents = [\n      'funscript:load',     // Nouveaux canaux disponibles\n      'funscript:channels', // Liste des canaux mise à jour\n      'buttplug:device'     // Device changé (peut affecter l'actuateur)\n    ];\n    \n    if (globalEvents.includes(event)) {\n      this._triggerRender();\n    }\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  handleToggleExpanded = () => {\n    this.setState({ isExpanded: !this.state.isExpanded }, () => {\n      // ✅ ANCIEN: this.props.onResize?.();\n      // ✅ NOUVEAU: Bus d'événements avec index actuator\n      this.core.notify('component:resize', {\n        source: 'ActuatorSettingsComponent',\n        reason: `actuator-${this.props.actuator?.index}-${this.state.isExpanded ? 'expanded' : 'collapsed'}`\n      });\n    });\n  }\n\n  // ============================================================================\n  // ACTIONS SIMPLIFIÉES - Appels directs core, pas d'indirections\n  // ============================================================================\n\n  handleGlobalScaleChange = (scale) => {\n    // Appel direct core - la notification sera faite par ButtPlugManager\n    this.core.buttplug.setGlobalScale(scale);\n  }\n\n  handleActuatorSettingChange = (key, value) => {\n    const { actuator } = this.props;\n    if (!actuator) return;\n    \n    // Mise à jour directe sur l'instance - la notification sera faite par Actuator\n    actuator.updateSettings({ [key]: value });\n  }\n\n  handleChannelMapping = (channelName) => {\n    const { actuator } = this.props;\n    if (!actuator) return;\n    \n    if (channelName === '' || channelName === null) {\n      // Appel direct instance - la notification sera faite par Channel/Actuator\n      actuator.unplug();\n    } else {\n      // Appel direct core + instance - la notification sera faite par Channel\n      const channel = this.core.funscript.getChannel(channelName);\n      if (channel) {\n        channel.plug(actuator);\n      }\n    }\n  }\n\n  // ============================================================================\n  // RENDER PRINCIPAL - Structure simplifiée\n  // ============================================================================\n  render() {\n    return (\n      <div className=\"fp-actuator-settings\">\n        {this.renderCompactLine()}\n        {this.renderExpandedSettings()}\n      </div>\n    );\n  }\n\n  // ============================================================================\n  // LIGNE COMPACTE - Suppression du sur-nesting fp-expandable > fp-compact-line\n  // ============================================================================\n  renderCompactLine() {\n    const { actuator } = this.props;\n    const { isExpanded } = this.state;\n    \n    if (!actuator) {\n      return <div className=\"fp-actuator-settings-error\">No actuator provided</div>;\n    }\n    \n    // Accès direct core pour canaux compatibles\n    const allChannels = this.core.funscript.getChannels();\n    const compatibleChannels = allChannels.filter(channel => \n      channel.canPlugTo(actuator)\n    );\n    \n    const assignedChannel = actuator.assignedChannel;\n    \n    // Logique diagnostic en place\n    let usabilityMessage = null;\n    if (actuator.settings.enabled) {\n      if (allChannels.length === 0) {\n        usabilityMessage = 'Load funscript first';\n      } else if (compatibleChannels.length === 0) {\n        // Diagnostic rapide\n        const hasRotateCapability = actuator.capability === 'rotate';\n        const hasNegativeChannels = allChannels.some(channel => channel.type === 'polar');\n        \n        if (hasNegativeChannels && !hasRotateCapability) {\n          usabilityMessage = 'Funscript has bipolar channels (needs rotate actuator)';\n        } else if (!hasNegativeChannels && hasRotateCapability) {\n          usabilityMessage = 'Funscript has only unipolar channels (rotate not needed)';\n        } else {\n          usabilityMessage = 'No compatible channels in current funscript';\n        }\n      }\n    }\n    \n    return (\n      <div className=\"fp-actuator-settings-header\">\n        \n        {/* Nom actuateur avec indicateur de statut */}\n        <span className={`fp-actuator-settings-badge ${!actuator.settings.enabled ? 'fp-actuator-settings-badge-disabled' : ''}`}>\n          #{actuator.index} ({actuator.capability})\n          {!actuator.settings.enabled && (\n            <span \n              className=\"fp-actuator-settings-warning\"\n              title={usabilityMessage}\n            >\n              ⚠️\n            </span>\n          )}\n        </span>\n        \n        {/* Enable toggle */}\n        <label className=\"fp-actuator-settings-enable-toggle\">\n          <input\n            className=\"fp-actuator-settings-enable-checkbox\"\n            type=\"checkbox\"\n            checked={actuator.settings.enabled}\n            onChange={(e) => this.handleActuatorSettingChange('enabled', e.target.checked)}\n            title={!actuator.settings.enabled ? usabilityMessage : \"Enable/disable this actuator\"}\n          />\n        </label>\n        \n        {/* Sélecteur canaux compatibles */}\n        <select\n          className=\"fp-actuator-settings-channel-select\"\n          value={assignedChannel?.name || ''}\n          onChange={(e) => this.handleChannelMapping(e.target.value)}\n          disabled={!actuator.settings.enabled}\n          title={!actuator.settings.enabled ? usabilityMessage : \"Assign compatible channel to this actuator\"}\n        >\n          <option value=\"\">None</option>\n          {compatibleChannels.map((channel) => {\n            const bipolarIndicator = channel.type === 'polar' ? ' (±)' : '';\n            return (\n              <option key={channel.name} value={channel.name}>\n                {channel.name}{bipolarIndicator}\n              </option>\n            );\n          })}\n        </select>\n        \n        {/* Expand toggle */}\n        <button \n          className=\"fp-actuator-settings-expand-toggle\"\n          onClick={this.handleToggleExpanded}\n        >\n          <FeatherIcon \n            name={isExpanded ? \"chevron-up\" : \"chevron-down\"} \n            size={18} \n            className=\"fp-icon-button\"\n          />\n        </button>\n        \n      </div>\n    );\n  }\n\n  // ============================================================================\n  // SETTINGS EXPANDUS - Suppression du sur-nesting fp-expanded > fp-layout-column\n  // ============================================================================\n  renderExpandedSettings() {\n    if (!this.state.isExpanded) return null;\n    \n    const { actuator } = this.props;\n    \n    if (!actuator) return null;\n    \n    // Accès direct core pour canaux compatibles\n    const allChannels = this.core.funscript.getChannels();\n    const compatibleChannels = allChannels.filter(channel => \n      channel.canPlugTo(actuator)\n    );\n\n    return (\n      <div className=\"fp-actuator-settings-expanded\">\n        \n        {/* Message de diagnostic si pas utilisable */}\n        {!actuator.settings.enabled && allChannels.length === 0 && (\n          <div className=\"fp-actuator-settings-warning-message\">\n            📄 Load a funscript first\n          </div>\n        )}\n        \n        {/* Info sur les canaux compatibles si utilisable */}\n        {actuator.settings.enabled && compatibleChannels.length > 0 && (\n          <div className=\"fp-actuator-settings-compatibility-info\">\n            Compatible with {compatibleChannels.length} channel(s): {compatibleChannels.map(ch => ch.name).join(', ')}\n          </div>\n        )}\n        \n        {/* Scale + Offset en horizontal */}\n        <div className=\"fp-actuator-settings-controls\">\n          \n          {/* Scale */}\n          <div className=\"fp-actuator-settings-scale-control\">\n            <label className=\"fp-actuator-settings-scale-label\">\n              Scale: {((actuator.settings.scale || 1) * 100).toFixed(0)}%\n            </label>\n            <input\n              className=\"fp-actuator-settings-scale-range\"\n              type=\"range\"\n              min=\"0\"\n              max=\"2\"\n              step=\"0.01\"\n              value={actuator.settings.scale || 1}\n              onChange={(e) => this.handleActuatorSettingChange('scale', parseFloat(e.target.value))}\n              disabled={!actuator.settings.enabled}\n            />\n          </div>\n\n          {/* Time Offset */}\n          <div className=\"fp-actuator-settings-offset-control\">\n            <label className=\"fp-actuator-settings-offset-label\">\n              Time Offset: {((actuator.settings.timeOffset || 0) * 1000).toFixed(0)}ms\n            </label>\n            <input\n              className=\"fp-actuator-settings-offset-range\"\n              type=\"range\"\n              min=\"-0.5\"\n              max=\"0.5\"\n              step=\"0.001\"\n              value={actuator.settings.timeOffset || 0}\n              onChange={(e) => this.handleActuatorSettingChange('timeOffset', parseFloat(e.target.value))}\n              disabled={!actuator.settings.enabled}\n            />\n          </div>\n          \n        </div>\n\n        {/* Invert */}\n        <label className=\"fp-actuator-settings-invert-toggle\">\n          <input\n            className=\"fp-actuator-settings-invert-checkbox\"\n            type=\"checkbox\"\n            checked={actuator.settings.invert || false}\n            onChange={(e) => this.handleActuatorSettingChange('invert', e.target.checked)}\n            disabled={!actuator.settings.enabled}\n          />\n          <span className=\"fp-actuator-settings-invert-label\">Invert Values</span>\n        </label>        \n      </div>\n    );\n  }\n}\n\nexport default ActuatorSettingsComponent;","import React, { Component } from 'react';\nimport FeatherIcon from './FeatherIcon';\n\n/**\n * ChannelSettingsComponent - Configuration manuelle des champs d'actions\n * \n * RESPONSABILITÉS:\n * - UI minimaliste pour configurer timeField, valueField, directionField, durationField\n * - Bouton discret \"Configure Action Channels\" en bas des settings\n * - Dropdowns simples avec options détectées + \"none\"\n * - Permet de convertir canaux polar → scalar via \"none\" sur directionField\n */\nclass ChannelSettingsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=props.core\n    \n    this.state = {\n      isExpanded: false,\n      renderTrigger: 0,\n      pendingConfig: {} // Config en cours avant validation\n    };\n    \n    this.coreListener = null;\n  }\n\n  componentDidMount() {\n    this.coreListener = this.core.addListener(this.handleEvent);\n  }\n\n  componentWillUnmount() {\n    if (this.coreListener) {\n      this.coreListener();\n      this.coreListener = null;\n    }\n  }\n\n  // ============================================================================\n  // GESTION D'ÉVÉNEMENTS\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    const eventsToReact = [\n      'funscript:load',     // Nouveau funscript → reset config\n      'funscript:reset'     // Reset → masquer\n    ];\n    \n    if (eventsToReact.includes(event)) {\n      if (event === 'funscript:load') {\n        this.setState({ pendingConfig: {}});\n      }\n      if (event === 'funscript:reset') {\n        this.setState({ isExpanded: false });\n      }\n      this._triggerRender();\n    }\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  // ============================================================================\n  // ACTIONS\n  // ============================================================================\n\n  handleToggleExpanded = () => {\n    this.setState({ isExpanded: !this.state.isExpanded }, () => {\n      // ✅ ANCIEN: this.props.onResize?.();\n      // ✅ NOUVEAU: Bus d'événements\n      this.core.notify('component:resize', {\n        source: 'ChannelSettingsComponent',\n        reason: `config-${this.state.isExpanded ? 'expanded' : 'collapsed'}`\n      });\n    });\n  }\n\n  handleFieldChange = (channelName, fieldType, value) => {\n    this.setState(prevState => ({\n      pendingConfig: {\n        ...prevState.pendingConfig,\n        [channelName]: {\n          ...prevState.pendingConfig[channelName],\n          [fieldType]: value === 'none' ? null : value\n        }\n      }\n    }));\n  }\n\n  handleValidate = () => {  // Enlever async\n    try {\n      const originalData = this.core.funscript.data;\n      if (originalData) {\n        this.core.funscript.loadWithCustomFieldConfig(originalData, pendingConfig); // Enlever await\n        this.setState({ pendingConfig: {}, isExpanded: false });\n      }\n    } catch (error) {\n      console.error('Failed to apply channel configuration:', error);\n    }\n  }\n\n  // ============================================================================\n  // HELPERS\n  // ============================================================================\n\n  getCurrentConfig = (channelName, fieldType) => {\n    const { pendingConfig } = this.state;\n    const channel = this.core.funscript.getChannel(channelName);\n    \n    // Valeur en cours d'édition ou valeur actuelle du canal\n    if (pendingConfig[channelName] && pendingConfig[channelName][fieldType] !== undefined) {\n      return pendingConfig[channelName][fieldType] || 'none';\n    }\n    \n    if (channel && channel.fieldConfig) {\n      return channel.fieldConfig[fieldType] || 'none';\n    }\n    \n    // Defaults par type\n    const defaults = {\n      timeField: 'at',\n      valueField: 'pos',\n      directionField: 'none',\n      durationField: 'none'\n    };\n    \n    return defaults[fieldType] || 'none';\n  }\n\n  getAvailableFields = (detectedFields, fieldType) => {\n    const fieldMap = {\n      timeField: 'availableTimeFields',\n      valueField: 'availableValueFields', \n      directionField: 'availableDirectionFields',\n      durationField: 'availableDurationFields'\n    };\n    \n    const availableKey = fieldMap[fieldType];\n    return detectedFields[availableKey] || [];\n  }\n\n  hasPendingChanges = () => {\n    return Object.keys(this.state.pendingConfig).length > 0;\n  }\n\n  // ============================================================================\n  // RENDER\n  // ============================================================================\n\n  render() {\n    const { isExpanded } = this.state;\n    \n    // Ne s'afficher que si funscript chargé\n    if (!this.core.funscript.hasFunscript()) {\n      return null;\n    }\n    \n    const detectedFields = this.core.funscript.getDetectedFields();\n    const channelCount = Object.keys(detectedFields).length;\n    \n    return (\n      <div className=\"fp-channel-settings\">\n        \n        {/* Header avec toggle - plus de div inutile */}\n        <div className=\"fp-channel-settings-header\">\n          <span className=\"fp-channel-settings-title\">\n            Configure Action Channels ({channelCount})\n          </span>\n          <button\n            className=\"fp-channel-settings-toggle\"\n            onClick={this.handleToggleExpanded}\n          >\n            <FeatherIcon \n              name={isExpanded ? \"chevron-up\" : \"chevron-down\"} \n              size={18} \n              className=\"fp-icon-button\"\n            />\n          </button>\n        </div>\n        \n        {/* Zone expandue */}\n        {this.renderExpandedSettings()}\n        \n      </div>\n    );\n  }\n\n  // ============================================================================\n  // SETTINGS EXPANDUS - Suppression du sur-nesting\n  // ============================================================================\n  renderExpandedSettings = () => {\n    if (!this.state.isExpanded) return null;\n    \n    const detectedFields = this.core.funscript.getDetectedFields();\n    const channelNames = Object.keys(detectedFields);\n    \n    if (channelNames.length === 0) {\n      return (\n        <div className=\"fp-channel-settings-empty\">\n          No channels detected. Load a funscript first.\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fp-channel-settings-expanded\">\n        \n        {/* Config par canal */}\n        {channelNames.map(channelName => \n          this.renderChannelConfig(channelName, detectedFields[channelName])\n        )}\n        \n        {/* Actions */}\n        <div className=\"fp-channel-settings-actions\">\n          <button \n            className=\"fp-channel-settings-validate-btn\"\n            onClick={this.handleValidate}\n            disabled={!this.hasPendingChanges()}\n          >\n            ✓ Validate Changes\n          </button>\n          \n          {this.hasPendingChanges() && (\n            <button \n              className=\"fp-channel-settings-cancel-btn\"\n              onClick={() => this.setState({ pendingConfig: {} })}\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n        \n      </div>\n    );\n  }\n\n  // ============================================================================\n  // CONFIG CANAL - Suppression du sur-nesting\n  // ============================================================================\n  renderChannelConfig = (channelName, detectedFields) => {\n    const fieldTypes = [\n      { key: 'timeField', label: 'Time' },\n      { key: 'valueField', label: 'Value' },\n      { key: 'directionField', label: 'Direction' },\n      { key: 'durationField', label: 'Duration' }\n    ];\n\n    return (\n      <div className=\"fp-channel-settings-channel\">\n        \n        {/* Nom du canal */}\n        <span className=\"fp-channel-settings-channel-name\">\n          {channelName}\n        </span>\n        \n        {/* Les 4 champs inline */}\n        {fieldTypes.map(({ key, label }) => {\n          const availableFields = this.getAvailableFields(detectedFields, key);\n          const currentValue = this.getCurrentConfig(channelName, key);\n          \n          return (\n            <div key={key} className=\"fp-channel-settings-field\">\n              <label className=\"fp-channel-settings-field-label\">\n                {label}:\n              </label>\n              <select\n                className=\"fp-channel-settings-field-select\"\n                value={currentValue}\n                onChange={(e) => this.handleFieldChange(channelName, key, e.target.value)}\n              >\n                <option value=\"none\">none</option>\n                {availableFields.map(field => (\n                  <option key={field} value={field}>{field}</option>\n                ))}\n              </select>\n            </div>\n          );\n        })}\n        \n      </div>\n    );\n  }\n}\n\nexport default ChannelSettingsComponent;","import React, { Component } from 'react';\nimport ButtPlugSettingsComponent from './ButtPlugSettingsComponent';\nimport ActuatorSettingsComponent from './ActuatorSettingsComponent';\nimport ChannelSettingsComponent from './ChannelSettingsComponent'; // ✅ NOUVEAU: Import du composant de config des canaux\nimport FeatherIcon from './FeatherIcon';\n\n/**\n * HapticSettingsComponent - ✅ NETTOYÉ: UI pure sans notifications sauf resize\n * \n * RESPONSABILITÉS SIMPLIFIÉES:\n * - Orchestrateur UI simple (ButtPlug + Actuators + Channel Settings)\n * - Appels directs this.core.xxx (pas d'indirections)\n * - Re-render intelligent sur événements globaux uniquement\n * - ✅ CLEAN: Pas de notifications status (c'est aux managers de le faire)\n * - Laisse les sous-composants gérer leurs propres événements granulaires\n */\nclass HapticSettingsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=props.core\n    \n    this.state = {\n      isExpanded: false,\n      renderTrigger: 0\n    };\n    \n    this.coreListener = null;\n  }\n\n  componentDidMount() {\n    this.coreListener = this.core.addListener(this.handleEvent);\n  }\n\n  componentWillUnmount() {\n    if (this.coreListener) {\n      this.coreListener();\n      this.coreListener = null;\n    }\n  }\n\n  // ============================================================================\n  // GESTION D'ÉVÉNEMENTS GRANULAIRES - Filtrage des événements globaux\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    // Filtrage intelligent: Ne réagir qu'aux événements qui affectent \n    // la structure globale ou les paramètres master\n    \n    // 1. Événements de structure (qui changent la liste/config des actuateurs)\n    const structuralEvents = [\n      'buttplug:device',        // Device changé → nouveaux actuateurs\n      'funscript:load',         // Nouveau funscript → nouveaux canaux\n      'funscript:channels',     // Canaux mis à jour\n      'buttplug:connection'     // Connection status → affecte l'affichage global\n    ];\n\n    // 2. Événements master/globaux (qui affectent tous les actuateurs)\n    const masterEvents = [\n      'buttplug:globalScale',   // Master scale changé\n      'buttplug:globalOffset',  // Master offset changé\n      'core:autoConnect',       // Auto-connect terminé\n      'core:autoMap'           // Auto-map terminé\n    ];\n\n    // Réaction: Uniquement aux événements structurels et master\n    if (structuralEvents.includes(event) || masterEvents.includes(event)) {\n      this._triggerRender();\n    }\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  // ============================================================================\n  // ACTIONS SIMPLIFIÉES - Appels directs core, pas d'indirections\n  // ============================================================================\n\n  handleToggleExpanded = () => {\n    this.setState({ isExpanded: !this.state.isExpanded }, () => {\n      // ✅ ANCIEN: this.props.onResize?.();\n      // ✅ NOUVEAU: Bus d'événements\n      this.core.notify('component:resize', {\n        source: 'HapticSettingsComponent',\n        reason: `main-settings-${this.state.isExpanded ? 'expanded' : 'collapsed'}`\n      });\n    });\n  }\n\n  handleAutoMap = () => {\n    // Appel direct core - les notifications seront faites par FunPlayerCore\n    const mapResult = this.core.autoMapChannels();\n  }\n\n  handleUpdateRateChange = (newRate) => {\n    // Délégation props (technique UI)\n    this.props.onUpdateRateChange?.(newRate);\n  }\n\n  handleGlobalScaleChange = (scale) => {\n    // Appel direct core - les notifications seront faites par ButtPlugManager\n    this.core.buttplug.setGlobalScale(scale);\n  }\n\n  handleGlobalOffsetChange = (offset) => {\n    // Appel direct core - les notifications seront faites par ButtPlugManager\n    this.core.buttplug.setGlobalOffset(offset);\n  }\n\n  handleIntifaceUrlChange = (newUrl) => {\n    // Appel direct core - les notifications seront faites par ButtPlugManager\n    this.core.buttplug.setIntifaceUrl(newUrl);\n  }\n\n  // ============================================================================\n  // RENDER PRINCIPAL - Déjà clean\n  // ============================================================================\n  render() {\n    const { isExpanded } = this.state;\n    \n    return (\n      <div className=\"fp-haptic-settings\">\n        \n        {/* Barre principale */}\n        <ButtPlugSettingsComponent\n          core={this.core}\n          onToggleSettings={this.handleToggleExpanded}\n          isSettingsExpanded={isExpanded}\n        />\n        \n        {/* Settings détaillés */}\n        {this.renderExpandedSettings()}\n        \n      </div>\n    );\n  }\n\n  // ============================================================================\n  // SETTINGS EXPANDUS - Suppression de tout le sur-nesting\n  // ============================================================================\n  renderExpandedSettings() {\n    if (!this.state.isExpanded) return null;\n    \n    // Accès direct core pour toutes les données globales\n    const funscriptChannels = this.core.funscript.getChannelNames();\n    const actuators = this.core.buttplug.getActuators();\n    const updateRate = this.props.onGetUpdateRate?.() || 60;\n    const globalOffset = this.core.buttplug.getGlobalOffset();\n    const globalScale = this.core.buttplug.getGlobalScale();\n    const intifaceUrl = this.core.buttplug.getIntifaceUrl();\n    const isConnected = this.core.buttplug.getStatus()?.isConnected || false;\n    \n    return (\n      <div className=\"fp-haptic-settings-expanded\">\n        \n        {/* Section Connection */}\n        <div className=\"fp-haptic-settings-connection-section\">\n          <h6 className=\"fp-haptic-settings-section-title\">\n            <FeatherIcon \n              name=\"bluetooth\" \n              size={18} \n              className=\"fp-haptic-settings-section-header-icon\"\n            />\n            Connection\n          </h6>\n          \n          {/* Intiface URL + Update Rate */}\n          <div className=\"fp-haptic-settings-connection-controls\">\n            \n            {/* Intiface WebSocket URL */}\n            <div className=\"fp-haptic-settings-url-control\">\n              <label className=\"fp-haptic-settings-url-label\">Intiface WebSocket URL</label>\n              <div className=\"fp-haptic-settings-url-input-group\">\n                <input\n                  className=\"fp-haptic-settings-url-input\"\n                  type=\"text\"\n                  value={intifaceUrl}\n                  onChange={(e) => this.handleIntifaceUrlChange(e.target.value)}\n                  placeholder=\"ws://localhost:12345\"\n                  title=\"WebSocket URL for Intiface Central connection\"\n                />\n                <button\n                  className=\"fp-haptic-settings-url-reset-btn\"\n                  onClick={() => this.handleIntifaceUrlChange('ws://localhost:12345')}\n                  title=\"Reset to default\"\n                >\n                  <FeatherIcon \n                    name=\"rotate-ccw\" \n                    size={14} \n                    className=\"fp-icon-button\"\n                  />\n                </button>\n              </div>\n              <span className=\"fp-haptic-settings-url-status\">\n                <FeatherIcon \n                  name={isConnected ? `check-circle` : `alert-triangle`} \n                  size={14} \n                  className=\"fp-icon\"\n                  style={{marginRight:\"6px\"}}\n                />\n                {isConnected ? \n                  `Connected to ${intifaceUrl}` : \n                  `Not connected`\n                }\n              </span>\n            </div>\n            \n            {/* Update Rate */}\n            <div className=\"fp-haptic-settings-rate-control\">\n              <label className=\"fp-haptic-settings-rate-label\">Update Rate</label>\n              <select \n                className=\"fp-haptic-settings-rate-select\"\n                value={updateRate} \n                onChange={(e) => this.handleUpdateRateChange(parseInt(e.target.value))}\n                title=\"Haptic command frequency (higher = smoother but more CPU)\"\n              >\n                <option value={10}>10 Hz</option>\n                <option value={30}>30 Hz</option>\n                <option value={60}>60 Hz</option>\n                <option value={90}>90 Hz</option>\n                <option value={120}>120 Hz</option>\n              </select>\n              <span className=\"fp-haptic-settings-rate-info\">\n                {(1000/updateRate).toFixed(1)}ms interval\n              </span>\n            </div>\n            \n          </div>\n        </div>\n\n        {/* Divider */}\n        <div className=\"fp-haptic-settings-divider\"></div>\n\n        {/* Section Master */}\n        <div className=\"fp-haptic-settings-master-section\">\n          <h6 className=\"fp-haptic-settings-section-title\">\n            {/* ✅ MODIFIÉ: Feather icon au lieu d'emoji */}\n            <FeatherIcon \n              name=\"sliders\" \n              size={18} \n              className=\"fp-haptic-settings-section-header-icon\"\n            />\n            Master\n          </h6>\n          \n          {/* Global Scale + Global Offset */}\n          <div className=\"fp-haptic-settings-master-controls\">\n            \n            {/* Global Scale */}\n            <div className=\"fp-haptic-settings-scale-control\">\n              <label className=\"fp-haptic-settings-scale-label\">\n                Global Scale: {((globalScale || 1) * 100).toFixed(0)}%\n              </label>\n              <div className=\"fp-haptic-settings-scale-input-group\">\n                <input\n                  className=\"fp-haptic-settings-scale-range\"\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"2\"\n                  step=\"0.01\"\n                  value={globalScale || 1}\n                  onChange={(e) => this.handleGlobalScaleChange(parseFloat(e.target.value))}\n                  title=\"Master intensity control for all actuators\"\n                />\n                <input\n                  className=\"fp-haptic-settings-scale-number\"\n                  type=\"number\"\n                  value={globalScale || 1}\n                  onChange={(e) => this.handleGlobalScaleChange(parseFloat(e.target.value) || 1)}\n                  step=\"0.01\"\n                  min=\"0\"\n                  max=\"2\"\n                />\n              </div>\n            </div>\n            \n            {/* Global Offset */}\n            <div className=\"fp-haptic-settings-offset-control\">\n              <label className=\"fp-haptic-settings-offset-label\">\n                Global Offset: {((globalOffset || 0) * 1000).toFixed(0)}ms\n              </label>\n              <div className=\"fp-haptic-settings-offset-input-group\">\n                <input\n                  className=\"fp-haptic-settings-offset-range\"\n                  type=\"range\"\n                  value={globalOffset || 0}\n                  onChange={(e) => this.handleGlobalOffsetChange(parseFloat(e.target.value))}\n                  min=\"-1\"\n                  max=\"1\"\n                  step=\"0.01\"\n                  title=\"Global timing offset for all actuators\"\n                />\n                <input\n                  className=\"fp-haptic-settings-offset-number\"\n                  type=\"number\"\n                  value={globalOffset || 0}\n                  onChange={(e) => this.handleGlobalOffsetChange(parseFloat(e.target.value) || 0)}\n                  step=\"0.01\"\n                  min=\"-1\"\n                  max=\"1\"\n                />\n              </div>\n            </div>\n            \n          </div>\n        </div>\n        \n        {/* Section Channel Configuration */}\n        {funscriptChannels.length > 0 && (\n          <>\n            <div className=\"fp-haptic-settings-divider\"></div>\n            <div className=\"fp-haptic-settings-channels-header\">\n              <h6 className=\"fp-haptic-settings-section-title\">\n                {/* ✅ MODIFIÉ: Feather icon au lieu d'emoji */}\n                <FeatherIcon \n                  name=\"music\" \n                  size={18} \n                  className=\"fp-haptic-settings-section-header-icon\"\n                />\n                Channels\n              </h6>\n            </div>\n            <ChannelSettingsComponent core={this.core}/>\n          </>\n        )}\n\n        {/* Section Actuators */}\n        {funscriptChannels.length > 0 && (\n          <>\n            <div className=\"fp-haptic-settings-divider\"></div>\n            \n            <div className=\"fp-haptic-settings-actuators-section\">\n              <div className=\"fp-haptic-settings-actuators-header\">\n                <h6 className=\"fp-haptic-settings-section-title\">\n                  {/* ✅ MODIFIÉ: Feather icon au lieu d'emoji */}\n                  <FeatherIcon \n                    name=\"activity\" \n                    size={18} \n                    className=\"fp-haptic-settings-section-header-icon\"\n                  />\n                  Actuators\n                </h6>\n                <button \n                  className=\"fp-haptic-settings-automap-btn\"\n                  onClick={this.handleAutoMap}\n                >\n                  Auto Map All ({actuators.length})\n                </button>\n              </div>\n              \n              <div className=\"fp-haptic-settings-actuators-list\">\n                {actuators.map(actuator => (\n                  <ActuatorSettingsComponent\n                    core={this.core}\n                    key={actuator.index}\n                    actuator={actuator}\n                  />\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default HapticSettingsComponent;","import React, { Component } from 'react';\nimport FeatherIcon from './FeatherIcon';\n\nclass HapticVisualizerComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=props.core\n    \n    this.state = {\n      isPlaying: false,\n      showConfig: false\n    };\n    \n    // Canvas\n    this.canvasRef = React.createRef();\n    this.ctx = null;\n    \n    // Animation\n    this.animationId = null;\n    \n    // ✅ SUPPRIMÉ: Trail system (trailHistory, maxTrailFrames)\n    \n    // Configuration - ✅ AJOUT: Rainbow rotation\n    this.config = {\n      resolution: 300,\n      heightScale: 0.95,\n      sigmaMin: 0.07,\n      sigmaMax: 0.15,\n      rainbowIntensity: 0.25,\n      rainbowRotation: 0.0  // ✅ NOUVEAU: Rotation de l'arc-en-ciel (0 à 1)\n    };\n    \n    // Cache de normalisation\n    this.normalizationCache = new Map();\n    \n    // ✅ NOUVEAU: Cache des couleurs pour performance\n    this.colorCache = {\n      rainbowColors: null,    // Array[resolution+1] des couleurs arc-en-ciel\n      actuatorColors: null,   // Map des couleurs par position µ\n      lastRotation: -1,\n      lastResolution: -1,\n      lastNActive: -1         // ✅ AJOUT: Nombre d'actuateurs actifs\n    };\n  }\n\n  // ============================================================================\n  // LIFECYCLE\n  // ============================================================================\n\n  componentDidMount() {\n    if (this.props.visible){\n      setTimeout(() => {\n        this.initCanvas();\n        this.startAnimation();\n      }, 50);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const isPlaying = this.props.isPlaying || false;\n    if (isPlaying !== this.state.isPlaying) {\n      this.setState({ isPlaying });\n    }\n    \n    // ✅ CORRECTION: Réinitialiser le canvas quand redevenu visible\n    if (prevProps.visible !== this.props.visible) {\n      this.core.notify('component:resize', {\n        source: 'HapticVisualizerComponent',\n        reason: `visibility-${this.props.visible ? 'shown' : 'hidden'}`\n      });\n      \n      if (!prevProps.visible && this.props.visible) {\n        // ✅ Redevenu visible → réinitialiser\n        setTimeout(() => {\n          this.initCanvas();\n          this.startAnimation();\n        }, 50);\n      } else if (prevProps.visible && !this.props.visible) {\n        // ✅ AJOUTÉ: Devenu invisible → arrêter l'animation\n        if (this.animationId) {\n          cancelAnimationFrame(this.animationId);\n          this.animationId = null;\n        }\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    // ✅ AMÉLIORÉ: Cleanup plus explicite\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n      console.log('🧹 HapticVisualizer animation cleanup completed');\n    }\n  }\n\n  // ============================================================================\n  // CANVAS\n  // ============================================================================\n\n  initCanvas = () => {\n    const canvas = this.canvasRef.current;\n    if (!canvas) return;\n    \n    this.ctx = canvas.getContext('2d');\n    \n    const rect = canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    \n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    \n    this.ctx.scale(dpr, dpr);\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n  }\n\n  // ============================================================================\n  // MATHÉMATIQUES - INCHANGÉ\n  // ============================================================================\n\n  gaussian = (x, mu, sigma) => {\n    const coef = 1 / (sigma * Math.sqrt(2 * Math.PI));\n    const exp = Math.exp(-Math.pow(x - mu, 2) / (2 * Math.pow(sigma, 2)));\n    return coef * exp;\n  }\n\n  calculateSigma = (intensity) => {\n    const { sigmaMin, sigmaMax } = this.config;\n    return sigmaMax - intensity * (sigmaMax - sigmaMin);\n  }\n\n  getActuatorPosition = (index, total) => {\n    if (total <= 1) return 0.5;\n    return (index + 1) / (total + 1);\n  }\n\n  getCurrentActuatorData = () => {\n    return this.props.getCurrentActuatorData?.() || new Map();\n  }\n\n  getConfiguredActuatorCount = () => {\n    const actuatorData = this.getCurrentActuatorData();\n    return Math.max(1, actuatorData.size);\n  }\n\n  calculateNormalizationFactor = (n) => {\n    if (this.normalizationCache.has(n)) {\n      return this.normalizationCache.get(n);\n    }\n\n    const { resolution, sigmaMin } = this.config;\n    let maxIntensity = 0;\n\n    for (let i = 0; i <= resolution; i++) {\n      const x = i / resolution;\n      let total = 0;\n\n      for (let j = 0; j < n; j++) {\n        const mu = this.getActuatorPosition(j, n);\n        total += this.gaussian(x, mu, sigmaMin);\n      }\n\n      maxIntensity = Math.max(maxIntensity, total);\n    }\n\n    const factor = maxIntensity > 0 ? 1.0 / maxIntensity : 1.0;\n    this.normalizationCache.set(n, factor);\n    return factor;\n  }\n\n  // ============================================================================\n  // RENDU - SIMPLIFIÉ\n  // ============================================================================\n\n  getActiveActuators = (actuatorData) => {\n    // ✅ CORRIGÉ: Un actuateur est actif s'il est présent dans actuatorData\n    // peu importe sa valeur (peut être 0)\n    return Array.from(actuatorData.entries());\n  }\n\n  // ============================================================================\n  // CACHE DES COULEURS POUR PERFORMANCE\n  // ============================================================================\n\n  rebuildColorCache = () => {\n    const { resolution, rainbowRotation } = this.config;\n    \n    // Cache arc-en-ciel (resolution+1 points)\n    this.colorCache.rainbowColors = Array.from({length: resolution + 1}, (_, i) => \n      this.getColorAt(i / resolution)\n    );\n    \n    // Cache couleurs actuateurs (positions µ typiques)\n    this.colorCache.actuatorColors = new Map();\n    for (let nActuators = 1; nActuators <= 8; nActuators++) {\n      for (let i = 0; i < nActuators; i++) {\n        const mu = this.getActuatorPosition(i, nActuators);\n        const color = this.getColorAt(mu);\n        this.colorCache.actuatorColors.set(`${nActuators}-${i}`, color);\n      }\n    }\n    \n    // Marquer comme à jour\n    this.colorCache.lastRotation = rainbowRotation;\n    this.colorCache.lastResolution = resolution;\n  }\n\n  ensureColorCache = (nActive) => {\n    const { resolution, rainbowRotation } = this.config;\n    \n    if (this.colorCache.lastRotation !== rainbowRotation || \n        this.colorCache.lastResolution !== resolution ||\n        this.colorCache.lastNActive !== nActive) {\n      this.rebuildColorCache();\n      this.colorCache.lastNActive = nActive;  // ✅ AJOUT: Sauvegarder nActive\n    }\n  }\n\n  getCachedRainbowColor = (xIndex) => {\n    return this.colorCache.rainbowColors[xIndex];\n  }\n\n  getCachedActuatorColor = (nActuators, actuatorIndex, intensity = 1) => {\n    const baseColor = this.colorCache.actuatorColors.get(`${nActuators}-${actuatorIndex}`);\n    if (!baseColor) return [255, 255, 255]; // Fallback blanc\n    \n    return [\n      Math.round(baseColor[0] * intensity),\n      Math.round(baseColor[1] * intensity),\n      Math.round(baseColor[2] * intensity)\n    ];\n  }\n\n  // ============================================================================\n  // SYSTÈME DE COULEURS CENTRALISÉ - HSV pour arc-en-ciel smooth\n  // ============================================================================\n\n  hsvToRgb = (h, s, v) => {\n    const c = v * s;\n    const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n    const m = v - c;\n    \n    let r, g, b;\n    \n    if (h >= 0 && h < 60) {\n      [r, g, b] = [c, x, 0];\n    } else if (h >= 60 && h < 120) {\n      [r, g, b] = [x, c, 0];\n    } else if (h >= 120 && h < 180) {\n      [r, g, b] = [0, c, x];\n    } else if (h >= 180 && h < 240) {\n      [r, g, b] = [0, x, c];\n    } else if (h >= 240 && h < 300) {\n      [r, g, b] = [x, 0, c];\n    } else {\n      [r, g, b] = [c, 0, x];\n    }\n    \n    return [\n      Math.round((r + m) * 255),\n      Math.round((g + m) * 255),\n      Math.round((b + m) * 255)\n    ];\n  }\n\n  getColorAt = (x) => {\n    // Arc-en-ciel HSV parfaitement smooth qui boucle\n    const hue = ((x + this.config.rainbowRotation) % 1.0) * 360;\n    const saturation = 1.0;  // Couleurs vives\n    const value = 1.0;       // Luminosité max\n    \n    return this.hsvToRgb(hue, saturation, value);\n  }\n\n  getActuatorColor = (mu, intensity = 1) => {\n    const baseColor = this.getColorAt(mu);\n    return [\n      Math.round(baseColor[0] * intensity),\n      Math.round(baseColor[1] * intensity),\n      Math.round(baseColor[2] * intensity)\n    ];\n  }\n\n  getRainbowBackgroundColor = (x) => {\n    return this.getColorAt(x);\n  }\n\n  calculatePoints = (activeActuators, width, height) => {\n    const nConfigured = this.getConfiguredActuatorCount();\n    const nActive = activeActuators.length;\n    const { resolution, heightScale } = this.config;\n    const normFactor = this.calculateNormalizationFactor(nConfigured);\n    \n    // ✅ NOUVEAU: S'assurer que le cache couleurs est à jour\n    this.ensureColorCache(nActive);\n    \n    const points = [];\n\n    for (let i = 0; i <= resolution; i++) {\n      const x = i / resolution;\n      let totalIntensity = 0;\n      let weightedColor = [0, 0, 0];\n\n      // ✅ MODIFIÉ: Plus de base arc-en-ciel globale\n      // L'arc-en-ciel influence maintenant chaque gaussienne individuellement\n\n      // Ajouter les contributions des actuators\n      activeActuators.forEach(([actuatorIndex, data], arrayIndex) => {\n        const mu = this.getActuatorPosition(arrayIndex, nActive);\n        const intensity = Math.abs(data.value);\n        const sigma = this.calculateSigma(intensity);\n        const gaussianValue = this.gaussian(x, mu, sigma) * intensity;\n\n        if (gaussianValue > 0.001) {\n          // ✅ OPTIMISÉ: Couleurs depuis le cache\n          const actuatorColor = this.getCachedActuatorColor(nActive, arrayIndex, intensity);\n          const rainbowColorAtX = this.getCachedRainbowColor(i);\n          \n          // ✅ NOUVEAU: Mélange selon rainbowIntensity\n          const blendFactor = this.config.rainbowIntensity;\n          const finalColor = [\n            actuatorColor[0] * (1 - blendFactor) + rainbowColorAtX[0] * blendFactor,\n            actuatorColor[1] * (1 - blendFactor) + rainbowColorAtX[1] * blendFactor,\n            actuatorColor[2] * (1 - blendFactor) + rainbowColorAtX[2] * blendFactor\n          ];\n          \n          // Ajouter à la moyenne pondérée\n          weightedColor[0] += finalColor[0] * gaussianValue;\n          weightedColor[1] += finalColor[1] * gaussianValue;\n          weightedColor[2] += finalColor[2] * gaussianValue;\n          totalIntensity += gaussianValue;\n        }\n      });\n\n      if (totalIntensity > 0) {\n        // Normaliser les couleurs par le total\n        weightedColor = weightedColor.map(c => Math.round(c / totalIntensity));\n      }\n\n      points.push({\n        x: x * width,\n        y: height - (totalIntensity * normFactor * heightScale * height),\n        intensity: totalIntensity * normFactor,\n        color: weightedColor\n      });\n    }\n\n    return points;\n  }\n\n  renderGradientFill = (points, width, height) => {\n    if (points.length < 2) return;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, height);\n    \n    points.forEach((point, i) => {\n      if (i === 0) {\n        this.ctx.lineTo(point.x, point.y);\n      } else {\n        const prevPoint = points[i - 1];\n        const cpX = (prevPoint.x + point.x) / 2;\n        this.ctx.quadraticCurveTo(prevPoint.x, prevPoint.y, cpX, (prevPoint.y + point.y) / 2);\n      }\n    });\n\n    this.ctx.lineTo(width, height);\n    this.ctx.closePath();\n\n    const gradient = this.ctx.createLinearGradient(0, 0, width, 0);\n    points.forEach((point, i) => {\n      const stop = i / (points.length - 1);\n      const [r, g, b] = point.color;\n      const alpha = Math.min(1, point.intensity * 0.8);\n      gradient.addColorStop(stop, `rgba(${r}, ${g}, ${b}, ${alpha})`);\n    });\n\n    this.ctx.fillStyle = gradient;\n    this.ctx.fill();\n\n    this.ctx.shadowColor = 'rgba(255, 255, 255, 0.2)';\n    this.ctx.shadowBlur = 8;\n    this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n    this.ctx.lineWidth = 1;\n    this.ctx.stroke();\n    this.ctx.shadowBlur = 0;\n  }\n\n  // ✅ SUPPRIMÉ: renderTrails() et renderTrailStroke()\n\n  renderCurrentFrame = () => {\n    const actuatorData = this.getCurrentActuatorData();\n    const activeActuators = this.getActiveActuators(actuatorData);\n    \n    if (activeActuators.length === 0) return;\n\n    const canvas = this.canvasRef.current;\n    // ✅ AJOUTÉ: Vérification canvas null avant accès aux propriétés\n    if (!canvas) {\n      return;\n    }\n    \n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n    \n    const points = this.calculatePoints(activeActuators, width, height);\n    this.renderGradientFill(points, width, height);\n  }\n\n  // ============================================================================\n  // ANIMATION - SIMPLIFIÉ\n  // ============================================================================\n\n  startAnimation = () => {\n    const animate = () => {\n      // ✅ AJOUTÉ: Vérification que le composant est toujours monté\n      if (!this.canvasRef.current) {\n        return;\n      }\n      \n      this.renderFrame();\n      this.animationId = requestAnimationFrame(animate);\n    };\n    this.animationId = requestAnimationFrame(animate);\n  }\n\n\n  renderFrame = () => {\n    if (!this.ctx) return;\n\n    const canvas = this.canvasRef.current;\n    // ✅ AJOUTÉ: Vérification canvas null avant accès aux propriétés\n    if (!canvas) {\n      return;\n    }\n\n    this.ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);\n\n    // ✅ SIMPLIFIÉ: Rendu direct de la frame courante, pas de trails\n    this.renderCurrentFrame();\n  }\n\n  // ============================================================================\n  // CONFIGURATION UI\n  // ============================================================================\n\n  toggleConfig = () => {\n    const newState = !this.state.showConfig;\n    \n    this.setState({ showConfig: newState }, () => {\n      this.core.notify('component:resize', {\n        source: 'HapticVisualizerComponent',\n        reason: `config-panel-${newState ? 'expanded' : 'collapsed'}`\n      });\n    });\n  }\n\n  updateConfig = (key, value) => {\n    this.config[key] = value;\n    if (key === 'sigmaMin' || key === 'sigmaMax') {\n      this.normalizationCache.clear();\n    }\n    this.forceUpdate();\n  }\n\n  // ============================================================================\n  // RENDER PRINCIPAL\n  // ============================================================================\n  \n  render() {\n\n    const { visible = true } = this.props;  // ✅ Défaut visible pour rétrocompatibilité\n  \n    // ✅ Option 1: Return null (plus performant, pas d'espace DOM)\n    if (!visible) {\n      return null;\n    }\n\n    return (\n      <div className=\"fp-haptic-visualizer\">\n        \n        {/* Canvas avec bouton config */}\n        <div className=\"fp-haptic-visualizer-canvas-area\">\n          <canvas\n            ref={this.canvasRef}\n            className=\"fp-haptic-visualizer-canvas\"\n          />\n          \n          {/* Bouton config discret */}\n          <button\n            className=\"fp-haptic-visualizer-config-btn\"\n            onClick={this.toggleConfig}\n            title=\"Visualizer settings\"\n          >\n            <FeatherIcon \n              name=\"settings\" \n              size={14} \n              className=\"fp-icon-button\"\n            />\n          </button>\n        </div>\n        \n        {/* Panel de configuration */}\n        {this.state.showConfig && (\n          <div className=\"fp-haptic-visualizer-config\">\n            <div className=\"fp-haptic-visualizer-config-row\">\n              <label className=\"fp-haptic-visualizer-config-label\">\n                Resolution: {this.config.resolution}\n              </label>\n              <input\n                className=\"fp-haptic-visualizer-config-range\"\n                type=\"range\"\n                min=\"50\"\n                max=\"500\"\n                step=\"25\"\n                value={this.config.resolution}\n                onChange={(e) => this.updateConfig('resolution', parseInt(e.target.value))}\n              />\n            </div>\n            \n            <div className=\"fp-haptic-visualizer-config-row\">\n              <label className=\"fp-haptic-visualizer-config-label\">\n                Height: {(this.config.heightScale * 100).toFixed(0)}%\n              </label>\n              <input\n                className=\"fp-haptic-visualizer-config-range\"\n                type=\"range\"\n                min=\"0.1\"\n                max=\"1.0\"\n                step=\"0.05\"\n                value={this.config.heightScale}\n                onChange={(e) => this.updateConfig('heightScale', parseFloat(e.target.value))}\n              />\n            </div>\n            \n            <div className=\"fp-haptic-visualizer-config-row\">\n              <label className=\"fp-haptic-visualizer-config-label\">\n                Sigma Min: {this.config.sigmaMin.toFixed(2)}\n              </label>\n              <input\n                className=\"fp-haptic-visualizer-config-range\"\n                type=\"range\"\n                min=\"0.01\"\n                max=\"0.2\"\n                step=\"0.01\"\n                value={this.config.sigmaMin}\n                onChange={(e) => this.updateConfig('sigmaMin', parseFloat(e.target.value))}\n              />\n            </div>\n            \n            <div className=\"fp-haptic-visualizer-config-row\">\n              <label className=\"fp-haptic-visualizer-config-label\">\n                Sigma Max: {this.config.sigmaMax.toFixed(2)}\n              </label>\n              <input\n                className=\"fp-haptic-visualizer-config-range\"\n                type=\"range\"\n                min=\"0.05\"\n                max=\"0.3\"\n                step=\"0.01\"\n                value={this.config.sigmaMax}\n                onChange={(e) => this.updateConfig('sigmaMax', parseFloat(e.target.value))}\n              />\n            </div>\n            \n            <div className=\"fp-haptic-visualizer-config-row\">\n              <label className=\"fp-haptic-visualizer-config-label\">\n                Rainbow: {(this.config.rainbowIntensity * 100).toFixed(0)}%\n              </label>\n              <input\n                className=\"fp-haptic-visualizer-config-range\"\n                type=\"range\"\n                min=\"0.0\"\n                max=\"1\"\n                step=\"0.05\"\n                value={this.config.rainbowIntensity}\n                onChange={(e) => this.updateConfig('rainbowIntensity', parseFloat(e.target.value))}\n              />\n            </div>\n            \n            <div className=\"fp-haptic-visualizer-config-row\">\n              <label className=\"fp-haptic-visualizer-config-label\">\n                Hue: {(this.config.rainbowRotation * 360).toFixed(0)}°\n              </label>\n              <input\n                className=\"fp-haptic-visualizer-config-range\"\n                type=\"range\"\n                min=\"0.0\"\n                max=\"1.0\"\n                step=\"0.02\"\n                value={this.config.rainbowRotation}\n                onChange={(e) => this.updateConfig('rainbowRotation', parseFloat(e.target.value))}\n              />\n            </div>\n            \n          </div>\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default HapticVisualizerComponent;","import React, { Component } from 'react';\nimport FeatherIcon from './FeatherIcon';\n\n/**\n * LoggingComponent - Composant de debug ultra-simplifié\n * \n * RESPONSABILITÉS:\n * - Affichage des logs centralisés de Core\n * - Interface pour clear/download/copy\n * - Style cohérent avec MediaPlayer\n * - Pure couche d'affichage (pas de logique métier)\n */\nclass LoggingComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=props.core\n    \n    this.state = {\n      autoScroll: true\n    };\n    \n    this.textareaRef = React.createRef();\n    this.coreListener = null;\n    this.resizeObserver = null;\n  }\n\n  // ============================================================================\n  // LIFECYCLE\n  // ============================================================================\n\n  componentDidMount() {\n    this.coreListener = this.core.addListener(this.handleEvent);\n    this.updateTextarea(); // Charger les logs existants\n    if (this.props.visible) {\n      setTimeout(() => {\n        this.setupResizeObserver();\n      }, 10);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.visible && this.props.visible) {\n      setTimeout(() => {\n        this.setupResizeObserver();\n      }, 10);\n    }\n    \n    if (prevProps.visible && !this.props.visible) {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"LoggingComponent unmounting\");\n    \n    if (this.coreListener) {\n      this.coreListener();\n      this.coreListener = null;\n    }\n    \n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n  }\n\n  // ============================================================================\n  // RESIZE OBSERVER\n  // ============================================================================\n\n  setupResizeObserver = () => {\n\n    if (!this.textareaRef.current || !window.ResizeObserver) return;\n    \n    this.resizeObserver = new ResizeObserver(() => {\n      // Déclencher resize parent quand la textarea change de taille\n      setTimeout(() => {\n        this.core.notify('component:resize', {\n          source: 'LoggingComponent',\n          reason: 'textarea-content-changed'\n        });\n      }, 0);\n    });\n    \n    this.resizeObserver.observe(this.textareaRef.current);\n  }\n\n  // ============================================================================\n  // GESTION D'ÉVÉNEMENTS - SIMPLIFIÉ\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    // Rerender sur tous les événements status:* (nouveaux logs dans Core)\n    if (event.startsWith('status:')) {\n      this.updateTextarea();\n    }\n  }\n\n  // ============================================================================\n  // GESTION DES LOGS - ULTRA-SIMPLIFIÉ\n  // ============================================================================\n\n  updateTextarea = () => {\n    if (this.textareaRef.current) {\n      // Récupère les messages formatés depuis Core\n      this.textareaRef.current.value = this.core.logging.getFormattedLogs();\n      \n      // Auto-scroll si activé\n      if (this.state.autoScroll) {\n        this.textareaRef.current.scrollTop = this.textareaRef.current.scrollHeight;\n      }\n    }\n  }\n\n  // ============================================================================\n  // ACTIONS\n  // ============================================================================\n\n  handleClear = () => {\n    this.core.logging.clear();\n  }\n\n  handleDownload = () => {\n    const content = this.core.generateExportContent();\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n    const filename = `funplayer-debug-${timestamp}.log`;\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    this.core.notify?.('status:logging', { message: `Debug logs downloaded: ${filename}`, type: 'success' });\n  }\n\n  handleCopy = async () => {\n    try {\n      const content = this.core.generateExportContent();\n      await navigator.clipboard.writeText(content);\n      this.core.notify?.('status:logging', { message: 'Debug logs copied to clipboard', type: 'success' });\n    } catch (error) {\n      // Fallback: sélectionner le texte\n      if (this.textareaRef.current) {\n        this.textareaRef.current.select();\n        this.core.notify?.('status:logging', { message: 'Logs selected, press Ctrl+C to copy', type: 'info' });\n      }\n    }\n  }\n\n  handleToggleAutoScroll = () => {\n    this.setState(prevState => ({ \n      autoScroll: !prevState.autoScroll \n    }));\n  }\n\n  // ============================================================================\n  // RENDER\n  // ============================================================================\n    \n  render() {\n    const { visible = true } = this.props;  // ✅ Défaut visible pour rétrocompatibilité\n  \n    if (!visible) {\n      return null;  // ✅ Plus propre pour un composant debug\n    }\n\n    const { autoScroll } = this.state;\n    const logCount = this.core.logging.getLogs().length;\n    \n    return (\n      <div className=\"fp-logging\">\n        \n        {/* Header avec titre et actions */}\n        <div className=\"fp-logging-header\">\n          \n          {/* Zone titre */}\n          <div className=\"fp-logging-title\">\n            {/* ✅ MODIFIÉ: Feather icon au lieu d'emoji */}\n            <FeatherIcon \n              name=\"file-text\" \n              size={16} \n              className=\"fp-icon\"\n            />\n            <span className=\"fp-logging-label\">Debug Logs</span>\n            <span className=\"fp-logging-count\">{logCount}</span>\n          </div>\n          \n          {/* Zone actions */}\n          <div className=\"fp-logging-actions\">\n            <button \n              className=\"fp-logging-clear-btn\"\n              onClick={this.handleClear}\n              title=\"Clear logs\"\n            >\n              {/* ✅ MODIFIÉ: Feather icon trash */}\n              <FeatherIcon \n                name=\"trash-2\" \n                size={14} \n                className=\"fp-icon-button\"\n              />\n            </button>\n            \n            <button \n              className=\"fp-logging-download-btn\"\n              onClick={this.handleDownload}\n              title=\"Download logs\"\n            >\n              {/* ✅ MODIFIÉ: Feather icon download */}\n              <FeatherIcon \n                name=\"download\" \n                size={14} \n                className=\"fp-icon-button\"\n              />\n            </button>\n            \n            <button \n              className=\"fp-logging-copy-btn\"\n              onClick={this.handleCopy}\n              title=\"Copy to clipboard\"\n            >\n              {/* ✅ MODIFIÉ: Feather icon copy */}\n              <FeatherIcon \n                name=\"copy\" \n                size={14} \n                className=\"fp-icon-button\"\n              />\n            </button>\n            \n            <button \n              className={`fp-logging-autoscroll-btn ${autoScroll ? 'fp-logging-autoscroll-btn-active' : ''}`}\n              onClick={this.handleToggleAutoScroll}\n              title=\"Toggle auto-scroll\"\n            >\n              {/* ✅ MODIFIÉ: Feather icons pour autoscroll */}\n              <FeatherIcon \n                name={autoScroll ? \"lock\" : \"unlock\"} \n                size={14} \n                className=\"fp-icon-button\"\n              />\n            </button>\n          </div>\n          \n        </div>\n        \n        {/* Zone de logs */}\n        <textarea\n          ref={this.textareaRef}\n          className=\"fp-logging-textarea\"\n          readOnly\n          placeholder=\"Debug logs will appear here...\"\n        />\n        \n      </div>\n    );\n  }\n}\n\nexport default LoggingComponent;","import React, { Component } from 'react';\nimport FeatherIcon from './FeatherIcon'; // ✅ AJOUTÉ: Import du nouveau composant\nimport Logo from './Logo';\n\n/**\n * StatusBarComponent - Barre de status et contrôles UI\n * \n * RESPONSABILITÉS:\n * - Affichage status lecture (play/pause, updateRate)\n * - Boutons toggle (visualizer, debug)\n * - UI pure, pas de logique métier\n * \n * ✅ MODIFIÉ: Utilise FeatherIcon au lieu d'emojis\n */\nclass StatusBarComponent extends Component {\n  \n  render() {\n    const { \n      isPlaying, \n      updateRate, \n      showVisualizer, \n      showDebug,\n      showPlaylist,\n      onToggleVisualizer,\n      onToggleDebug,\n      onTogglePlaylist\n    } = this.props;\n    \n    return (\n      <div className=\"fp-status-bar\">\n        \n        {/* Status lecture */}\n        <span className=\"fp-status-bar-status\">\n          {/* ✅ MODIFIÉ: Feather icons au lieu d'emojis */}\n          <FeatherIcon \n            name={isPlaying ? \"play\" : \"pause\"}  \n            className=\"fp-status-bar-status-icon\"\n          />\n          {updateRate}Hz\n        </span>\n\n        <div className='fp-status-bar-logo-area'>\n          <Logo className=\"fp-status-bar-logo\" size={30} />\n        </div>\n        \n        {/* Contrôles UI */}\n        <div className=\"fp-status-bar-controls\">\n\n          <button \n            className=\"fp-status-bar-playlist-btn\"\n            onClick={onTogglePlaylist}\n            title={showPlaylist ? \"Hide Playlist\" : \"Show Playlist\"}\n          >\n            <FeatherIcon \n              name=\"list\" \n              size={16} \n              className=\"fp-icon-button\"\n            />\n          </button>\n\n          <button \n            className=\"fp-status-bar-visualizer-btn\"\n            onClick={onToggleVisualizer}\n            title={showVisualizer ? \"Hide Visualizer\" : \"Show Visualizer\"}\n          >\n            {/* ✅ MODIFIÉ: Feather icons avec logique conditionnelle */}\n            <FeatherIcon \n              name=\"bar-chart-2\" \n              size={16} \n              className=\"fp-icon-button\"\n            />\n          </button>\n          \n          <button \n            className=\"fp-status-bar-debug-btn\"\n            onClick={onToggleDebug}\n            title={showDebug ? \"Hide Debug\" : \"Show Debug\"}\n          >\n            {/* ✅ MODIFIÉ: Feather icons pour debug */}\n            <FeatherIcon \n              name=\"search\" \n              size={16} \n              className=\"fp-icon-button\"\n            />\n          </button>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default StatusBarComponent;","/**\n * ThemeUtils.js - Utilitaires centralisés pour la gestion des thèmes\n * \n * ✅ VERSION SIMPLIFIÉE:\n * - Applique seulement les variables de base via setProperty()\n * - Les variables dérivées (color-mix) sont gérées par le CSS natif\n * - Pas de génération de CSS complexe\n */\n\n// ============================================================================\n// CONSTANTES\n// ============================================================================\n\nexport const CSS_VAR_MAPPINGS = {\n  'primaryColor': '--fp-primary-color',\n  'backgroundColor': '--fp-background-color',\n  'secondaryBackgroundColor': '--fp-secondary-background-color',\n  'textColor': '--fp-text-color',\n  'borderColor': '--fp-border-color',\n  'fontFamily': '--fp-font-family',\n  'baseRadius': '--fp-base-radius',\n  'spacing': '--fp-spacing'\n};\n\n// ============================================================================\n// UTILITAIRES DE CONVERSION\n// ============================================================================\n\n/**\n * Convertit une clé de thème en variable CSS préfixée\n * @param {string} key - Clé du thème (ex: 'primaryColor')\n * @returns {string} Variable CSS (ex: '--fp-primary-color')\n */\nexport function convertToCssVar(key) {\n  return CSS_VAR_MAPPINGS[key] || `--fp-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`;\n}\n\n/**\n * Nettoie et valide un objet thème\n * @param {Object} theme - Objet thème à nettoyer\n * @returns {Object} Thème nettoyé\n */\nexport function sanitizeTheme(theme) {\n  if (!theme || typeof theme !== 'object') return {};\n  \n  const sanitized = {};\n  \n  Object.entries(theme).forEach(([key, value]) => {\n    if (value !== null && value !== undefined && value !== '') {\n      sanitized[key] = String(value).trim();\n    }\n  });\n  \n  return sanitized;\n}\n\n/**\n * Valide qu'un objet thème est valide\n * @param {Object} theme - Objet thème à valider\n * @returns {boolean} true si valide\n */\nexport function isValidTheme(theme) {\n  if (!theme || typeof theme !== 'object') return false;\n  \n  // Au moins une propriété valide\n  return Object.keys(theme).some(key => \n    theme[key] !== null && \n    theme[key] !== undefined && \n    theme[key] !== ''\n  );\n}\n\n// ============================================================================\n// APPLICATION DU THÈME - VERSION SIMPLIFIÉE\n// ============================================================================\n\n/**\n * Applique un thème sur un élément DOM\n * ✅ VERSION SIMPLIFIÉE: Applique seulement les variables de base\n * Les variables dérivées (color-mix) sont automatiquement recalculées par CSS\n * \n * @param {Object} theme - Objet thème\n * @param {HTMLElement} element - Élément DOM cible\n * @param {Object} options - Options { setDataTheme: boolean }\n * @returns {boolean} true si succès\n */\nexport function applyThemeToElement(theme, element, options = {}) {\n  if (!theme || !element) return false;\n  \n  const { setDataTheme = true } = options;\n  \n  try {\n    // ✅ Nettoyer le thème\n    const sanitizedTheme = sanitizeTheme(theme);\n    \n    // ✅ Appliquer seulement les variables de base\n    Object.entries(sanitizedTheme).forEach(([key, value]) => {\n      if (key !== 'base') {\n        const cssVar = convertToCssVar(key);\n        element.style.setProperty(cssVar, value);\n      }\n    });\n    \n    // ✅ Appliquer l'attribut data-theme pour les surcharges CSS\n    if (setDataTheme && sanitizedTheme.base) {\n      element.setAttribute('data-theme', sanitizedTheme.base);\n    }\n    \n    return true;\n    \n  } catch (error) {\n    console.error('Failed to apply theme to element:', error);\n    return false;\n  }\n}\n\n// ============================================================================\n// EXPORTS GROUPÉS\n// ============================================================================\n\nexport default {\n  convertToCssVar,\n  sanitizeTheme,\n  isValidTheme,\n  applyThemeToElement,\n  CSS_VAR_MAPPINGS\n};","import React, { Component } from 'react';\nimport MediaPlayer from './MediaPlayer';\nimport PlaylistComponent from './PlaylistComponent';\nimport HapticSettingsComponent from './HapticSettingsComponent';\nimport HapticVisualizerComponent from './HapticVisualizerComponent';\nimport LoggingComponent from './LoggingComponent';\nimport StatusBarComponent from './StatusBarComponent';\nimport FunPlayerCore from './FunPlayerCore';\nimport ThemeUtils from './ThemeUtils';\nimport './funplayer.scss';\n\n/**\n * FunPlayer - ✅ REFACTORISÉ: Status notifications uniformisées + callback MediaPlayer\n */\nclass FunPlayer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.core=new FunPlayerCore()\n    \n    this.state = {\n      updateRate: 60,\n      isPlaying: false,\n      currentActuatorData: new Map(),\n      showVisualizer: true,\n      showDebug: false,\n      showPlaylist: true,\n      renderTrigger: 0\n    };\n    \n\n    // ✅ NOUVEAU: Ref directe sur le container principal\n    this.containerRef = React.createRef();\n    this.mediaPlayerRef = React.createRef();\n    \n    // Haptic loop technique (performance pure)\n    this.hapticIntervalId = null;\n    this.expectedHapticTime = 0;\n    this.hapticTime = 0;\n    this.lastMediaTime = 0;\n    this.lastSyncTime = 0;\n\n    // ✅ MODIFIÉ: État buffering \n    this.isBuffering = false;\n    this.bufferingStartTime = 0;\n    this.bufferingSource = null; // 'waiting' | 'stall_detection' | null\n    this.stallTimeoutId = null;\n    this.stallTimeout = 5000; // 5s pour détecter un player figé\n    this.isHapticAborted = false; // Flag d'abandon définitif\n    \n    // Event listener cleanup\n    this.coreListener = null;\n  }\n\n  // ============================================================================\n  // LIFECYCLE\n  // ============================================================================\n\n  componentDidMount() {\n    this.applyTheme();\n    this.initializeComponent();\n  }\n\n  // ✅ Dans FunPlayer.jsx\n  componentDidUpdate(prevProps) {\n    if (prevProps.theme !== this.props.theme) {\n      this.applyTheme();\n    }\n    \n    // ✅ Test de référence simple et ultra-performant\n    if (prevProps.playlist === this.props.playlist) return;\n    \n    // ✅ Si on arrive ici, le contenu a vraiment changé\n    this.handlePlaylistUpdate();\n  }\n\n  componentWillUnmount() {\n    this.stopHapticLoop();\n    \n    // ✅ NOUVEAU: Cleanup timeout stall\n    if (this.stallTimeoutId) {\n      clearTimeout(this.stallTimeoutId);\n      this.stallTimeoutId = null;\n    }\n    \n    if (this.coreListener) {\n      this.coreListener();\n    }\n  }\n\n  initializeComponent = () => {\n    try {\n      this.core.notify?.('status:funplayer', { message: 'Initializing FunPlayer component...', type: 'processing' });\n      \n      this.coreListener = this.core.addListener(this.handleEvent);\n      \n      if (this.props.playlist) {\n        this.handlePlaylistUpdate();\n      }\n      \n      this.core.notify?.('status:funplayer', { message: 'FunPlayer component initialized', type: 'success' });\n      \n    } catch (error) {\n      this.core.notify?.('status:funplayer', { message: 'FunPlayer initialization failed', type: 'error', error: error.message });\n    }\n  }\n\n  handlePlaylistUpdate = async () => {\n    const { playlist } = this.props;\n    \n    this.core.notify?.('status:funplayer', { message: `Synchronizing playlist: ${playlist?.length || 0} items`, type: 'log' });\n    \n    await this.core.playlist.loadPlaylist(playlist);\n  }\n\n  // ============================================================================\n  // THEME\n  // ============================================================================\n\n  applyTheme = () => {\n    const { theme } = this.props;\n    if (!theme) return;\n\n    // ✅ SIMPLIFIÉ: Utilisation de ThemeUtils.applyThemeToElement\n    const element = this.containerRef.current;\n    if (!element) {\n      console.warn('Cannot apply theme: container ref not available');\n      return;\n    }\n\n    const success = ThemeUtils.applyThemeToElement(theme, element);\n    \n    if (success) {\n      this.core.notify?.('status:funplayer', { \n        message: 'Theme applied successfully with fp- prefixed variables', \n        type: 'log' \n      });\n    } else {\n      this.core.notify?.('status:funplayer', { \n        message: 'Failed to apply theme', \n        type: 'error' \n      });\n    }\n  }\n\n  // ============================================================================\n  // GESTION D'ÉVÉNEMENTS\n  // ============================================================================\n\n  handleEvent = (event, data) => {\n    switch (event) {\n      // ============================================================================\n      // MEDIA EVENTS - Router vers handlers internes (noms harmonisés)\n      // ============================================================================\n      case 'media:play':\n        this.handleMediaPlayEvent(data);\n        break;\n      case 'media:pause':\n        this.handleMediaPauseEvent(data);\n        break;\n      case 'media:ended':\n        this.handleMediaEndedEvent(data);\n        break;\n        \n      // ✅ CORRIGÉ: seeking/seeked (événements natifs Video.js)\n      case 'media:seeking':\n        this.handleMediaSeekingEvent(data);\n        break;\n      case 'media:seeked':\n        this.handleMediaSeekedEvent(data);\n        break;\n        \n      // Time events\n      case 'media:timeupdate':\n        this.handleMediaTimeUpdateEvent(data);\n        break;\n      case 'media:durationchange':\n        this.handleMediaDurationChangeEvent(data);\n        break;\n        \n      // Loading events\n      case 'media:loadstart':\n        this.handleMediaLoadStartEvent(data);\n        break;\n      case 'media:loadeddata':\n        this.handleMediaLoadedDataEvent(data);\n        break;\n      case 'media:loadedmetadata':\n        this.handleMediaLoadedMetadataEvent(data);\n        break;\n      case 'media:canplay':\n        this.handleMediaCanPlayEvent(data);\n        break;\n      case 'media:canplaythrough':\n        this.handleMediaCanPlayThroughEvent(data);\n        break;\n        \n      // Buffering events\n      case 'media:waiting':\n        this.handleMediaWaitingEvent(data);\n        break;\n      case 'media:stalled':\n        this.handleMediaStalledEvent(data);\n        break;\n      case 'media:suspend':\n        this.handleMediaSuspendEvent(data);\n        break;\n        \n      // Volume events\n      case 'media:volumechange':\n        this.handleMediaVolumeChangeEvent(data);\n        break;\n        \n      // Error events\n      case 'media:error':\n        this.handleMediaErrorEvent(data);\n        break;\n        \n      // Playlist events\n      case 'media:playlistitemchange':\n        this.handleMediaPlaylistItemChangeEvent(data);\n        break;\n        \n      // Size events\n      case 'media:resize':\n        this.handleMediaResizeEvent(data);\n        break;\n\n      // ============================================================================\n      // FUNPLAYER SPECIFIC EVENTS\n      // ============================================================================\n      case 'buttplug:device':\n        if (data.connected !== false) {\n          this.handleDeviceConnect(data);\n        } else {\n          this.handleDeviceDisconnect(data);\n        }\n        this._triggerRender();\n        break;\n        \n      case 'buttplug:connection':\n        if (data.connected === false && data.reason) {\n          const disconnectData = { device: { name: 'All devices' }, reason: data.reason };\n          this.handleDeviceDisconnect(disconnectData);\n        }\n        this._triggerRender();\n        break;\n        \n      case 'haptic:started':\n        this.handleHapticStart(data);\n        break;\n        \n      case 'haptic:stopped':\n        this.handleHapticStop(data);\n        break;\n\n      // ============================================================================\n      // OTHER EVENTS\n      // ============================================================================\n      case 'core:ready':\n        this.core.notify('status:funplayer',{message:'Core systems ready', type:'success'});\n        this._triggerRender();\n        break;\n        \n      case 'playlist:playbackChanged':\n        this.setState({ isPlaying: data.isPlaying });\n        break;\n\n      case 'playlist:itemChanged':\n        if (this.mediaPlayerRef.current && data.index >= 0) {\n          const currentMediaPlayerIndex = this.mediaPlayerRef.current.getPlaylistInfo().currentIndex;\n          if (currentMediaPlayerIndex !== data.index) {\n            this.core.notify?.('status:funplayer', { \n              message: `Syncing MediaPlayer: ${currentMediaPlayerIndex} → ${data.index}`, \n              type: 'log' \n            });\n            this.mediaPlayerRef.current.goToPlaylistItem(data.index);\n          }\n        }\n        break;\n        \n      case 'funscript:load':\n      case 'funscript:channels':\n        this._triggerRender();\n        break;\n\n      case 'component:resize':\n        this.handleResize(data);\n        break\n    }\n  }\n\n  _triggerRender = () => {\n    this.setState(prevState => ({ \n      renderTrigger: prevState.renderTrigger + 1 \n    }));\n  }\n\n  // ============================================================================\n  // MAIN API CALLBACKS\n  // ============================================================================\n\n  handleResize = (data) => {\n    const element = this.containerRef.current;\n    \n    if (!element) {\n      console.warn('📏 FunPlayer container ref not available');\n      return;\n    }\n\n    const dimensions = {\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    };\n    \n    // ✅ Logging avec fallbacks pour rétrocompatibilité\n    if (data && typeof data === 'object') {\n      // Nouveau système: data fourni via bus d'événements\n      const source = data.source || 'unknown';\n      const reason = data.reason ? ` (${data.reason})` : '';\n      \n      this.core.notify?.('status:funplayer', { \n        message: `Resize from ${source}${reason}: ${dimensions.width}×${dimensions.height}px`, \n        type: 'log' \n      });\n    } else {\n      // Ancien système: appel direct sans contexte\n      this.core.notify?.('status:funplayer', { \n        message: `Resize (legacy call): ${dimensions.width}×${dimensions.height}px`, \n        type: 'log' \n      });\n    }\n    \n    // ✅ Propager vers l'hôte (Streamlit/Web Component)\n    this.props.onResize?.(dimensions);\n  }\n\n  // Device Events (logique déjà dans ButtPlugManager)\n  handleDeviceConnect = (data) => {\n    // ✅ Trace pour uniformité/debug (pas d'echo au bus)\n    this.core.notify?.('status:funplayer', { \n      message: `Device connected: ${data.device?.name || 'Unknown'}`, \n      type: 'log' \n    });\n    this.props.onDeviceConnect?.(data);\n  }\n\n  handleDeviceDisconnect = (data) => {\n    // ✅ Trace pour uniformité/debug (pas d'echo au bus)\n    this.core.notify?.('status:funplayer', { \n      message: `Device disconnected: ${data.device?.name || 'Unknown'}`, \n      type: 'log' \n    });\n    this.props.onDeviceDisconnect?.(data);\n  }\n\n  // Haptic Events (logique déjà dans boucle haptique)\n  handleHapticStart = (data) => {\n    // ✅ Trace pour uniformité/debug (pas d'echo au bus)\n    this.core.notify?.('status:funplayer', { \n      message: `Haptic playback started: ${data.channels} channels at ${data.updateRate}Hz`, \n      type: 'log' \n    });\n    this.props.onHapticStart?.(data);\n  }\n\n  handleHapticStop = (data) => {\n    // ✅ Trace pour uniformité/debug (pas d'echo au bus)\n    this.core.notify?.('status:funplayer', { \n      message: `Haptic playback stopped: ${data.reason}`, \n      type: 'log' \n    });\n    this.props.onHapticStop?.(data);\n  }\n\n  // ============================================================================\n  // MEDIA PLAYER CALLBACKS\n  // ============================================================================\n\n  handleMediaPlay = (data) => {\n    this.core.notify(\"media:play\", data);\n    this.props.onPlay?.(data);\n  }\n\n  handleMediaPause = (data) => {\n    this.core.notify(\"media:pause\", data);\n    this.props.onPause?.(data);\n  }\n\n  handleMediaEnded = (data) => {\n    this.core.notify(\"media:ended\", data);\n    this.props.onEnded?.(data);\n  }\n\n  handleMediaSeeking = (data) => {\n    this.core.notify(\"media:seeking\", data);\n    this.props.onSeeking?.(data);\n  }\n\n  handleMediaSeeked = (data) => {\n    this.core.notify(\"media:seeked\", data);\n    this.props.onSeeked?.(data);\n  }\n\n  handleMediaTimeUpdate = (data) => {\n    this.core.notify(\"media:timeupdate\", data);\n    this.props.onTimeUpdate?.(data);\n  }\n\n  handleMediaDurationChange = (data) => {\n    this.core.notify(\"media:durationchange\", data);\n    this.props.onDurationChange?.(data);\n  }\n\n  handleMediaLoadStart = (data) => {\n    this.core.notify(\"media:loadstart\", data);\n    this.props.onLoadStart?.(data);\n  }\n\n  handleMediaLoadedData = (data) => {\n    this.core.notify(\"media:loadeddata\", data);\n    this.props.onLoadedData?.(data);\n  }\n\n  handleMediaLoadedMetadata = (data) => {\n    this.core.notify(\"media:loadedmetadata\", data);\n    this.props.onLoadedMetadata?.(data);\n  }\n\n  handleMediaCanPlay = (data) => {\n    this.core.notify(\"media:canplay\", data);\n    this.props.onCanPlay?.(data);\n  }\n\n  handleMediaCanPlayThrough = (data) => {\n    this.core.notify(\"media:canplaythrough\", data);\n    this.props.onCanPlayThrough?.(data);\n  }\n\n  handleMediaWaiting = (data) => {\n    this.core.notify(\"media:waiting\", data);\n    this.props.onWaiting?.(data);\n  }\n\n  handleMediaStalled = (data) => {\n    this.core.notify(\"media:stalled\", data);\n    this.props.onStalled?.(data);\n  }\n\n  handleMediaSuspend = (data) => {\n    this.core.notify(\"media:suspend\", data);\n    this.props.onSuspend?.(data);\n  }\n\n  handleMediaVolumeChange = (data) => {\n    this.core.notify(\"media:volumechange\", data);\n    this.props.onVolumeChange?.(data);\n  }\n\n  handleMediaError = (data) => {\n    this.core.notify(\"media:error\", data);\n    this.props.onError?.(data);\n  }\n\n  handleMediaPlaylistItemChange = (data) => {\n    this.core.notify(\"media:playlistitemchange\", data);\n    this.props.onPlaylistItemChange?.(data);\n  }\n\n  handleMediaResize = (data) => {\n    this.core.notify(\"media:resize\", data);\n  }\n\n  // ============================================================================\n  // MEDIA PLAYER EVENT HANDLERS\n  // ============================================================================\n\n  handleMediaPlayEvent = ({ currentTime }) => {\n    // Timing technique haptique\n    this.hapticTime = currentTime || 0;\n    this.lastMediaTime = this.hapticTime;\n    this.lastSyncTime = performance.now();\n    \n    const duration = this.mediaPlayerRef.current?.getDuration() || 0;\n    \n    this.core.playlist.updatePlaybackState(true, currentTime, duration);\n    \n    // Démarrage boucle haptique\n    if (this.core.funscript.hasFunscript()) {\n      this.startHapticLoop();\n      this.core.notify?.('status:funplayer', { message: `Haptic playback started at ${currentTime.toFixed(1)}s`, type: 'log' });\n    }\n  }\n\n  handleMediaPauseEvent = async ({ currentTime }) => {\n    // Arrêt boucle haptique\n    if (this.core.funscript.hasFunscript()) {\n      this.stopHapticLoop();\n      try {\n        await this.core.buttplug.stopAll();\n        this.core.notify?.('status:funplayer', { message: 'Haptic devices stopped', type: 'log' });\n      } catch (error) {\n        this.core.notify?.('status:funplayer', { message: 'Failed to stop haptic devices', type: 'log', error: error.message });\n      }\n    }\n    \n    const duration = this.mediaPlayerRef.current?.getDuration() || 0;\n    this.core.playlist.updatePlaybackState(false, currentTime, duration);\n    \n    this.setState({ currentActuatorData: new Map() });\n  }\n\n  handleMediaEndedEvent = async ({ currentTime }) => {\n    // Arrêt boucle haptique\n    if (this.core.funscript.hasFunscript()) {\n      this.stopHapticLoop();\n      try {\n        await this.core.buttplug.stopAll();\n        this.core.notify?.('status:funplayer', { message: 'Haptic playback ended', type: 'log' });\n      } catch (error) {\n        this.core.notify?.('status:funplayer', { message: 'Failed to stop haptic devices on end', type: 'log', error: error.message });\n      }\n    }\n    \n    this.core.playlist.updatePlaybackState(false, 0, 0);\n    \n    this.hapticTime = 0;\n    this.lastMediaTime = 0;\n    this.setState({ currentActuatorData: new Map() });\n  }\n\n  handleMediaSeekingEvent = ({ currentTime }) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { message: `Seeking to ${currentTime.toFixed(1)}s`, type: 'log' });\n  }\n\n  handleMediaSeekedEvent = ({ currentTime }) => {\n    // Sync haptique après seek\n    if (this.core.funscript.hasFunscript() && this.hapticIntervalId) {\n      this.hapticTime = currentTime;\n      this.lastMediaTime = currentTime;\n      this.lastSyncTime = performance.now();\n      this.core.notify?.('status:funplayer', { message: `Seeked to ${currentTime.toFixed(1)}s`, type: 'log' });\n    }\n  }\n\n  handleMediaTimeUpdateEvent = ({ currentTime }) => {\n    // Si haptique déjà abandonné, ne plus rien faire\n    if (this.isHapticAborted) {\n      return;\n    }\n    \n    // Synchronisation timing haptique (technique pur)\n    if (!this.core.funscript.hasFunscript() || !this.hapticIntervalId) {\n      return;\n    }\n    \n    const now = performance.now();\n    const timeSinceLastSync = (now - this.lastSyncTime) / 1000;\n    const mediaTimeDelta = currentTime - this.lastMediaTime;\n    \n    // ✅ Détection stall : 1s+ sans progression ET pas de buffering officiel\n    if (timeSinceLastSync > 1.0 && Math.abs(mediaTimeDelta) < 0.01 && !this.isBuffering) {\n      this.core.notify?.('status:funplayer', { message: 'Player stall detected (1s+ frozen), starting timeout', type: 'error' });\n      this._startBuffering('stall_detection', currentTime);\n      return;\n    }\n    \n    // Synchronisation normale\n    const drift = Math.abs(currentTime - this.hapticTime);\n    const shouldResync = drift > 0.05 || timeSinceLastSync > 1.0;\n    \n    if (shouldResync) {\n      this.hapticTime = currentTime;\n      this.lastMediaTime = currentTime;\n      this.lastSyncTime = now;\n      \n      if (drift > 0.1) {\n        this.core.notify?.('status:funplayer', { message: `Haptic drift detected: ${(drift * 1000).toFixed(1)}ms, resyncing`, type: 'log' });\n      }\n    }\n  }\n\n  handleMediaDurationChangeEvent = ({ duration }) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { message: `Duration changed: ${duration.toFixed(1)}s`, type: 'log' });\n  }\n\n  handleMediaLoadStartEvent = (data) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { message: 'Media loading started', type: 'log' });\n  }\n\n  handleMediaLoadedDataEvent = ({ duration }) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { message: `Media data loaded: ${duration.toFixed(1)}s`, type: 'log' });\n  }\n\n  handleMediaLoadedMetadataEvent = (data) => {\n    this.core.notify?.('status:funplayer', { message: `Media loaded: ${data.duration.toFixed(1)}s`, type: 'log' });\n    \n    const currentItem = this.core.playlist.getCurrentItem();\n    if (currentItem && Math.abs((currentItem.duration || 0) - data.duration) > 1) {\n      this.core.notify?.('status:funplayer', { message: `Duration corrected: ${currentItem.duration?.toFixed(1) || 'unknown'}s → ${data.duration.toFixed(1)}s`, type: 'log' });\n      this.core.playlist.updateCurrentItemDuration(data.duration);\n    }\n    \n    this.handleResize();\n  }\n\n  handleMediaCanPlayEvent = ({ currentTime }) => {\n    this.core.notify?.('status:funplayer', { message: 'Media can play', type: 'log' });\n    if (this.isBuffering) {\n      this._endBuffering('canplay', currentTime);\n    }\n  }\n\n  handleMediaCanPlayThroughEvent = ({ currentTime }) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { message: 'Media can play through', type: 'log' });\n  }\n\n  handleMediaWaitingEvent = ({ currentTime }) => {\n    if (this.isBuffering && this.bufferingSource === 'waiting') {\n      // Déjà en buffering officiel\n      return;\n    }\n    \n    // Arrêter tout timeout de stall en cours (priorité au buffering officiel)\n    if (this.stallTimeoutId) {\n      clearTimeout(this.stallTimeoutId);\n      this.stallTimeoutId = null;\n    }\n    \n    this._startBuffering('waiting', currentTime);\n  }\n\n  handleMediaStalledEvent = ({ currentTime }) => {\n    // Similaire à waiting\n    this.handleMediaWaitingEvent({ currentTime });\n  }\n\n  handleMediaSuspendEvent = ({ currentTime }) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { message: 'Media loading suspended', type: 'log' });\n  }\n\n  handleMediaVolumeChangeEvent = ({ volume, muted }) => {\n    // Pas de logique spéciale pour l'instant\n    this.core.notify?.('status:funplayer', { \n      message: `Volume: ${muted ? 'muted' : Math.round(volume * 100) + '%'}`, \n      type: 'log' \n    });\n  }\n\n  handleMediaErrorEvent = (error) => {\n    this.core.notify?.('status:funplayer', { message: 'Media loading failed', type: 'error', error: error.message });\n    this.core.setError('Media loading failed', error);\n  }\n\n  handleMediaPlaylistItemChangeEvent = (newVideoJsIndex) => {\n    this.core.notify?.('status:funplayer', { message: `MediaPlayer switched to item ${newVideoJsIndex}`, type: 'log' });\n    \n    if (newVideoJsIndex >= 0) {\n      const currentPlaylistIndex = this.core.playlist.getCurrentIndex();\n      \n      if (newVideoJsIndex !== currentPlaylistIndex) {\n        this.core.notify?.('status:funplayer', { message: `Syncing core playlist to Video.js index ${newVideoJsIndex}`, type: 'log' });\n        this.core.playlist.goTo(newVideoJsIndex);\n      }\n    }\n  }\n\n  handleMediaResizeEvent = (data) => {\n    // ✅ NOUVEAU: Via bus d'événements avec contexte Video.js\n    this.core.notify('component:resize', {\n      source: 'MediaPlayer',\n      reason: 'video-js-resize',\n      dimensions: data  // Video.js fournit { width, height } pour information\n    });\n  }\n\n  // ============================================================================\n  // ✅ NOUVEAU: Logique buffering intelligente selon source\n  // ============================================================================\n\n  _startBuffering = (source, currentTime) => {\n    if (this.isBuffering && this.bufferingSource === 'waiting') {\n      // Priorité absolue au buffering officiel\n      return;\n    }\n    \n    this.isBuffering = true;\n    this.bufferingSource = source;\n    this.bufferingStartTime = performance.now();\n    \n    // Suspendre la boucle haptique\n    if (this.hapticIntervalId) {\n      this.stopHapticLoop();\n      try {\n        this.core.buttplug.stopAll();\n        this.core.notify?.('status:funplayer', { message: `Buffering suspended (${source})`, type: 'log' });\n      } catch (error) {\n        this.core.notify?.('status:funplayer', { message: 'Failed to stop haptic devices', type: 'log', error: error.message });\n      }\n    }\n    \n    this.setState({ currentActuatorData: new Map() });\n    \n    // ✅ NOUVEAU: Timeout UNIQUEMENT pour stall detection\n    if (source === 'stall_detection') {\n      this.stallTimeoutId = setTimeout(() => {\n        this._abortHapticPlayback();\n      }, this.stallTimeout);\n      \n      this.core.notify?.('status:funplayer', { message: `Player stall timeout started (${this.stallTimeout}ms)`, type: 'error' });\n    }\n    // Pour 'waiting' : pas de timeout, patience infinie\n  }\n\n  _endBuffering = (trigger, currentTime) => {\n    if (!this.isBuffering) return;\n    \n    const bufferingDuration = performance.now() - this.bufferingStartTime;\n    const wasStallDetection = this.bufferingSource === 'stall_detection';\n    \n    // Clear timeout si stall detection\n    if (this.stallTimeoutId) {\n      clearTimeout(this.stallTimeoutId);\n      this.stallTimeoutId = null;\n    }\n    \n    // Reset état buffering\n    this.isBuffering = false;\n    this.bufferingSource = null;\n    \n    // ✅ NOUVEAU: Reset abandon si le player s'est remis\n    if (this.isHapticAborted && trigger === 'canplay') {\n      this.isHapticAborted = false;\n      this.core.notify?.('status:funplayer', { message: 'Player recovered, haptic playback re-enabled', type: 'success' });\n    }\n    \n    // Reprendre si conditions OK\n    const mediaPlayer = this.mediaPlayerRef.current;\n    if (mediaPlayer && mediaPlayer.isPlaying() && this.core.funscript.hasFunscript() && !this.isHapticAborted) {\n      // Re-synchroniser proprement\n      this.hapticTime = currentTime || mediaPlayer.getTime();\n      this.lastMediaTime = this.hapticTime;\n      this.lastSyncTime = performance.now();\n      \n      this.startHapticLoop();\n      \n      const sourceInfo = wasStallDetection ? ' (stall recovered)' : '';\n      this.core.notify?.('status:funplayer', { message: `Buffering ended via ${trigger} (${bufferingDuration.toFixed(0)}ms)${sourceInfo}, haptic resumed`, type: 'success' });\n    }\n  }\n\n  // ✅ NOUVEAU: Abandon définitif en cas de player figé\n  _abortHapticPlayback = () => {\n    const bufferingDuration = performance.now() - this.bufferingStartTime;\n    \n    // Clear timeout\n    if (this.stallTimeoutId) {\n      clearTimeout(this.stallTimeoutId);\n      this.stallTimeoutId = null;\n    }\n    \n    // Marquer comme abandonné\n    this.isHapticAborted = true;\n    this.isBuffering = false;\n    this.bufferingSource = null;\n    \n    // Arrêt définitif de la boucle haptique\n    this.stopHapticLoop();\n    try {\n      this.core.buttplug.stopAll();\n    } catch (error) {\n      // Silent fail\n    }\n    \n    // ✅ Tentative de réveil du player\n    const mediaPlayer = this.mediaPlayerRef.current;\n    if (mediaPlayer) {\n      try {\n        mediaPlayer.pause();\n        this.core.notify?.('status:funplayer', { message: 'Sent pause command to unresponsive player', type: 'log' });\n      } catch (error) {\n        this.core.notify?.('status:funplayer', { message: 'Failed to send pause to player', type: 'log', error: error.message });\n      }\n    }\n    \n    this.setState({ currentActuatorData: new Map() });\n    \n    // Status d'erreur final\n    this.core.notify?.('status:funplayer', { \n      message: `Media playing aborted due to unresponsive player (${bufferingDuration.toFixed(0)}ms stall)`, \n      type: 'error' \n    });\n  }\n\n  // ============================================================================\n  // HAPTIC LOOP\n  // ============================================================================\n\n  processHapticFrame = async (timeDelta) => {\n    const mediaPlayer = this.mediaPlayerRef.current;\n    \n    if (!mediaPlayer) return;\n    \n    // ✅ NOUVEAU: Ne pas traiter si abandonné ou buffering\n    if (this.isHapticAborted || this.isBuffering) {\n      return;\n    }\n    \n    // Calculs de timing spécifiques à FunPlayer\n    this.hapticTime += timeDelta;\n    const currentTime = this.hapticTime;\n    \n    const mediaRefreshRate = this.getMediaRefreshRate(mediaPlayer);\n    const adjustedDuration = this.calculateLinearDuration(timeDelta, mediaRefreshRate);\n    \n    // Orchestration haptique via core\n    const visualizerData = await this.core.processHapticFrame(currentTime, { \n      duration: adjustedDuration * 1000 \n    });\n    \n    this.setState({ currentActuatorData: visualizerData });\n  }\n\n  startHapticLoop = () => {\n    if (this.hapticIntervalId) return;\n    \n    this.expectedHapticTime = performance.now();\n    const targetInterval = 1000 / this.state.updateRate;\n    \n    this.core.notify?.('status:funplayer', { message: `Starting haptic loop at ${this.state.updateRate}Hz`, type: 'log' });\n\n    // ✅ NOUVEAU: Émettre événement haptic started sur le bus\n    const hapticData = {\n      channels: this.core.funscript.getChannels().length,\n      updateRate: this.state.updateRate,\n      reason: 'media_play'\n    };\n    this.core.notify('haptic:started', hapticData);\n\n    const optimizedLoop = () => {\n      try {\n        const currentTime = performance.now();\n        const drift = currentTime - this.expectedHapticTime;\n        \n        const hapticDelta = targetInterval / 1000;\n        this.processHapticFrame(hapticDelta);\n        \n        this.expectedHapticTime += targetInterval;\n        const adjustedDelay = Math.max(0, targetInterval - drift);\n        \n        const currentTargetInterval = 1000 / this.state.updateRate;\n        if (currentTargetInterval !== targetInterval) {\n          this.expectedHapticTime = currentTime + currentTargetInterval;\n          this.hapticIntervalId = setTimeout(() => this.restartWithNewRate(), currentTargetInterval);\n        } else {\n          this.hapticIntervalId = setTimeout(optimizedLoop, adjustedDelay);\n        }\n        \n      } catch (error) {\n        this.core.notify?.('status:funplayer', { message: 'Haptic loop error', type: 'error', error: error.message });\n        this.hapticIntervalId = setTimeout(optimizedLoop, targetInterval);\n      }\n    };\n    \n    this.hapticIntervalId = setTimeout(optimizedLoop, targetInterval);\n  }\n\n  stopHapticLoop = () => {\n    if (this.hapticIntervalId) {\n      clearTimeout(this.hapticIntervalId);\n      this.hapticIntervalId = null;\n      this.core.notify?.('status:funplayer', { message: 'Haptic loop stopped', type: 'log' });\n            // ✅ NOUVEAU: Émettre événement haptic stopped sur le bus\n      const hapticData = {\n        reason: 'media_pause'\n      };\n      this.core.notify('haptic:stopped', hapticData);\n    }\n    this.expectedHapticTime = 0;\n    this.lastSyncTime = 0;\n  }\n\n  restartWithNewRate = () => {\n    const wasPlaying = this.hapticIntervalId !== null;\n    if (wasPlaying) {\n      this.core.notify?.('status:funplayer', { message: `Restarting haptic loop with new rate: ${this.state.updateRate}Hz`, type: 'log' });\n      this.stopHapticLoop();\n      this.startHapticLoop();\n    }\n  }\n\n  getCurrentActuatorData = () => {\n    return this.state.currentActuatorData;\n  }\n\n  // ============================================================================\n  // UTILITY METHODS\n  // ============================================================================\n\n  getMediaRefreshRate = (mediaPlayer) => {\n    const state = mediaPlayer.getState();\n    const mediaType = state.mediaType;\n    \n    switch (mediaType) {\n      case 'playlist':\n        const currentItem = mediaPlayer.getCurrentItem();\n        if (!currentItem || !currentItem.sources || currentItem.sources.length === 0) {\n          return this.state.updateRate;\n        }\n        const mimeType = currentItem.sources[0].type || '';\n        return mimeType.startsWith('audio/') ? this.state.updateRate : 30;\n      case 'media':\n        return 30;\n      default:\n        return this.state.updateRate;\n    }\n  }\n\n  calculateLinearDuration = (hapticDelta, mediaRefreshRate) => {\n    const mediaFrameDuration = 1 / mediaRefreshRate;\n    const safeDuration = Math.max(hapticDelta, mediaFrameDuration) * 1.2;\n    return Math.max(0.01, Math.min(0.1, safeDuration));\n  }\n\n  getUpdateRate = () => this.state.updateRate\n\n  handleUpdateRateChange = (newRate) => {\n    this.core.notify?.('status:funplayer', { message: `Update rate changed: ${this.state.updateRate}Hz → ${newRate}Hz`, type: 'log' });\n    this.setState({ updateRate: newRate });\n  }\n\n  // ============================================================================\n  // UI CALLBACKS\n  // ============================================================================\n\n\n  handleToggleVisualizer = () => {\n    const newState = !this.state.showVisualizer;\n    this.core.notify?.('status:funplayer', { message: `Visualizer ${newState ? 'shown' : 'hidden'}`, type: 'log' });\n    this.setState({ showVisualizer: newState }, () => {\n      this.handleResize();\n    });\n  }\n\n  handleToggleDebug = () => {\n    const newState = !this.state.showDebug;\n    this.core.notify?.('status:funplayer', { message: `Debug panel ${newState ? 'shown' : 'hidden'}`, type: 'log' });\n    this.setState({ showDebug: newState }, () => {\n      this.handleResize();\n    });\n  }\n\n  handleTogglePlaylist = () => {\n    const newState = !this.state.showPlaylist;\n    this.core.notify?.('status:funplayer', { message: `Playlist ${newState ? 'shown' : 'hidden'}`, type: 'log' });\n    this.setState({ showPlaylist: newState }, () => {\n      this.handleResize();\n    });\n  }\n\n  // ============================================================================\n  // RENDER\n  // ============================================================================\n\n  render() {\n    const { showVisualizer, showDebug, showPlaylist } = this.state;\n    const playlistItems = this.core.playlist.items;\n    \n    return (\n      <div className=\"fp-funplayer\" ref={this.containerRef} >\n        \n        {/* Settings haptiques */}\n        <HapticSettingsComponent\n          core={this.core} \n          onUpdateRateChange={this.handleUpdateRateChange}\n          onGetUpdateRate={this.getUpdateRate}\n        />\n        \n        {/* Lecteur vidéo */}\n        <MediaPlayer\n          ref={this.mediaPlayerRef}\n          playlist={playlistItems}\n          notify={this.core.notify}\n          onPlay={this.handleMediaPlay}\n          onPause={this.handleMediaPause}\n          onEnded={this.handleMediaEnded}\n          onSeeking={this.handleMediaSeeking}\n          onSeeked={this.handleMediaSeeked}\n          onTimeUpdate={this.handleMediaTimeUpdate}\n          onDurationChange={this.handleMediaDurationChange}\n          onLoadStart={this.handleMediaLoadStart}\n          onLoadedData={this.handleMediaLoadedData}\n          onLoadedMetadata={this.handleMediaLoadedMetadata}\n          onCanPlay={this.handleMediaCanPlay}\n          onCanPlayThrough={this.handleMediaCanPlayThrough}\n          onWaiting={this.handleMediaWaiting}\n          onStalled={this.handleMediaStalled}\n          onSuspend={this.handleMediaSuspend}\n          onVolumeChange={this.handleMediaVolumeChange}\n          onError={this.handleMediaError}\n          onResize={this.handleResize}\n        />\n        \n        <HapticVisualizerComponent\n          core={this.core}\n          visible={showVisualizer}\n          isPlaying={this.state.isPlaying}\n          getCurrentActuatorData={this.getCurrentActuatorData}\n        />\n        \n        <LoggingComponent\n          core={this.core}\n          visible={showDebug}\n        />\n        \n        {/* Barre de status */}\n        <StatusBarComponent\n          core={this.core}\n          isPlaying={this.state.isPlaying}\n          updateRate={this.state.updateRate}\n          showVisualizer={showVisualizer}\n          showDebug={showDebug}\n          showPlaylist={showPlaylist}\n          onToggleVisualizer={this.handleToggleVisualizer}\n          onToggleDebug={this.handleToggleDebug}\n          onTogglePlaylist={this.handleTogglePlaylist}\n        />\n        \n        <PlaylistComponent\n          core={this.core} \n          visible={showPlaylist}\n        />\n        \n      </div>\n    );\n  }\n}\n\nexport default FunPlayer;"],"names":["require$$0","React","ReactDebugCurrentFrame","Component","jsxRuntimeModule","require$$1","jsxs","jsx","__publicField","fieldConfig","Fragment","pendingConfig"],"mappings":"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","x_google_ignoreList":[0,1,2]}